<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Phạm Tuấn Anh</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://phamtuananh1996.github.io/"/>
  <updated>2024-01-04T00:39:10.962Z</updated>
  <id>https://phamtuananh1996.github.io/</id>
  
  <author>
    <name>Phạm Tuấn Anh</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Recommend(Laravel): Đặt tên sao cho chuẩn :))</title>
    <link href="https://phamtuananh1996.github.io/2024/01/04/recommendlaravel-dat-ten-sao-cho-chuan/"/>
    <id>https://phamtuananh1996.github.io/2024/01/04/recommendlaravel-dat-ten-sao-cho-chuan/</id>
    <published>2024-01-04T00:39:10.962Z</published>
    <updated>2024-01-04T00:39:10.962Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mo-dau"><a href="#Mo-dau" class="headerlink" title="Mở đầu"></a>Mở đầu</h1><p>Hếy yoo, xin chào các bạn , trước kia hồi mới là sinh viên chưa bỏ được code cẩu thả đã nhảy vào code laravel ngay. Kết quả là mình đặt tên lớp, tên hàm, tên biến …. rất lung tung và không theo một quy tắc nhất định nào cả. Rồi đến lúc đọc lại code thì thôi rồi. nước mắt cứ phải gọi là tuôn rơi :sweat_smile::sweat_smile::sweat_smile:  nghĩ lại vẫn thấy ngu rồi có khi định viết lại cả chức năng auth của nó ấy chứ. </p><p>Vì vậy mình lên mạng tham khảo góp nhặt  1 số best practices về quy tắc đặt tên chung của laravel. Để các bạn cùng tìm hiểu. Ai biết rồi thì có thể lướt xuống và upvote ạ ai chưa biết có thể đọc để apply vào những dự án tiếp theo. Hoặc là dự án đang làm luôn (nhưng nếu cty có cách đặt tên riêng rồi thì lên theo qui tắc của cty nhé, không lại bị đuổi việc như chơi đấy) . :joy::joy::joy::joy: </p><h1 id="Conventions-la-gi"><a href="#Conventions-la-gi" class="headerlink" title="Conventions là gì"></a>Conventions là gì</h1><p>Thì <strong>conventions</strong> là tập hợp những nguyên tắc chung khi lập trình nhằm làm cho code dễ đọc, dễ hiểu, do đó dễ quản lý, bảo trì hơn.<br>Cái này thì mỗi cty sẽ có quy định khác nhau nhưng đa phần sẽ theo các chuẩn PSR . </p><p>PSR là viết tắt của PHP Standards Recommendations , là những tiêu chuẩn khi code PHP, nó được cộng đồng PHP xây dựng và áp dụng theo.</p><p><strong>Chuẩn PSR-0 nói về autoloading</strong></p><p><strong>Chuẩn PSR-1 về basic coding</strong></p><p><strong>Chuẩn PSR-2 về style coding</strong></p><p><strong>Chuẩn PSR-3 nói về logging</strong></p><p><strong>Chuẩn PSR-4 nói về autoloading : đây là phần cải tiến của PSR-0</strong></p><p><strong>Chuẩn PSR-7 nói về HTTP message</strong></p><p>Các bạn có thể tìm hiểu thêm về các chuẩn này. trên mạng có rất nhiều bài viết về chuẩn này.</p><p>Ở khuôn khổ bài này thì sẽ có liên quan một chút ít về <strong>chuẩn PSR-2 về style coding</strong></p><p>Mà mình nói gì mà miên man vậy đang xem qua về một số <strong>best practices</strong> về quy tắc đặt tên của laravel mà. Let go nhé.</p><h1 id="Naming-Conventions"><a href="#Naming-Conventions" class="headerlink" title="Naming Conventions"></a>Naming Conventions</h1><blockquote><p>Sau đây là các quy ước đặt tên được chấp nhận và đang được sử dụng bởi cộng đồng người dùng Larave nhé! Không phải mình tự nghĩ ra đâu!</p></blockquote><h2 id="Controllers"><a href="#Controllers" class="headerlink" title="Controllers"></a>Controllers</h2><p>Laravel dựa trên mô hình MVC mà. nên controller chúng ta sẽ thấy khá nhiều trong một project laravel vậy sao để đặt tên cho controller 1 cách xinh đẹp nhất. </p><p>Ở đây thì người ta khuyến nghị: </p><ul><li>Tên controller phải bắt đầu bằng một danh từ </li><li>Danh từ đó ở dạng số ít</li><li>Theo sau đó là hậu tố “Controller”</li><li>Tên Lớp trùng với tên file luôn nhé</li></ul><p>Ví dụ: </p><p><strong>Good</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class ArticleController extends Controller</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">&#123;</span><br></pre></td></tr></table></figure><p><strong>Bad</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticlesController</span> <span class="keyword">extends</span> <span class="title">Controller</span>    </span></span><br><span class="line"><span class="class"></span>&#123;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">wp_articlesController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span>&#123;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span>&#123;</span><br></pre></td></tr></table></figure><p><strong>Bạn nên dùng Resource Controllers trừ khi có lý do cụ thể nào đó mà không thể làm như vậy</strong></p><p>Ví dụ: </p><p><strong>Good</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DomainController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;&#125; <span class="comment">// list domains</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">()</span></span>&#123;&#125; <span class="comment">// show create form</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(Request $request)</span></span>&#123; &#125; <span class="comment">// handle the form POST </span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">($id)</span></span>&#123;&#125; <span class="comment">// show a single domain</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">edit</span><span class="params">($id)</span></span>&#123;&#125; <span class="comment">// show edit page</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">(Request $request, $id)</span></span>&#123;&#125; <span class="comment">// handle show edit page POST</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">destroy</span><span class="params">($id)</span></span>&#123;&#125; <span class="comment">// delete a domain</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Bad</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DomainController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">list</span><span class="params">()</span></span>&#123;&#125; <span class="comment">// list domains</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">create_or_save</span><span class="params">()</span></span>&#123;&#125; <span class="comment">// show create form then handle save</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show_edit</span><span class="params">($id)</span></span>&#123;&#125; <span class="comment">// show a single domain then show edit page</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">delete</span><span class="params">($id)</span></span>&#123;&#125; <span class="comment">// delete a domain</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Models"><a href="#Models" class="headerlink" title="Models"></a>Models</h2><p>Đối với model thì cộng đồng khuyến nghị như sau: </p><ul><li>Chứ cái đầu tiên của class là chữ hoa</li><li>Phải là danh từ dạng số ít</li></ul><p><strong>Good</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flight</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">     <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Bad</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flights</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">flight</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br></pre></td></tr></table></figure><blockquote><p>Phương thức định nghĩa mối quan hệ (relationship methods) <strong>hasOne</strong> hoặc <strong>belongsTo</strong>  phải là danh từ số ít</p></blockquote><p><strong>Good</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">phone</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasOne(<span class="string">'App\Phone'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Bad</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">phones</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasOne(<span class="string">'App\Phone'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Các phương  thức quan hệ  khác (relationship methods) phải là dạng danh từ số nhiều</p></blockquote><p><strong>Good</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">comments</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(<span class="string">'App\Comment'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Bad</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">comment</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(<span class="string">'App\Comment'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Thuộc tính của model phải ở dạng snake_case</p></blockquote><p><strong>Good</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$user-&gt;created_at</span><br></pre></td></tr></table></figure><p><strong>Bad</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$user-&gt;createdAt</span><br></pre></td></tr></table></figure><blockquote><p>Phương thức của model phải ở dạng camelCase</p></blockquote><p><strong>Good</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">scopePopular</span><span class="params">($query)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $query-&gt;where(<span class="string">'votes'</span>, <span class="string">'&gt;'</span>, <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>Bad</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">scope_popular</span><span class="params">($query)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $query-&gt;where(<span class="string">'votes'</span>, <span class="string">'&gt;'</span>, <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><blockquote><p>Trong ưng dụng của chúng ta thì không thể thiểu các function do chúng ta tự viết ra nhằm trợ giúp một chức năng nào đó . Bạn nên tạo 1 file có tên helper.php </p></blockquote><p><strong>Good</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">project_folder/app/helper.php</span><br><span class="line">project_folder/app/Http/helper.php</span><br></pre></td></tr></table></figure><p><strong>Bad</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">project_folder/functions.php</span><br></pre></td></tr></table></figure><blockquote><p>Bạn nên sử dụng autoloading của Composer để load các function của bạn</p></blockquote><p><strong>Good</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file composer.json</span></span><br><span class="line">...</span><br><span class="line"><span class="string">"autoload"</span>: &#123;</span><br><span class="line">    <span class="string">"files"</span>: [</span><br><span class="line">        <span class="string">"app/helpers.php"</span></span><br><span class="line">    ],</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>Bad</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file app/Http/Controllers/HomeController.php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeController</span>.<span class="title">php</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">require_once</span>(app_path(<span class="string">"helpers.php"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Trước khi viết nõ hãy kiểm tra xem đã có đã tồn tại hay chưa băng cách</p></blockquote><p><strong>Good</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (! function_exists(<span class="string">'my_custom_helper'</span>)) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">my_custom_helper</span><span class="params">($key, $default = null)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Bad</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">my_custom_helper</span><span class="params">($key, $default = null)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Khuyến nghị khác: </p><p>Nếu function dài quá 25 dòng thì bạn nên tách nhỏ function đó thành những funtion nhỏ hơn.</p><p>Mỗi function bạn nên viết Unit Test cho chúng để đảm bảo chúng chạy đúng</p></blockquote><h2 id="Routes"><a href="#Routes" class="headerlink" title="Routes"></a>Routes</h2><blockquote><p>Router phải ở dạng số nhiều và các chữ cái đều là chữ thường . chỗ này mình cũng không biết giải thích như nào nhưng các bạn nhìn vào ví dụ nhé:</p></blockquote><p><strong>Good</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'/users'</span>, <span class="string">'UserController@index'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Route::resource(<span class="string">'photos'</span>, <span class="string">'PhotoController'</span>);</span><br></pre></td></tr></table></figure><p><strong>Bad</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'/user'</span>, <span class="string">'UserController@index'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'/UsersList'</span>, <span class="string">'UserController@index'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Route::resource(<span class="string">'PHOTO'</span>, <span class="string">'PhotoController'</span>);</span><br></pre></td></tr></table></figure><blockquote><p>Tên của router phải ở dạng snake_case</p></blockquote><p><strong>Good</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'/user'</span>, <span class="string">'UserController@active'</span>)-&gt;name(<span class="string">'users.show_active'</span>);</span><br></pre></td></tr></table></figure><p><strong>Bad</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'/user'</span>, <span class="string">'UserController@active'</span>)-&gt;name(<span class="string">'users.show-active'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'/user'</span>, <span class="string">'UserController@active'</span>)-&gt;name(<span class="string">'show-active-users'</span>);</span><br></pre></td></tr></table></figure><h2 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h2><p>Cái này hay gặp phải nhất này. Xem cộng đồng khuyến nghị gì về quy tắc đặt tên biến nhé !</p><blockquote><p>Quy tắc chung của biến là ở dạng <strong>camelCase</strong></p></blockquote><p><strong>Good</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$articlesWithAuthor</span><br></pre></td></tr></table></figure><p><strong>Bad</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$articles_with_author</span><br></pre></td></tr></table></figure><blockquote><p>Tên của collection nên theo quy tắc Mô tả collection + danh từ sô nhiều</p></blockquote><p><strong>Good</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$activeUsers = User::active()-&gt;get()</span><br></pre></td></tr></table></figure><p><strong>Bad</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$users = User::active()-&gt;get()</span><br><span class="line">$user = User::active()-&gt;get()</span><br><span class="line">$User = User::active()-&gt;get()</span><br></pre></td></tr></table></figure><blockquote><p>Tên 1 object nên theo quy tắc Mô tả collection + danh từ sô ít</p></blockquote><p><strong>Good</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$activeUser = User::active()-&gt;first()</span><br></pre></td></tr></table></figure><p><strong>Bad</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$users = User::active()-&gt;first()</span><br></pre></td></tr></table></figure><h2 id="Views"><a href="#Views" class="headerlink" title="Views"></a>Views</h2><blockquote><p>Mọi người rất hay lúng túng khi đặt tên cho view. thì tên view chúng ta nên đặt ở dạng snake_case</p></blockquote><p><strong>Good</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show_filtered.blade.php</span><br></pre></td></tr></table></figure><p><strong>Bad</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">showFiltered.blade.php</span><br></pre></td></tr></table></figure><blockquote><p>Gần đây cũng có khuyến nghị nên đặt tên view dạng kebab-case. bạn cũng có thể tham khảo cách này nhé! . Mình nghĩ cách này tốt hơn cách ở trên !</p></blockquote><p><strong>Good</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show-filtered.blade.php</span><br></pre></td></tr></table></figure><blockquote><p>Bạn không nên sử lý logic code trong file view nhé mà hãy viết trong controller. trừ trường hợp bất khả kháng. ví dụ:</p></blockquote><p><strong>Good</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $api_results is passed by controller</span></span><br><span class="line">&lt;ul&gt;  </span><br><span class="line">    @<span class="keyword">foreach</span>($api_results <span class="keyword">as</span> $result)</span><br><span class="line">        &lt;li&gt;&#123;&#123; $result-&gt;name &#125;&#125;&lt;/li&gt;</span><br><span class="line">    @<span class="keyword">endforeach</span></span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p><strong>Bad</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@php</span><br><span class="line">   $api_results = json_decode(file_get_contents(<span class="string">"https://api.example.com"</span>));</span><br><span class="line">@endphp</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    @<span class="keyword">foreach</span>($api_results <span class="keyword">as</span> $result)</span><br><span class="line">        &lt;li&gt;&#123;&#123; $result-&gt;name &#125;&#125;&lt;/li&gt;</span><br><span class="line">    @<span class="keyword">endforeach</span></span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h1 id="Neu-doc-den-day-ma-thay-moi-mat-vi-Good-vs-Bad-qua-thi-clips-lai-mai-doc-tiep-nhe"><a href="#Neu-doc-den-day-ma-thay-moi-mat-vi-Good-vs-Bad-qua-thi-clips-lai-mai-doc-tiep-nhe" class="headerlink" title="Nếu đọc đến đây mà thấy mỏi mắt vì Good vs Bad quá thì clips lại mai đọc tiếp nhé !"></a>Nếu đọc đến đây mà thấy mỏi mắt vì <code>Good</code> vs <code>Bad</code> quá thì clips lại mai đọc tiếp nhé !</h1><h1 id="Database-Conventions"><a href="#Database-Conventions" class="headerlink" title="Database Conventions"></a>Database Conventions</h1><h2 id="Table-and-Fields-Naming"><a href="#Table-and-Fields-Naming" class="headerlink" title="Table and Fields Naming"></a>Table and Fields Naming</h2><blockquote><p>Tên Table phải là danh từ ở dạng số nhiều và phải dạng viết thường</p></blockquote><p><strong>Good</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateFlightsTable</span> <span class="keyword">extends</span> <span class="title">Migration</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Schema::create(<span class="string">'flights'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint $table)</span> </span>&#123;</span><br></pre></td></tr></table></figure><p><strong>Bad</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateFlightsTable</span> <span class="keyword">extends</span> <span class="title">Migration</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Schema::create(<span class="string">'flight'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint $table)</span> </span>&#123;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateUsersTable</span> <span class="keyword">extends</span> <span class="title">Migration</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Schema::create(<span class="string">'MyUsers'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint $table)</span> </span>&#123;</span><br></pre></td></tr></table></figure><blockquote><p>Tên bảng pivot phải dạng số ít của 2 model và được săp sếp theo alphabetical</p></blockquote><p><strong>Good</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">post_user</span><br><span class="line">article_user</span><br><span class="line">photo_post</span><br></pre></td></tr></table></figure><p><strong>Bad</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">posts_users</span><br><span class="line">user_articles</span><br><span class="line">post_photos</span><br></pre></td></tr></table></figure><blockquote><p>Tên cột phải ở dạng snake_case và không lên có tên ở model</p></blockquote><p><strong>Good</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">username</span><br><span class="line">title</span><br><span class="line">thumb_url</span><br></pre></td></tr></table></figure><p><strong>Bad</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UserName</span><br><span class="line">_title</span><br><span class="line">ThumbUrl</span><br><span class="line">post_title</span><br></pre></td></tr></table></figure><blockquote><p>Khóa ngoại phải ở dạng tên model + hậu tố _id</p></blockquote><p><strong>Good</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_id</span><br></pre></td></tr></table></figure><p><strong>Bad</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">userid</span><br><span class="line">siteid</span><br><span class="line">Memberid</span><br><span class="line">TransactionID</span><br></pre></td></tr></table></figure><blockquote><p>Khóa chính phải là id. cái này hơi kỳ kỳ :joy::joy::joy:. dù gì đây cũng là khuyến nghị lên dùng</p></blockquote><p><strong>Good</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id</span><br></pre></td></tr></table></figure><p><strong>Bad</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ID</span><br><span class="line">pkid</span><br><span class="line">guid</span><br></pre></td></tr></table></figure><h2 id="Database-Alterations"><a href="#Database-Alterations" class="headerlink" title="Database Alterations"></a>Database Alterations</h2><blockquote><p>Tên file Migration phải theo pattern :  yyyy_mm_dd_<timestamp><em>create</em><table name>_table</p></blockquote><p><strong>Good</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span>_06_06_164210_create_domains_table.php</span><br></pre></td></tr></table></figure><p><strong>Bad</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span>_06_06_164210_domains.php</span><br></pre></td></tr></table></figure><h1 id="Tong-ket"><a href="#Tong-ket" class="headerlink" title="Tổng kết"></a>Tổng kết</h1><p>   Bài viết cũng khá dài rồi. mặc dù còn rất nhiều recommend khác nhưng trên đây là nhưng cái các bạn hay dùng và hay gaejp nhất trong project của mình. hy vọng các bạn có thể tham khảo qua. và hãy comment xuống dưới recommend của bạn nhé </p><p>  Thân ái và quyết thắng  :heart_eyes::heart_eyes::heart_eyes::heart_eyes::heart_eyes:</p><p>  Tham khảo:  <a href="https://www.laravelbestpractices.com/" target="_blank" rel="noopener">https://www.laravelbestpractices.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mo-dau&quot;&gt;&lt;a href=&quot;#Mo-dau&quot; class=&quot;headerlink&quot; title=&quot;Mở đầu&quot;&gt;&lt;/a&gt;Mở đầu&lt;/h1&gt;&lt;p&gt;Hếy yoo, xin chào các bạn , trước kia hồi mới là sinh 
      
    
    </summary>
    
    
    
      <category term="laravel" scheme="https://phamtuananh1996.github.io/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>Những câu hỏi JavaScript trình độ Advanced</title>
    <link href="https://phamtuananh1996.github.io/2022/06/30/javascript-quiz/"/>
    <id>https://phamtuananh1996.github.io/2022/06/30/javascript-quiz/</id>
    <published>2022-06-30T09:02:40.000Z</published>
    <updated>2024-01-04T00:39:10.962Z</updated>
    
    <content type="html"><![CDATA[<h6 id="1-Output-la-gi"><a href="#1-Output-la-gi" class="headerlink" title="1. Output là gì?"></a>1. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name);</span><br><span class="line">  <span class="built_in">console</span>.log(age);</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">"Lydia"</span>;</span><br><span class="line">  <span class="keyword">let</span> age = <span class="number">21</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayHi();</span><br></pre></td></tr></table></figure><ul><li>A: <code>Lydia</code> và <code>undefined</code></li><li>B: <code>Lydia</code> và <code>ReferenceError</code></li><li>C: <code>ReferenceError</code> và <code>21</code></li><li>D: <code>undefined</code> và <code>ReferenceError</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-D"><a href="#Dap-an-D" class="headerlink" title="Đáp án: D"></a>Đáp án: D</h4><p>Trong hàm chúng ta đã khai báo biến <code>name</code> với <code>var</code>. Điều đó có nghĩa là biến này sẽ được hoisted (một vùng nhớ sẽ được set up khi biến được khởi tạo) với giá trị mặc định là <code>undefined</code>, cho tới khi chúng ta thực sự định nghĩa biến đó. Trong hàm này, chúng ta chưa hề định nghĩa biến <code>name</code> tại dòng mà ta log ra, vậy nên giá trị mặc định của nó vẫn là <code>undefined</code>.</p><p>Các biến được khai báo với keyword <code>let</code> (và <code>const</code>) cũng được hoisted nhưng không giống như <code>var</code>, chúng không được <i>khởi tạo</i>. Chúng ta sẽ không thể truy cập chúng cho tới khi chúng ta khai báo (khởi tạo) chúng. Người ta gọi đó là “temporal dead zone”. Khi ta truy cập đến một giá trị trước khi chúng được khai báo, JavaScript sẽ throws một <code>ReferenceError</code>.</p></p></details><hr><h6 id="2-Output-se-la-gi"><a href="#2-Output-se-la-gi" class="headerlink" title="2. Output sẽ là gì?"></a>2. Output sẽ là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(i), <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(i), <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>0 1 2</code> and <code>0 1 2</code></li><li>B: <code>0 1 2</code> and <code>3 3 3</code></li><li>C: <code>3 3 3</code> and <code>0 1 2</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C"><a href="#Dap-an-C" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Bởi vì event queue trong JavaScript, hàm <code>setTimeout</code> callback sẽ được gọi <em>sau khi</em> vòng lặp được thực hiện. Bời vì biến <code>i</code> trong vòng lặp đầu tiên được khai báo với từ khóa <code>var</code>, nên nó sẽ là một biến global. Trong suốt vòng lặp, mỗi lần chúng ta tăng giá trị của <code>i</code> lên <code>1</code>, sử dụng phép toán <code>++</code>. Cho tới khi callback <code>setTimeout</code> được gọi, giá trị của <code>i</code> đã trở thành <code>3</code> rồi.</p><p>Trong vòng lặp thứ 2, biến <code>i</code> được khai báo với từ khóa <code>let</code>, có nghĩa nó là một biến block-scoped (block là những gì được viết bên trong cặp ngoặc <code>{ }</code>). Tại mỗi vòng lặp, <code>i</code> sẽ là một biến mới có một giá trị mới, và giá trị đó có scope là bên trong vòng lặp mà thôi.</p></p></details><hr><h6 id="3-Output-se-la-gi"><a href="#3-Output-se-la-gi" class="headerlink" title="3. Output sẽ là gì?"></a>3. Output sẽ là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shape = &#123;</span><br><span class="line">  radius: <span class="number">10</span>,</span><br><span class="line">  diameter() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.radius * <span class="number">2</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  perimeter: <span class="function"><span class="params">()</span> =&gt;</span> <span class="number">2</span> * <span class="built_in">Math</span>.PI * <span class="keyword">this</span>.radius</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">shape.diameter();</span><br><span class="line">shape.perimeter();</span><br></pre></td></tr></table></figure><ul><li>A: <code>20</code> and <code>62.83185307179586</code></li><li>B: <code>20</code> and <code>NaN</code></li><li>C: <code>20</code> and <code>63</code></li><li>D: <code>NaN</code> and <code>63</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B"><a href="#Dap-an-B" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p>Chú ý rằng giá trị <code>diameter</code> là một hàm thông thường, còn <code>perimeter</code> là một <em>arrow function</em>.</p><p>Không giống như hàm thông thường, với <em>arrow function</em>, biến<code>this</code> sẽ trỏ tới surrounding scope! Có nghĩa là khi chúng ta gọi <code>perimeter</code>, nó sẽ không được gọi bởi shape object, mà nó được gọi bởi object nào đó tại surrounding scope (ví dụ <code>window</code> chẳng hạn).</p><p>Khi không có giá trị <code>radius</code> tại object đó, nó sẽ trả về <code>undefined</code>.</p></p></details><hr><h6 id="4-Output-la-gi"><a href="#4-Output-la-gi" class="headerlink" title="4. Output là gì?"></a>4. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+<span class="literal">true</span>;</span><br><span class="line">!<span class="string">"Lydia"</span>;</span><br></pre></td></tr></table></figure><ul><li>A: <code>1</code> and <code>false</code></li><li>B: <code>false</code> and <code>NaN</code></li><li>C: <code>false</code> and <code>false</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A"><a href="#Dap-an-A" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p>Phép toán cộng <code>+</code> sẽ convert một toán hạng sang dạng number. <code>true</code> là <code>1</code>, và <code>false</code> is <code>0</code>.</p><p>Chuỗi <code>&#39;Lydia&#39;</code> là một <em>truthy value</em>. Điều chúng ta thật sự đang hỏi chính là  “có phải một giá trị truthy là falsy?”. Rõ ràng câu trả lời là <code>false</code> rồi.</p></p></details><hr><h6 id="5-Cai-nao-dung"><a href="#5-Cai-nao-dung" class="headerlink" title="5. Cái nào đúng?"></a>5. Cái nào đúng?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bird = &#123;</span><br><span class="line">  size: <span class="string">"small"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mouse = &#123;</span><br><span class="line">  name: <span class="string">"Mickey"</span>,</span><br><span class="line">  small: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>A: <code>mouse.bird.size</code> không hợp lệ</li><li>B: <code>mouse[bird.size]</code> không hợp lệ</li><li>C: <code>mouse[bird[&quot;size&quot;]]</code> không hợp lệ</li><li>D: Tất cả đều hợp lệ</li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-1"><a href="#Dap-an-A-1" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p>Trong JavaScript thì tất cả keys của các object đều là string (ngoại trừ khi nó là một Symbol). Dù chúng ta không viết chúng như một string, về cơ bản chúng sẽ luôn được chuyển sang dạng string.</p><p>JavaScript thông dịch (hay unboxes) từng câu lệnh. Khi chúng ta sử dụng cặp dấu ngoặc <code>[]</code>, nó sẽ tìm kiếm dấu mở ngoặc đầu tiên <code>[</code>, và sẽ tiếp tục tìm kiếm cho tới khi gặp dấu đóng ngoặc <code>]</code>. Chỉ khi đó thì câu lệnh mới được thực thi.</p><p><code>mouse[bird.size]</code>: Giá trị đầu tiên <code>bird.size</code> là <code>&quot;small&quot;</code>. <code>mouse[&quot;small&quot;]</code> sẽ trả về <code>true</code></p><p>Tuy nhiên, khi chúng ta sử dụng dấu chấm <code>.</code>, điều trên không còn đúng nữa. <code>mouse</code> không hề có key nào tên là <code>bird</code>, có nghĩa <code>mouse.bird</code> sẽ là <code>undefined</code>. Sau đó chúng ta gọi <code>size</code> sử dụng chấm <code>.</code>: <code>mouse.bird.size</code>. Vì  <code>mouse.bird</code> là <code>undefined</code>, lời gọi sẽ trở thành <code>undefined.size</code>. Đây là một lời gọi không hợp lệ, nó sẽ throw ra một lỗi kiểu như <code>Cannot read property &quot;size&quot; of undefined</code>.</p></p></details><hr><h6 id="6-Output-la-gi"><a href="#6-Output-la-gi" class="headerlink" title="6. Output là gì?"></a>6. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> c = &#123; <span class="attr">greeting</span>: <span class="string">"Hey!"</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> d;</span><br><span class="line"></span><br><span class="line">d = c;</span><br><span class="line">c.greeting = <span class="string">"Hello"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(d.greeting);</span><br></pre></td></tr></table></figure><ul><li>A: <code>Hello</code></li><li>B: <code>Hey</code></li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li><li>E: <code>TypeError</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-2"><a href="#Dap-an-A-2" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p>Trong JavaScript, tất cả các object sẽ được <em>tham chiếu</em> khi chúng được gán _bằng_wwwww  một giá trị khác.</p><p>Đầu tiên, giá trị <code>c</code> có giá trị là một object. Sau đó, chúng ta gán <code>d</code> tham chiếu tới object mà <code>c</code> trỏ tới.</p><img src="https://i.imgur.com/ko5k0fs.png" width="200"><p>Khi ta thay đổi giá trị của object, tất cả các biến tham chiếu cũng đều thay đổi giá trị theo.</p></p></details><hr><h6 id="7-Output-la-gi"><a href="#7-Output-la-gi" class="headerlink" title="7. Output là gì?"></a>7. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">let</span> c = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a == b);</span><br><span class="line"><span class="built_in">console</span>.log(a === b);</span><br><span class="line"><span class="built_in">console</span>.log(b === c);</span><br></pre></td></tr></table></figure><ul><li>A: <code>true</code> <code>false</code> <code>true</code></li><li>B: <code>false</code> <code>false</code> <code>true</code></li><li>C: <code>true</code> <code>false</code> <code>false</code></li><li>D: <code>false</code> <code>true</code> <code>true</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-1"><a href="#Dap-an-C-1" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p><code>new Number()</code> là một hàm built-in constructor. Mặc dù nó trông có vẻ giống như là một số, nhưng không phải: nó thực sự là một object với hàng tá những thông số khác nữa.</p><p>Khi ta sử dụng phép so sánh <code>==</code>, nó đơn thuần chỉ kiểm tra xem 2 biến có <em>giá trị</em> giống nhau. Chúng đều có giá trị là <code>3</code>, vậy nên phép toán đầu trả về <code>true</code>.</p><p>Tuy nhiên khi sử dụng phép so sánh <code>===</code>, cả <em>giá trị</em> và <em>kiểu</em> đều phải giống nhau. Rõ ràng: <code>new Number()</code> không phải là một số, nó là một <strong>object</strong>. Cả 2 phép toán sau đều trả về <code>false.</code></p></p></details><hr><h6 id="8-Output-la-gi"><a href="#8-Output-la-gi" class="headerlink" title="8. Output là gì?"></a>8. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chameleon</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> colorChange(newColor) &#123;</span><br><span class="line">    <span class="keyword">this</span>.newColor = newColor;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.newColor;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(&#123; newColor = <span class="string">"green"</span> &#125; = &#123;&#125;) &#123;</span><br><span class="line">    <span class="keyword">this</span>.newColor = newColor;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> freddie = <span class="keyword">new</span> Chameleon(&#123; <span class="attr">newColor</span>: <span class="string">"purple"</span> &#125;);</span><br><span class="line">freddie.colorChange(<span class="string">"orange"</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>orange</code></li><li>B: <code>purple</code></li><li>C: <code>green</code></li><li>D: <code>TypeError</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-D-1"><a href="#Dap-an-D-1" class="headerlink" title="Đáp án: D"></a>Đáp án: D</h4><p>Hàm <code>colorChange</code> là một hàm static (hàm tĩnh). Hàm static được thiết kế để chỉ để tồn tại ở mức class, và không thể truyền cho bất cứ instance con nào. Vì <code>freddie</code> là một instance con, hàm static này sẽ không được truyền xuống, và do đó không thể gọi được tại <code>freddie</code> instance: nó sẽ throw ra một <code>TypeError</code>.</p></p></details><hr><h6 id="9-Output-la-gi"><a href="#9-Output-la-gi" class="headerlink" title="9. Output là gì?"></a>9. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> greeting;</span><br><span class="line">greetign = &#123;&#125;; <span class="comment">// Lỗi đánh máy!</span></span><br><span class="line"><span class="built_in">console</span>.log(greetign);</span><br></pre></td></tr></table></figure><ul><li>A: <code>{}</code></li><li>B: <code>ReferenceError: greetign is not defined</code></li><li>C: <code>undefined</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-3"><a href="#Dap-an-A-3" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p>Nó sẽ log ra object <code>greetign</code>, bởi vì chúng ta vừa khởi tạo một global object! Khi chúng ta đánh máy nhầm <code>greeting</code> thành <code>greetign</code>, trình thông dịch của JS sẽ coi nó như là <code>global.greetign = {}</code> (hay <code>window.greetign = {}</code> nếu chạy trên browser).</p><p>Để tránh điều này chúng ta có thể sử dụng <code>&quot;use strict&quot;</code>. Nó sẽ đảm bảo rẳng các biến đều phải được khai báo trước khi sử dụng.</p></p></details><hr><h6 id="10-Dieu-gi-se-xay-ra-khi-chung-ta-lam-the-nay"><a href="#10-Dieu-gi-se-xay-ra-khi-chung-ta-lam-the-nay" class="headerlink" title="10. Điều gì sẽ xảy ra khi chúng ta làm thế này?"></a>10. Điều gì sẽ xảy ra khi chúng ta làm thế này?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bark</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Woof!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bark.animal = <span class="string">"dog"</span>;</span><br></pre></td></tr></table></figure><ul><li>A: Hoàn toàn không có vấn đề gì!</li><li>B: <code>SyntaxError</code>. Bạn không thể thêm thuộc tính theo cách này.</li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-4"><a href="#Dap-an-A-4" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p>Điều này là có thể với Javascript, bởi vì <code>function</code> cũng chỉ là <code>object</code> mà thôi! (Mọi primitive types đều là object)</p><p>Function là một object đặc biệt. Phần code mà bạn viết không phải là function thực tế đâu. Function ở đây chính là một object với các thuộc tính. Và các thuộc tính này có thể gọi được.</p></p></details><hr><h6 id="11-Output-la-gi"><a href="#11-Output-la-gi" class="headerlink" title="11. Output là gì?"></a>11. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">firstName, lastName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">  <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> member = <span class="keyword">new</span> Person(<span class="string">"Lydia"</span>, <span class="string">"Hallie"</span>);</span><br><span class="line">Person.getFullName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.firstName&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>.lastName&#125;</span>`</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(member.getFullName());</span><br></pre></td></tr></table></figure><ul><li>A: <code>TypeError</code></li><li>B: <code>SyntaxError</code></li><li>C: <code>Lydia Hallie</code></li><li>D: <code>undefined</code> <code>undefined</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-5"><a href="#Dap-an-A-5" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p>Chúng ta không thể add thêm một thuộc tính cho một constructor giống như một object thông thường. Nếu bạn muốn add thêm thuộc tính nào đó cho tất cả các object một lần, bạn phải dùng <code>prototype</code>. Trong trường hợp này cũng vậy.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype.getFullName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.firstName&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>.lastName&#125;</span>`</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>khi này <code>member.getFullName()</code> sẽ hoạt động. Tại sao nên làm vậy? Hãy thử thêm chúng trực tiếp vào constructor xem sao. Không phải mọi instance <code>Person</code> đều cần phương thức này. Nó sẽ dẫn tới việc lãng phí rất nhiều bộ nhớ, khi chúng đều phải lưu trữ thuộc tính này cho mỗi instance. Thay vì thế, nếu ta chỉ thêm chúng vào <code>prototype</code>, ta sẽ chỉ tốn bộ nhớ <em>một lần</em> mà thôi, và mọi object khác đều có thể truy cập đến nó!</p></p></details><hr><h6 id="12-Output-la-gi"><a href="#12-Output-la-gi" class="headerlink" title="12. Output là gì?"></a>12. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">firstName, lastName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">  <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lydia = <span class="keyword">new</span> Person(<span class="string">"Lydia"</span>, <span class="string">"Hallie"</span>);</span><br><span class="line"><span class="keyword">const</span> sarah = Person(<span class="string">"Sarah"</span>, <span class="string">"Smith"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(lydia);</span><br><span class="line"><span class="built_in">console</span>.log(sarah);</span><br></pre></td></tr></table></figure><ul><li>A: <code>Person {firstName: &quot;Lydia&quot;, lastName: &quot;Hallie&quot;}</code> và <code>undefined</code></li><li>B: <code>Person {firstName: &quot;Lydia&quot;, lastName: &quot;Hallie&quot;}</code> và <code>Person {firstName: &quot;Sarah&quot;, lastName: &quot;Smith&quot;}</code></li><li>C: <code>Person {firstName: &quot;Lydia&quot;, lastName: &quot;Hallie&quot;}</code> và <code>{}</code></li><li>D:<code>Person {firstName: &quot;Lydia&quot;, lastName: &quot;Hallie&quot;}</code> và <code>ReferenceError</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-6"><a href="#Dap-an-A-6" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p>Với <code>sarah</code>, chúng ta khai báo mà không có từ khóa <code>new</code>. Khi sử dụng <code>new</code>, nó sẽ trỏ đến một object mới mà ta vừa tạo ra. Tuy nhiên nếu ta không dùng <code>new</code> thì nó sẽ trỏ tới <strong>global object</strong>!</p><p>Chúng ta cho rằng <code>this.firstName</code> là <code>&quot;Sarah&quot;</code> và <code>this.lastName</code> là <code>&quot;Smith&quot;</code>. Tuy nhiên sự thực là chúng ta đã định nghĩa <code>global.firstName = &#39;Sarah&#39;</code> và <code>global.lastName = &#39;Smith&#39;</code>. Bản thân biến <code>sarah</code> vẫn là <code>undefined</code>.</p></p></details><hr><h6 id="13-3-giai-doan-cua-event-propagation-la-gi"><a href="#13-3-giai-doan-cua-event-propagation-la-gi" class="headerlink" title="13. 3 giai đoạn của event propagation là gì?"></a>13. 3 giai đoạn của event propagation là gì?</h6><ul><li>A: Target &gt; Capturing &gt; Bubbling</li><li>B: Bubbling &gt; Target &gt; Capturing</li><li>C: Target &gt; Bubbling &gt; Capturing</li><li>D: Capturing &gt; Target &gt; Bubbling</li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-D-2"><a href="#Dap-an-D-2" class="headerlink" title="Đáp án: D"></a>Đáp án: D</h4><p>Trong <strong>capturing</strong> phase, event được truyền từ các phần tử cha cho tới phần tử target. Sau khi tới được phần tử <strong>target</strong> thì <strong>bubbling</strong> sẽ bắt đầu.</p><img src="https://i.imgur.com/N18oRgd.png" width="200"></p></details><hr><h6 id="14-Tat-ca-cac-object-deu-co-prototypes"><a href="#14-Tat-ca-cac-object-deu-co-prototypes" class="headerlink" title="14. Tất cả các object đều có prototypes."></a>14. Tất cả các object đều có prototypes.</h6><ul><li>A: đúng</li><li>B: sai</li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-1"><a href="#Dap-an-B-1" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p>Tất cả các object đều có prototypes, ngoại trừ <strong>base object</strong>. Object base có thể truy cập đến vài methods và properties, ví dụ như <code>.toString</code>. Đó là lý do tại sao chúng ta có thể sử dụng được các built-in methods trong JavaScript! Tất cả các phương thức đó đều có trong prototype. Mặc dù JavaScript không thể tìm thấy chúng trong object một cách trực tiếp, nó sẽ được truyền xuống thông qua prototype chain và xuống tới object, tại đây chúng ta có thể truy cập được nó.</p></p></details><hr><h6 id="15-Output-la-gi"><a href="#15-Output-la-gi" class="headerlink" title="15. Output là gì?"></a>15. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(<span class="number">1</span>, <span class="string">"2"</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>NaN</code></li><li>B: <code>TypeError</code></li><li>C: <code>&quot;12&quot;</code></li><li>D: <code>3</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-2"><a href="#Dap-an-C-2" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>JavaScript là một ngôn ngữ <strong>dynamically typed</strong>: chúng ta không khai báo kiểu dữ liệu khi khai báo biến. Giá trị có thể bị tự động convert sang một kiểu dữ liệu khác mà ta không hề hay biết, điều này được gọi là <em>implicit type coercion</em>. <strong>Coercion</strong> có nghĩa là convert từ kiểu này sang kiểu khác.</p><p>Trong ví dụ này, JavaScript sẽ convert số <code>1</code> sang dạng string. Mỗi khi ta cộng một số (<code>1</code>) với một string (<code>&#39;2&#39;</code>), số sẽ luôn được xem như là một string. Kết quả sẽ là một phép nối chuỗi giống như <code>&quot;Hello&quot; + &quot;World&quot;</code>, vậy nên <code>&quot;1&quot; + &quot;2&quot;</code> sẽ trả về là <code>&quot;12&quot;</code>.</p></p></details><hr><h6 id="16-Output-la-gi"><a href="#16-Output-la-gi" class="headerlink" title="16. Output là gì?"></a>16. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(number++);</span><br><span class="line"><span class="built_in">console</span>.log(++number);</span><br><span class="line"><span class="built_in">console</span>.log(number);</span><br></pre></td></tr></table></figure><ul><li>A: <code>1</code> <code>1</code> <code>2</code></li><li>B: <code>1</code> <code>2</code> <code>2</code></li><li>C: <code>0</code> <code>2</code> <code>2</code></li><li>D: <code>0</code> <code>1</code> <code>2</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-3"><a href="#Dap-an-C-3" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Khi phép toán <code>++</code> nằm ở <strong>đằng sau</strong> (<strong>postfix</strong>):</p><ol><li>Trả về giá trị (trả về <code>0</code>)</li><li>Tăng giá trị lên (number giờ là <code>1</code>)</li></ol><p>Khi phép toán <code>++</code> nằm ở <strong>đằng trước</strong> (<strong>prefix</strong>):</p><ol><li>Tăng giá trị lên (number giờ là <code>2</code>)</li><li>Trả về giá trị (trả về <code>2</code>)</li></ol><p>Vậy kết quả là <code>0 2 2</code>.</p></p></details><hr><h6 id="17-Output-la-gi"><a href="#17-Output-la-gi" class="headerlink" title="17. Output là gì?"></a>17. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPersonInfo</span>(<span class="params">one, two, three</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(one);</span><br><span class="line">  <span class="built_in">console</span>.log(two);</span><br><span class="line">  <span class="built_in">console</span>.log(three);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="string">"Lydia"</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line">getPersonInfo<span class="string">`<span class="subst">$&#123;person&#125;</span> is <span class="subst">$&#123;age&#125;</span> years old`</span>;</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;Lydia&quot;</code> <code>21</code> <code>[&quot;&quot;, &quot; is &quot;, &quot; years old&quot;]</code></li><li>B: <code>[&quot;&quot;, &quot; is &quot;, &quot; years old&quot;]</code> <code>&quot;Lydia&quot;</code> <code>21</code></li><li>C: <code>&quot;Lydia&quot;</code> <code>[&quot;&quot;, &quot; is &quot;, &quot; years old&quot;]</code> <code>21</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-2"><a href="#Dap-an-B-2" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p>Nếu bạn dùng <em>tagged template literals</em>, giá trị của đối số đầu tiên luôn luôn là một mảng các string. Những đối số còn lại sẽ lấy giá trị từ biểu thức đưa vào!</p></p></details><hr><h6 id="18-Output-la-gi"><a href="#18-Output-la-gi" class="headerlink" title="18. Output là gì?"></a>18. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAge</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (data === &#123; <span class="attr">age</span>: <span class="number">18</span> &#125;) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"You are an adult!"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data == &#123; <span class="attr">age</span>: <span class="number">18</span> &#125;) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"You are still an adult."</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Hmm.. You don't have an age I guess`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">checkAge(&#123; <span class="attr">age</span>: <span class="number">18</span> &#125;);</span><br></pre></td></tr></table></figure><ul><li>A: <code>You are an adult!</code></li><li>B: <code>You are still an adult.</code></li><li>C: <code>Hmm.. You don&#39;t have an age I guess</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-4"><a href="#Dap-an-C-4" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Khi test sự bằng nhau, các kiểu dữ liệu cơ bản sẽ so sánh <em>giá trị</em> của chúng, còn object thì so sánh <em>tham chiếu</em>. JavaScript sẽ kiểm tra xem các object đó có trỏ đến những vùng nhớ giống nhau hay không.</p><p>Hai object chúng ta đang so sánh không có được điều đó: object đối số tham chiếu đến một vùng nhớ khác với object chúng ta dùng để kiểm tra sự bằng nhau.</p><p>Đó là lý do tại sao cả <code>{ age: 18 } === { age: 18 }</code> và <code>{ age: 18 } == { age: 18 }</code> đều trả về <code>false</code>.</p></p></details><hr><h6 id="19-Output-la-gi"><a href="#19-Output-la-gi" class="headerlink" title="19. Output là gì?"></a>19. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">typeof</span> args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getAge(<span class="number">21</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;number&quot;</code></li><li>B: <code>&quot;array&quot;</code></li><li>C: <code>&quot;object&quot;</code></li><li>D: <code>&quot;NaN&quot;</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-5"><a href="#Dap-an-C-5" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p><em>Spread operator</em> (<code>...args</code>.) sẽ trả về một mảng các đối số. Mảng thực chất là một object, vậy nên <code>typeof args</code> sẽ trả về <code>&quot;object&quot;</code>.</p></p></details><hr><h6 id="20-Output-la-gi"><a href="#20-Output-la-gi" class="headerlink" title="20. Output là gì?"></a>20. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  "use strict"</span>;</span><br><span class="line">  age = <span class="number">21</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getAge();</span><br></pre></td></tr></table></figure><ul><li>A: <code>21</code></li><li>B: <code>undefined</code></li><li>C: <code>ReferenceError</code></li><li>D: <code>TypeError</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-6"><a href="#Dap-an-C-6" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Với <code>&quot;use strict&quot;</code>, chúng ta sẽ đảm bảo được rằng ta sẽ không bao giờ khai báo biến global một cách vô ý. Tại đây chúng ta chưa khai báo biến <code>age</code>, và khi dùng <code>&quot;use strict&quot;</code>, nó sẽ throw ra một <em>reference error</em>. Nếu như không dùng <code>&quot;use strict&quot;</code>, nó sẽ vẫn hoạt động, vì thuộc tính <code>age</code> sẽ được thêm vào global object.</p></p></details><hr><h6 id="21-Gia-tri-cua-sum-la-gi"><a href="#21-Gia-tri-cua-sum-la-gi" class="headerlink" title="21. Giá trị của sum là gì?"></a>21. Giá trị của <code>sum</code> là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = <span class="built_in">eval</span>(<span class="string">"10*10+5"</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>105</code></li><li>B: <code>&quot;105&quot;</code></li><li>C: <code>TypeError</code></li><li>D: <code>&quot;10*10+5&quot;</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-7"><a href="#Dap-an-A-7" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p><code>eval</code> sẽ đánh giá đoạn code bên trong string. Nếu nó là một biểu thức, giống như trong trường hợp này, nó sẽ tính toán giá trị đó. Biểu thức là <code>10 * 10 + 5</code>, kết quả sẽ là <code>105</code>.</p></p></details><hr><h6 id="22-Bien-cool-secret-se-truy-cap-duoc-trong-bao-lau"><a href="#22-Bien-cool-secret-se-truy-cap-duoc-trong-bao-lau" class="headerlink" title="22. Biến cool_secret sẽ truy cập được trong bao lâu?"></a>22. Biến cool_secret sẽ truy cập được trong bao lâu?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.setItem(<span class="string">"cool_secret"</span>, <span class="number">123</span>);</span><br></pre></td></tr></table></figure><ul><li>A: Mãi mãi, dữ liệu sẽ không bao giờ mất.</li><li>B: Khi user đóng tab lại.</li><li>C: Khi user không chỉ là đóng tab, mà đóng browser lại.</li><li>D: Khi user tắt máy tính đi.</li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-3"><a href="#Dap-an-B-3" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p>Dữ liệu được lưu trữ trong <code>sessionStorage</code> sẽ được xóa khi đóng <em>tab</em>.</p><p>Nếu chúng ta dùng <code>localStorage</code>, data sẽ được lưu trữ mãi mãi, trừ phi hàm <code>localStorage.clear()</code> được gọi.</p></p></details><hr><h6 id="23-Output-la-gi"><a href="#23-Output-la-gi" class="headerlink" title="23. Output là gì?"></a>23. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br></pre></td></tr></table></figure><ul><li>A: <code>8</code></li><li>B: <code>10</code></li><li>C: <code>SyntaxError</code></li><li>D: <code>ReferenceError</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-4"><a href="#Dap-an-B-4" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p>Với từ khóa <code>var</code> bạn có thể khai báo bao nhiêu biến trùng tên tùy thích. Biến đó sẽ có giá trị là lần cuối khai báo.</p><p>Bạn không thể làm điều tương tự với <code>let</code> hay <code>const</code> vì chúng là <em>block-scoped</em>.</p></p></details><hr><h6 id="24-Output-la-gi"><a href="#24-Output-la-gi" class="headerlink" title="24. Output là gì?"></a>24. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="number">1</span>: <span class="string">"a"</span>, <span class="number">2</span>: <span class="string">"b"</span>, <span class="number">3</span>: <span class="string">"c"</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">set</span> = new Set([1, 2, 3, 4, 5]);</span><br><span class="line"></span><br><span class="line">obj.hasOwnProperty("1");</span><br><span class="line">obj.hasOwnProperty(1);</span><br><span class="line"><span class="keyword">set</span>.has("1");</span><br><span class="line"><span class="keyword">set</span>.has(1);</span><br></pre></td></tr></table></figure><ul><li>A: <code>false</code> <code>true</code> <code>false</code> <code>true</code></li><li>B: <code>false</code> <code>true</code> <code>true</code> <code>true</code></li><li>C: <code>true</code> <code>true</code> <code>false</code> <code>true</code></li><li>D: <code>true</code> <code>true</code> <code>true</code> <code>true</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-7"><a href="#Dap-an-C-7" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Tất cả các keys của object (ngoại trừ Symbols) về bản chất đều là string, dù chúng ta có viết chúng ra dạng string hay không. Nó là lý do tại sao <code>obj.hasOwnProperty(&#39;1&#39;)</code> cũng trả về <code>true</code>.</p><p>Tuy nhiên điều đó không đúng với <code>set</code>. Không hề có <code>&#39;1&#39;</code> trong set của chúng ta: <code>set.has(&#39;1&#39;)</code> trả về <code>false</code>. Có số <code>1</code> trong set, nên <code>set.has(1)</code> trả về <code>true</code>.</p></p></details><hr><h6 id="25-Output-la-gi"><a href="#25-Output-la-gi" class="headerlink" title="25. Output là gì?"></a>25. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="string">"one"</span>, <span class="attr">b</span>: <span class="string">"two"</span>, <span class="attr">a</span>: <span class="string">"three"</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure><ul><li>A: <code>{ a: &quot;one&quot;, b: &quot;two&quot; }</code></li><li>B: <code>{ b: &quot;two&quot;, a: &quot;three&quot; }</code></li><li>C: <code>{ a: &quot;three&quot;, b: &quot;two&quot; }</code></li><li>D: <code>SyntaxError</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-8"><a href="#Dap-an-C-8" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Nếu chúng ta có 2 keys giống nhau, thì chúng sẽ bị replace. Nó sẽ vẫn nằm ở vị trí đầu tiên chúng được khai báo, nhưng giá trị thì sẽ là giá trị lần cuối.</p></p></details><hr><h6 id="26-Ngu-canh-thuc-thi-global-cua-JavaScript-tao-ra-2-thu-cho-chung-ta-global-object-va-tu-khoa-“this”"><a href="#26-Ngu-canh-thuc-thi-global-cua-JavaScript-tao-ra-2-thu-cho-chung-ta-global-object-va-tu-khoa-“this”" class="headerlink" title="26. Ngữ cảnh thực thi global của JavaScript tạo ra 2 thứ cho chúng ta: global object, và từ khóa “this”."></a>26. Ngữ cảnh thực thi global của JavaScript tạo ra 2 thứ cho chúng ta: global object, và từ khóa “this”.</h6><ul><li>A: đúng</li><li>B: sai</li><li>C: còn tùy</li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-8"><a href="#Dap-an-A-8" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p>Ngữ cảnh thực thi cơ bản chính là ngữ cảnh global: nó là thứ mà chúng ta có thể truy cập được ở bất cứ đâu trong code.</p></p></details><hr><h6 id="27-Output-la-gi"><a href="#27-Output-la-gi" class="headerlink" title="27. Output là gì?"></a>27. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i === <span class="number">3</span>) <span class="keyword">continue</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>1</code> <code>2</code></li><li>B: <code>1</code> <code>2</code> <code>3</code></li><li>C: <code>1</code> <code>2</code> <code>4</code></li><li>D: <code>1</code> <code>3</code> <code>4</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-9"><a href="#Dap-an-C-9" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Lệnh <code>continue</code> sẽ bỏ qua một vòng lặp nếu điều kiện của nó là <code>true</code>.</p></p></details><hr><h6 id="28-Output-la-gi"><a href="#28-Output-la-gi" class="headerlink" title="28. Output là gì?"></a>28. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.giveLydiaPizza = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"Just give Lydia pizza already!"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">"Lydia"</span>;</span><br><span class="line"></span><br><span class="line">name.giveLydiaPizza();</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;Just give Lydia pizza already!&quot;</code></li><li>B: <code>TypeError: not a function</code></li><li>C: <code>SyntaxError</code></li><li>D: <code>undefined</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-9"><a href="#Dap-an-A-9" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p><code>String</code> là một built-in constructor, có nghĩa là chúng ta có thể thêm các thuộc tính vào đó. Ta vừa thêm vào đó một thuộc tính. Kiểu String cơ bản sẽ được convert sang dạng object bởi hàm string prototype. Vì thế nên tất cả các string object đều có thể truy cập đến hàm <code>giveLydiaPizza</code> này!</p></p></details><hr><h6 id="29-Output-la-gi"><a href="#29-Output-la-gi" class="headerlink" title="29. Output là gì?"></a>29. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> b = &#123; <span class="attr">key</span>: <span class="string">"b"</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> c = &#123; <span class="attr">key</span>: <span class="string">"c"</span> &#125;;</span><br><span class="line"></span><br><span class="line">a[b] = <span class="number">123</span>;</span><br><span class="line">a[c] = <span class="number">456</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a[b]);</span><br></pre></td></tr></table></figure><ul><li>A: <code>123</code></li><li>B: <code>456</code></li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-5"><a href="#Dap-an-B-5" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p>Object keys sẽ tự động được convert sang dạng string. Chúng ta đang set một object như là một key cho object <code>a</code>, với giá trị là <code>123</code>.</p><p>Tuy nhiên khi ta string hóa một object, nó sẽ trở thành <code>&quot;[object Object]&quot;</code>. Nên tại đây phép gán này thực chất chính là <code>a[&quot;object Object&quot;] = 123</code>. Phép gán tiếp theo cũng giống hệt vậy. <code>c</code> là một object khác mà chúng ta đang string hóa nó. Theo đó, <code>a[&quot;object Object&quot;] = 456</code>.</p><p>Cuối cùng khi gọi <code>a[b]</code>, thực chất chính là gọi <code>a[&quot;object Object&quot;]</code>. Giá trị của nó là <code>456</code>, nên trả về là <code>456</code>.</p></p></details><hr><h6 id="30-Output-la-gi"><a href="#30-Output-la-gi" class="headerlink" title="30. Output là gì?"></a>30. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"First"</span>);</span><br><span class="line"><span class="keyword">const</span> bar = <span class="function"><span class="params">()</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Second"</span>));</span><br><span class="line"><span class="keyword">const</span> baz = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Third"</span>);</span><br><span class="line"></span><br><span class="line">bar();</span><br><span class="line">foo();</span><br><span class="line">baz();</span><br></pre></td></tr></table></figure><ul><li>A: <code>First</code> <code>Second</code> <code>Third</code></li><li>B: <code>First</code> <code>Third</code> <code>Second</code></li><li>C: <code>Second</code> <code>First</code> <code>Third</code></li><li>D: <code>Second</code> <code>Third</code> <code>First</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-6"><a href="#Dap-an-B-6" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p>Chúng ta có một hàm <code>setTimeout</code> được gọi đầu tiên. Nên, nó sẽ được log ra cuối cùng.</p><p>Điều đó bởi vì trên browser, chúng ta không hề có runtime engine, đơn thuần chỉ có <code>WebAPI</code>. <code>WebAPI</code> cho chúng ta một hàm <code>setTimeout</code>, ta hãy ví dụ nó trên DOM.</p><p>Sau khi <em>callback</em> được gửi tới WebAPI, bản thân hàm <code>setTimeout</code> (nhưng không phải callback nhé!) sẽ được đưa ra khỏi stack.</p><img src="https://i.imgur.com/X5wsHOg.png" width="200"><p>Giờ đây, <code>foo</code> được gọi, và <code>&quot;First&quot;</code> được log ra.</p><img src="https://i.imgur.com/Pvc0dGq.png" width="200"><p><code>foo</code> được đưa ra khỏi stack, và <code>baz</code> được gọi. <code>&quot;Third&quot;</code> được log ra.</p><img src="https://i.imgur.com/WhA2bCP.png" width="200"><p>WebAPI không thể thêm thứ gì đó vào stack cho tới khi nó được sẵn sàng. Thay vào đó, nó đẩy callback function đến một nơi gọi là <em>queue</em>.</p><img src="https://i.imgur.com/NSnDZmU.png" width="200"><p>Đó chính là nơi mà <strong>event loop</strong> làm việc. Một <strong>event loop</strong> sẽ quan sát stack và task queue. Nếu stack trở nên rỗng, nó sẽ lấy giá trị đầu tiên trong queue để đưa tiếp vào stack.</p><img src="https://i.imgur.com/uyiScAI.png" width="200"><p><code>bar</code> được gọi, <code>&quot;Second&quot;</code> được log ra, và nó được đưa ra khỏi stack.</p></p></details><hr><h6 id="31-Gia-tri-cua-event-target-la-gi-khi-click-button"><a href="#31-Gia-tri-cua-event-target-la-gi-khi-click-button" class="headerlink" title="31. Giá trị của event.target là gì khi click button?"></a>31. Giá trị của event.target là gì khi click button?</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"console.log('first div')"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"console.log('second div')"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"console.log('button')"</span>&gt;</span></span><br><span class="line">      Click!</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>A: Outer <code>div</code></li><li>B: Inner <code>div</code></li><li>C: <code>button</code></li><li>D: Một mảng với toàn bộ các phần tử lồng nhau.</li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-10"><a href="#Dap-an-C-10" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Phần tử sâu nhất trong các phần tử lồng nhau sẽ là target của event. Bạn có thể ngăn việc đó lại bằng cách sử dụng <code>event.stopPropagation</code></p></p></details><hr><h6 id="32-Khi-ban-click-vao-doan-van-gia-tri-cua-output-se-la-gi"><a href="#32-Khi-ban-click-vao-doan-van-gia-tri-cua-output-se-la-gi" class="headerlink" title="32. Khi bạn click vào đoạn văn, giá trị của output sẽ là gì?"></a>32. Khi bạn click vào đoạn văn, giá trị của output sẽ là gì?</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"console.log('div')"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">onclick</span>=<span class="string">"console.log('p')"</span>&gt;</span></span><br><span class="line">    Click here!</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>A: <code>p</code> <code>div</code></li><li>B: <code>div</code> <code>p</code></li><li>C: <code>p</code></li><li>D: <code>div</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-10"><a href="#Dap-an-A-10" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p>Nếu ta click vào <code>p</code>, ta sẽ thấy hai log: <code>p</code> và <code>div</code>. Trong chuỗi event sẽ có 3 phases: capturing, target, và bubbling. Mặc định thì event handlers sẽ được thực hiện tại bubbling phase (trừ phi chúng ta khai báo <code>useCapture</code> là <code>true</code>). Chúng sẽ đi từ phần tử sâu nhất ra đến bên ngoài.</p></p></details><hr><h6 id="33-Output-la-gi"><a href="#33-Output-la-gi" class="headerlink" title="33. Output là gì?"></a>33. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">"Lydia"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> is <span class="subst">$&#123;age&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayHi.call(person, <span class="number">21</span>);</span><br><span class="line">sayHi.bind(person, <span class="number">21</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>undefined is 21</code> <code>Lydia is 21</code></li><li>B: <code>function</code> <code>function</code></li><li>C: <code>Lydia is 21</code> <code>Lydia is 21</code></li><li>D: <code>Lydia is 21</code> <code>function</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-D-3"><a href="#Dap-an-D-3" class="headerlink" title="Đáp án: D"></a>Đáp án: D</h4><p>Với cả hai, chúng ta có thể đưa vào object để sử dụng từ khóa <code>this</code>. Tuy nhiên, <code>.call</code> có nghĩa là <em>thực hiện ngay lập tức</em>!</p><p><code>.bind.</code> trả về một bản <em>copy</em> của function, với context kèm theo! Nó sẽ không thực hiện ngay lập tức.</p></p></details><hr><h6 id="34-Output-la-gi"><a href="#34-Output-la-gi" class="headerlink" title="34. Output là gì?"></a>34. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">(</span>) =&gt;</span> <span class="number">0</span>)();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> sayHi();</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;object&quot;</code></li><li>B: <code>&quot;number&quot;</code></li><li>C: <code>&quot;function&quot;</code></li><li>D: <code>&quot;undefined&quot;</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-7"><a href="#Dap-an-B-7" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p><code>sayHi</code> function trả về giá trị của một <em>hàm gọi ngay lập tức</em> (immediately invoked function - IIFE). Function này trả về <code>0</code>, kiểu dữ liệu <code>&quot;number&quot;</code>.</p><p>FYI: chỉ có 7 kiểu dữ liệu built-in: <code>null</code>, <code>undefined</code>, <code>boolean</code>, <code>number</code>, <code>string</code>, <code>object</code>, <code>symbol</code>, and <code>bigint</code>. <code>&quot;function&quot;</code> không phải là một kiểu, mà là objects, kiểu dữ liệu là <code>&quot;object&quot;</code>.</p></p></details><hr><h6 id="35-Gia-tri-nao-trong-cac-gia-tri-duoi-day-la-falsy"><a href="#35-Gia-tri-nao-trong-cac-gia-tri-duoi-day-la-falsy" class="headerlink" title="35. Giá trị nào trong các giá trị dưới đây là falsy?"></a>35. Giá trị nào trong các giá trị dưới đây là falsy?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>;</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">0</span>);</span><br><span class="line">(<span class="string">""</span>);</span><br><span class="line">(<span class="string">" "</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><ul><li>A: <code>0</code>, <code>&#39;&#39;</code>, <code>undefined</code></li><li>B: <code>0</code>, <code>new Number(0)</code>, <code>&#39;&#39;</code>, <code>new Boolean(false)</code>, <code>undefined</code></li><li>C: <code>0</code>, <code>&#39;&#39;</code>, <code>new Boolean(false)</code>, <code>undefined</code></li><li>D: Tất cả đều là falsy</li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-11"><a href="#Dap-an-A-11" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p>Chỉ có 6 giá trị <em>falsy</em>:</p><ul><li><code>undefined</code></li><li><code>null</code></li><li><code>NaN</code></li><li><code>0</code></li><li><code>&#39;&#39;</code> (chuỗi rỗng)</li><li><code>false</code></li></ul><p>Function constructors như <code>new Number</code> và <code>new Boolean</code> đều là <em>truthy</em>.</p></p></details><hr><h6 id="36-Output-la-gi"><a href="#36-Output-la-gi" class="headerlink" title="36. Output là gì?"></a>36. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="keyword">typeof</span> <span class="number">1</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;number&quot;</code></li><li>B: <code>&quot;string&quot;</code></li><li>C: <code>&quot;object&quot;</code></li><li>D: <code>&quot;undefined&quot;</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-8"><a href="#Dap-an-B-8" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p><code>typeof 1</code> trả về <code>&quot;number&quot;</code>.<br><code>typeof &quot;number&quot;</code> trả về <code>&quot;string&quot;</code></p></p></details><hr><h6 id="37-Output-la-gi"><a href="#37-Output-la-gi" class="headerlink" title="37. Output là gì?"></a>37. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">numbers[<span class="number">10</span>] = <span class="number">11</span>;</span><br><span class="line"><span class="built_in">console</span>.log(numbers);</span><br></pre></td></tr></table></figure><ul><li>A: <code>[1, 2, 3, 7 x null, 11]</code></li><li>B: <code>[1, 2, 3, 11]</code></li><li>C: <code>[1, 2, 3, 7 x empty, 11]</code></li><li>D: <code>SyntaxError</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-11"><a href="#Dap-an-C-11" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Mỗi khi chúng ta set một giá trị cho một phần tử trong mảng mà vượt quá độ dài của mảng, JavaScript sẽ tạo ra những “empty slots”. Chúng sẽ có giá trị là <code>undefined</code>, nhưng khi ghi ra thì chúng ta sẽ thấy dạng:</p><p><code>[1, 2, 3, 7 x empty, 11]</code></p><p>phụ thuộc vào nơi mà chúng ta chạy chúng (có thể khác nhau tùy môi trường browser, node, etc.)</p></p></details><hr><h6 id="38-Output-la-gi"><a href="#38-Output-la-gi" class="headerlink" title="38. Output là gì?"></a>38. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> x, y;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (x) &#123;</span><br><span class="line">    (x = <span class="number">1</span>), (y = <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">  <span class="built_in">console</span>.log(y);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><ul><li>A: <code>1</code> <code>undefined</code> <code>2</code></li><li>B: <code>undefined</code> <code>undefined</code> <code>undefined</code></li><li>C: <code>1</code> <code>1</code> <code>2</code></li><li>D: <code>1</code> <code>undefined</code> <code>undefined</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-12"><a href="#Dap-an-A-12" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p><code>catch</code> block nhận về giá trị <code>x</code>. Đây không phải là giá trị <code>x</code> mà ta khai báo với từ khóa <code>let</code> ở bên trên. Đây là biến <code>x</code> trong <em>block-scoped</em>.</p><p>Tiếp đó, chúng ta set giá trị của biến block-scoped này là <code>1</code>, và đồng thời cũng set giá trị cho biến <code>y</code>. Giờ đây chúng ta log ra giá trị của biến block-scoped variable <code>x</code>, bằng <code>1</code>.</p><p>Bên ngoài <code>catch</code> block, <code>x</code> vẫn là <code>undefined</code>, và <code>y</code> là <code>2</code>. Khi gọi <code>console.log(x)</code> bên ngoài <code>catch</code> block, nó sẽ trả về <code>undefined</code>, và <code>y</code> trả về <code>2</code>.</p></p></details><hr><h6 id="39-Moi-thu-trong-JavaScript-deu-la…"><a href="#39-Moi-thu-trong-JavaScript-deu-la…" class="headerlink" title="39. Mọi thứ trong JavaScript đều là…"></a>39. Mọi thứ trong JavaScript đều là…</h6><ul><li>A: primitives hoặc object</li><li>B: function hoặc object</li><li>C: hỏi mẹo khó đấy! chỉ <em>object</em> thôi</li><li>D: number hoặc object</li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-13"><a href="#Dap-an-A-13" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p>JavaScript chỉ có primitive types và objects.</p><p>Primitive types là <code>boolean</code>, <code>null</code>, <code>undefined</code>, <code>bigint</code>, <code>number</code>, <code>string</code>, and <code>symbol</code>.</p><p>Điểm khác nhau giữa primitive và object chính là primitives không có thuộc tính hay phương thức; tuy nhiên, chúng ta để ý rằng là <code>&#39;foo&#39;.toUpperCase()</code> sẽ trả về <code>&#39;FOO&#39;</code> mà không phải là một <code>TypeError</code>. Đó là bởi vì khi chúng ta truy cập các thuộc tính hay phương thức của một primitive như là string, JavaScript sẽ ngầm bao nó bởi một <code>wrapper class</code>, ví dụ <code>String</code>, và sau đó sẽ hủy việc bao đó ngay sau khi thực hiện xong. Mọi primitives ngoại trừ <code>null</code> và <code>undefine</code> đều hoạt động giống như vậy.</p></p></details><hr><h6 id="40-Output-la-gi"><a href="#40-Output-la-gi" class="headerlink" title="40. Output là gì?"></a>40. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>]].reduce(</span><br><span class="line">  (acc, cur) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> acc.concat(cur);</span><br><span class="line">  &#125;,</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>A: <code>[0, 1, 2, 3, 1, 2]</code></li><li>B: <code>[6, 1, 2]</code></li><li>C: <code>[1, 2, 0, 1, 2, 3]</code></li><li>D: <code>[1, 2, 6]</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-12"><a href="#Dap-an-C-12" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p><code>[1, 2]</code> là giá trị khởi tạo. Đây là giá trị chúng ta bắt đầu, và cũng là giá trị đầu tiên của <code>acc</code>. Tại vòng đầu tiên, <code>acc</code> là <code>[1,2]</code>, và <code>cur</code> là <code>[0, 1]</code>. Ta nối chúng lại tạo ra <code>[1, 2, 0, 1]</code>.</p><p>Tiếp tục, <code>[1, 2, 0, 1]</code> là <code>acc</code> và <code>[2, 3]</code> là <code>cur</code>. Ta nối chúng lại tạo ra <code>[1, 2, 0, 1, 2, 3]</code>.</p></p></details><hr><h6 id="41-Output-la-gi"><a href="#41-Output-la-gi" class="headerlink" title="41. Output là gì?"></a>41. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!!<span class="literal">null</span>;</span><br><span class="line">!!<span class="string">""</span>;</span><br><span class="line">!!<span class="number">1</span>;</span><br></pre></td></tr></table></figure><ul><li>A: <code>false</code> <code>true</code> <code>false</code></li><li>B: <code>false</code> <code>false</code> <code>true</code></li><li>C: <code>false</code> <code>true</code> <code>true</code></li><li>D: <code>true</code> <code>true</code> <code>false</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-9"><a href="#Dap-an-B-9" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p><code>null</code> là falsy. <code>!null</code> trả về <code>true</code>. <code>!true</code> trả về <code>false</code>.</p><p><code>&quot;&quot;</code> là falsy. <code>!&quot;&quot;</code> trả về <code>true</code>. <code>!true</code> trả về <code>false</code>.</p><p><code>1</code> là truthy. <code>!1</code> trả về <code>fase</code>. <code>!false</code> trả về <code>true</code>.</p></p></details><hr><h6 id="42-Ham-setInterval-tra-ve-cai-gi"><a href="#42-Ham-setInterval-tra-ve-cai-gi" class="headerlink" title="42. Hàm setInterval trả về cái gì?"></a>42. Hàm <code>setInterval</code> trả về cái gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setInterval(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Hi"</span>), <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><ul><li>A: một id duy nhất</li><li>B: số lượng milliseconds</li><li>C: function truyền vào</li><li>D: <code>undefined</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-14"><a href="#Dap-an-A-14" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p>Nó trả về một id duy nhất. Id này dùng để clear interval sau này với hàm <code>clearInterval()</code>.</p></p></details><hr><h6 id="43-Gia-tri-tra-ve-la-gi"><a href="#43-Gia-tri-tra-ve-la-gi" class="headerlink" title="43. Giá trị trả về là gì?"></a>43. Giá trị trả về là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[...<span class="string">"Lydia"</span>];</span><br></pre></td></tr></table></figure><ul><li>A: <code>[&quot;L&quot;, &quot;y&quot;, &quot;d&quot;, &quot;i&quot;, &quot;a&quot;]</code></li><li>B: <code>[&quot;Lydia&quot;]</code></li><li>C: <code>[[], &quot;Lydia&quot;]</code></li><li>D: <code>[[&quot;L&quot;, &quot;y&quot;, &quot;d&quot;, &quot;i&quot;, &quot;a&quot;]]</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-15"><a href="#Dap-an-A-15" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p>String là một <em>iterable</em>. Thế nên <em>spread operator</em> sẽ map toàn bộ các ký tự trong chuỗi lại thành một mảng.</p></p></details><hr><h6 id="44-Output-la-gi"><a href="#44-Output-la-gi" class="headerlink" title="44. Output là gì?"></a>44. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generator</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> i;</span><br><span class="line">  <span class="keyword">yield</span> i * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> gen = generator(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(gen.next().value);</span><br><span class="line"><span class="built_in">console</span>.log(gen.next().value);</span><br></pre></td></tr></table></figure><ul><li>A: <code>[0, 10], [10, 20]</code></li><li>B: <code>20, 20</code></li><li>C: <code>10, 20</code></li><li>D: <code>0, 10 and 10, 20</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-13"><a href="#Dap-an-C-13" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Một hàm bình thường không thể bị dừng giữa chừng khi được gọi. Tuy nhiên một <em>generator</em> thì khác, nó có thể “dừng lại” được, và sau đó nó sẽ tiếp tục từ vị trí nó dừng lại. Mỗi khi một <em>generator</em> gặp một từ khóa <code>yield</code>, nó sẽ sinh ra giá trị ngay phía sau nó. Chú ý là <em>generator</em> không <em>trả về</em> giá trị, nó <em>sinh ra</em> giá trị.</p><p>Đầu tiên, chúng ta khởi tạo generator với giá trị <code>i</code> là <code>10</code>. Generator được gọi bằng cách sử dụng phương thức <code>next()</code>. Khi lần đầu gọi thì <code>i</code> vẫn là <code>10</code>. Khi nó bắt gặp từ khóa <code>yield</code>: nó sẽ sinh ra giá trị <code>i</code>. Generator sẽ được “tạm dừng” tại đây, và ghi ra giá trị <code>10</code>.</p><p>Sau đó chung ta tiếp tục gọi generator bằng cách sử dụng tiếp phương thức <code>next()</code>. Nó sẽ bắt đầu từ vị trí nó tạm dừng lúc trước, khi <code>i</code> vẫn đang là <code>10</code>. Và khi nó bắt gặp từ khóa <code>yield</code>, nó sẽ sinh ra giá trị <code>i * 2</code>. <code>i</code> là <code>10</code>, nên nó sẽ sinh ra <code>10 * 2</code>, tức <code>20</code>. Vậy kết quả cuối cùng là <code>10, 20</code>.</p></p></details><hr><h6 id="45-Gia-tri-tra-ve-la-gi"><a href="#45-Gia-tri-tra-ve-la-gi" class="headerlink" title="45. Giá trị trả về là gì?"></a>45. Giá trị trả về là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> firstPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(res, <span class="number">500</span>, <span class="string">"one"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> secondPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(res, <span class="number">100</span>, <span class="string">"two"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.race([firstPromise, secondPromise]).then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res));</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;one&quot;</code></li><li>B: <code>&quot;two&quot;</code></li><li>C: <code>&quot;two&quot; &quot;one&quot;</code></li><li>D: <code>&quot;one&quot; &quot;two&quot;</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-10"><a href="#Dap-an-B-10" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p>Khi chúng ta đưa các promise vào trong một hàm <code>Promise.race</code>, nó sẽ chỉ resolves hay rejects promise <em>đầu tiên</em> được resolves/rejects. Với hàm <code>setTimeout</code>, chúng ta đưa vào một khoảng thời gian: 500 mili giây cho promise đầu tiên (<code>firstPromise</code>), và 100 mili giây cho promise thứ hai (<code>secondPromise</code>). Nó có nghĩa là <code>secondPromise</code> sẽ hoàn thành trước và trả về giá trị <code>&#39;two&#39;</code>. <code>res</code> khi này sẽ nhận giá trị <code>&#39;two&#39;</code> và được in ra console.</p></p></details><hr><h6 id="46-Output-la-gi"><a href="#46-Output-la-gi" class="headerlink" title="46. Output là gì?"></a>46. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123; <span class="attr">name</span>: <span class="string">"Lydia"</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> members = [person];</span><br><span class="line">person = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(members);</span><br></pre></td></tr></table></figure><ul><li>A: <code>null</code></li><li>B: <code>[null]</code></li><li>C: <code>[{}]</code></li><li>D: <code>[{ name: &quot;Lydia&quot; }]</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-D-4"><a href="#Dap-an-D-4" class="headerlink" title="Đáp án: D"></a>Đáp án: D</h4><p>Đầu tiên, chúng ta khai báo một biến <code>person</code> là một object có thuộc tính <code>name</code>.</p><img src="https://i.imgur.com/TML1MbS.png" width="200"><p>Sau đó chúng ta khai báo một biến <code>members</code>. Ta set giá trị đầu tiên của mảng là giá trị của biến <code>person</code>. Khi sử dụng gán bằng, object sẽ được <em>tham chiếu</em> tới object mà nó được gán. Khi ta gán tham chiếu từ một biến sang biến khác, ta tạo ra một bản sao của tham chiếu đó. (nên nhớ rằng đó vẫn là 2 tham chiếu hoàn toàn khác nhau!)</p><img src="https://i.imgur.com/FSG5K3F.png" width="300"><p>Sau đó ta set giá trị của <code>person</code> bằng <code>null</code>.</p><img src="https://i.imgur.com/sYjcsMT.png" width="300"><p>Chúng ta chỉ đơn thuần là thay đổi giá trị của biến <code>person</code> mà thôi, chứ không phải giá trị của phần tử đầu tiên ở trong mảng, vì chúng ta có một tham chiếu khác đến object đó. Phần tử đầu tiên của mảng <code>members</code> vẫn giữ tham chiêu đến object gốc. Do vậy, khi chúng ta in ra mảng <code>members</code>, phần tử đầu tiên sẽ vẫn in ra giá trị của objet gốc.</p></p></details><hr><h6 id="47-Output-la-gi"><a href="#47-Output-la-gi" class="headerlink" title="47. Output là gì?"></a>47. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">"Lydia"</span>,</span><br><span class="line">  age: <span class="number">21</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">in</span> person) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>{ name: &quot;Lydia&quot; }, { age: 21 }</code></li><li>B: <code>&quot;name&quot;, &quot;age&quot;</code></li><li>C: <code>&quot;Lydia&quot;, 21</code></li><li>D: <code>[&quot;name&quot;, &quot;Lydia&quot;], [&quot;age&quot;, 21]</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-11"><a href="#Dap-an-B-11" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p>Với vòng lặp <code>for-in</code> chúng ta sẽ lặp qua tất cả các <code>keys</code> của object, trong trường hợp này là <code>name</code> và <code>age</code>. Về cơ bản, object keys là string (nếu nó không phải là Symbol). Tại mỗi vòng lặp, giá trị của <code>item</code> chính là giá trị của key hiện tại trong vòng lặp. Đầu tiên, <code>item</code> là <code>name</code>, và được in ra. Vòng lặp sau, <code>item</code> là <code>age</code>, và được in ra.</p></p></details><hr><h6 id="48-Output-la-gi"><a href="#48-Output-la-gi" class="headerlink" title="48. Output là gì?"></a>48. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span> + <span class="number">4</span> + <span class="string">"5"</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;345&quot;</code></li><li>B: <code>&quot;75&quot;</code></li><li>C: <code>12</code></li><li>D: <code>&quot;12&quot;</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-12"><a href="#Dap-an-B-12" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p>Compiler sẽ đánh giá biểu thức dựa trên độ ưu tiên giữa các phép toán trong biểu thức đó, từ đó nó sẽ tính toán hoặc trái-sang-phải hoặc phải-qua-trái. Ở đây chúng ta chỉ có một phép toán mà thôi, phép cộng: <code>+</code>. Với phép cộng, tính toán sẽ là từ trái-qua-phải.</p><p>Giá trị <code>3 + 4</code> được tính toán trước. Kết quả là <code>7</code>.</p><p><code>7 + &#39;5&#39;</code> sẽ ra kết quả là <code>&quot;75&quot;</code> bởi xuất hiện ép kiểu tại đây. JavaScript sẽ convert <code>7</code> sang dạng string, bạn có thể xem thêm tại câu hỏi 15. Và sau đó 2 string sẽ được nối lại với nhau bởi phép toán cộng <code>+</code>. Kết quả <code>&quot;7&quot; + &quot;5&quot;</code> sẽ là <code>&quot;75&quot;</code>.</p></p></details><hr><h6 id="49-Gia-tri-cua-num-la-gi"><a href="#49-Gia-tri-cua-num-la-gi" class="headerlink" title="49. Giá trị của num là gì?"></a>49. Giá trị của <code>num</code> là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="built_in">parseInt</span>(<span class="string">"7*6"</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>42</code></li><li>B: <code>&quot;42&quot;</code></li><li>C: <code>7</code></li><li>D: <code>NaN</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-14"><a href="#Dap-an-C-14" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Chỉ có số đầu tiên trong chuỗi kí tự được trả về. Hệ cơ số là <em>hệ thập phân</em> (đối số thứ 2 trong hàm chính là cơ số: hệ thập phân, hệ 16, hệ 8, hệ nhị phân, vv.), Hàm <code>parseInt</code> sẽ kiểm tra xem các ký tự trong chuỗi có đảm bảo hợp lệ hay không. Một khi chúng tìm ra ký tự không phải là ký tự hợp lệ trong hệ cơ số, nó dừng lại và bỏ qua các ký tự phía sau.</p><p><code>*</code> không phải là một số. Vậy nên nó sẽ chỉ convert ký tự <code>&quot;7&quot;</code> sang hệ thập phân là <code>7</code>. <code>num</code> sẽ có giá trị là <code>7</code>.</p></p></details><hr><h6 id="50-Output-la-gi"><a href="#50-Output-la-gi" class="headerlink" title="50. Output là gì?"></a>50. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> num === <span class="string">"number"</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">return</span> num * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>A: <code>[]</code></li><li>B: <code>[null, null, null]</code></li><li>C: <code>[undefined, undefined, undefined]</code></li><li>D: <code>[ 3 x empty ]</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-15"><a href="#Dap-an-C-15" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Khi ta tiến hành <code>map</code> một mảng, giá trị của <code>num</code> sẽ chính là giá trị của phần tử hiện giờ trong vòng lặp. Trong trường hợp này, các phần tử đều là dạng số, tức là <code>typeof num === &quot;number&quot;</code> sẽ là <code>true</code>. Hàm <code>map</code> sẽ tạo ra một mảng mởi từ các giá trị của mảng ban đầu.</p><p>Tuy nhiên chúng ta không hề trả về giá trị nào cả. Khi đó, hàm số sẽ mặc định trả về <code>undefined</code>. Do đó qua mỗi vòng lặp, ta lại nhận được thêm một giá trị <code>undefined</code> nữa.</p></p></details><hr><h6 id="51-Output-la-gi"><a href="#51-Output-la-gi" class="headerlink" title="51. Output là gì?"></a>51. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">member, year</span>) </span>&#123;</span><br><span class="line">  member.name = <span class="string">"Lydia"</span>;</span><br><span class="line">  year = <span class="string">"1998"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">"Sarah"</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> birthYear = <span class="string">"1997"</span>;</span><br><span class="line"></span><br><span class="line">getInfo(person, birthYear);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person, birthYear);</span><br></pre></td></tr></table></figure><ul><li>A: <code>{ name: &quot;Lydia&quot; }, &quot;1997&quot;</code></li><li>B: <code>{ name: &quot;Sarah&quot; }, &quot;1998&quot;</code></li><li>C: <code>{ name: &quot;Lydia&quot; }, &quot;1998&quot;</code></li><li>D: <code>{ name: &quot;Sarah&quot; }, &quot;1997&quot;</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-16"><a href="#Dap-an-A-16" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p><code>Đối số</code> sẽ được đưa vào hàm dạng <em>tham trị</em>, trừ phi nó là object, khi đó nó sẽ được đưa vào hàm dạng <em>tham chiếu</em>. <code>birthYear</code> là dạng giá trị, vì nó là string chứ không phải object. Khi chúng ta đưa vào dạng giá trị, một bản sao của giá trị đó sẽ được tạo ra (xem thêm câu 46).</p><p><code>birthYear</code> trỏ đến giá trị là <code>&quot;1997&quot;</code>. Đối số <code>year</code> cũng sẽ rỏ đến giá trị <code>&quot;1997&quot;</code>, nhưng giá trị này chỉ là một bản sao của giá trị mà <code>birthYear</code> trỏ tới mà thôi, hai giá trị đó hoàn toàn khác nhau. Do đó khi ta thay đổi giá trị <code>year</code> bằng <code>&quot;1998&quot;</code>, chúng ta chỉ thay đổi giá trị của <code>year</code> mà thôi. <code>birthYear</code> sẽ vẫn giữ giá trị là <code>&quot;1997&quot;</code>.</p><p><code>person</code> là một object. Biến <code>member</code> có một tham chiếu tới cùng object mà <code>person</code> trỏ tới. Khi chúng ta thay đổi một thuộc tính của object mà <code>member</code> trỏ tới, giá trị của <code>person</code> cũng sẽ tự động thay đổi theo, vì chúng có chung tham chiếu. <code>name</code> của <code>person</code> khi này sẽ có giá trị mới là <code>&quot;Lydia&quot;</code>.</p></p></details><hr><h6 id="52-Output-la-gi"><a href="#52-Output-la-gi" class="headerlink" title="52. Output là gì?"></a>52. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeting</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">"Hello world!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = greeting();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"It worked!"</span>, data);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Oh no an error!"</span>, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayHi();</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;It worked! Hello world!&quot;</code></li><li>B: <code>&quot;Oh no an error: undefined</code></li><li>C: <code>SyntaxError: can only throw Error objects</code></li><li>D: <code>&quot;Oh no an error: Hello world!</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-D-5"><a href="#Dap-an-D-5" class="headerlink" title="Đáp án: D"></a>Đáp án: D</h4><p>Với lệnh <code>throw</code>, chúng ta có thể tạo ra các errors tùy ý. Với câu lệnh đó, chúng ta có thể throw các exception. Một <em>exeption</em> có thể là một <b>chuỗi</b>, một <b>số</b>, một <b>boolean</b> hoặc một <b>object</b>. Trong trường hợp này thì nó là chuỗi <code>&#39;Hello world&#39;</code>.</p><p>Với lệnh <code>catch</code> chúng ta có thể xử lý những exeption được throw ra khi thực hiện <code>try</code>. Một exeption đã được throw ra: chuỗi <code>&#39;Hello world&#39;</code>. <code>e</code> chính là chuỗi đó và chúng ta sẽ in ra. Kết quả là <code>&#39;Oh an error: Hello world&#39;</code>.</p></p></details><hr><h6 id="53-Output-la-gi"><a href="#53-Output-la-gi" class="headerlink" title="53. Output là gì?"></a>53. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.make = <span class="string">"Lamborghini"</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">make</span>: <span class="string">"Maserati"</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myCar = <span class="keyword">new</span> Car();</span><br><span class="line"><span class="built_in">console</span>.log(myCar.make);</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;Lamborghini&quot;</code></li><li>B: <code>&quot;Maserati&quot;</code></li><li>C: <code>ReferenceError</code></li><li>D: <code>TypeError</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-13"><a href="#Dap-an-B-13" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p>Khi chúng ta trả về một thuộc tính, giá trị của thuộc tính bằng với giá trị đã được trả về bởi lệnh <em>return</em>, chứ không phải giá trị được set trong constructor. Chúng ta trả về giá trị là <code>&quot;Maserati&quot;</code>, do đó <code>myCar.make</code> sẽ là <code>&quot;Maserati&quot;</code>.</p></p></details><hr><h6 id="54-Output-la-gi"><a href="#54-Output-la-gi" class="headerlink" title="54. Output là gì?"></a>54. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> x = (y = <span class="number">10</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> x);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> y);</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;undefined&quot;, &quot;number&quot;</code></li><li>B: <code>&quot;number&quot;, &quot;number&quot;</code></li><li>C: <code>&quot;object&quot;, &quot;number&quot;</code></li><li>D: <code>&quot;number&quot;, &quot;undefined&quot;</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-17"><a href="#Dap-an-A-17" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p><code>let x = y = 10;</code> chính là cách viết ngắn gọn của:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> x = y;</span><br></pre></td></tr></table></figure><p>Khi ta set <code>y</code> bằng <code>10</code>, thực tế chúng ta đã sử dụng biến global <code>y</code> (<code>window</code> nếu là trên browser, <code>global</code> nếu là môi trường Node).Trên browser, <code>window.y</code> sẽ là <code>10</code>.</p><p>Sau đó, chúng ta khai báo giá trị của <code>x</code> với giá trị của <code>y</code>, tức <code>10</code>. Tuy nhiên khi ta khai báo với từ khóa <code>let</code> biến x sẽ chỉ tồn tại trong <em>block scoped</em>; hay trong trường hợp này là <code>hàm thực hiện ngay lập tức</code> (immediately-invoked function - IIFE). Khi ta sử dụng phép toán <code>typeof</code>, <code>x</code> hoàn toàn chưa được định nghĩa: vì <code>x</code> lúc này nằm bên ngoài block nó được định nghĩa lúc trước. Nghĩa là <code>x</code> là <code>undefined</code>. Do đó <code>console.log(typeof x)</code> trả về <code>&quot;undefined&quot;</code>.</p><p>Tuy nhiên với <code>y</code> thì khác, ta đã có giá trị của <code>y</code> khi set <code>y</code> bằng <code>10</code>. Giá trị đó có thể truy cập được từ bất kì đâu bởi chúng là biến global. <code>y</code> được định nghĩa với kiểu là <code>&quot;number&quot;</code>. Do đó <code>console.log(typeof y)</code> trả về <code>&quot;number&quot;</code>.</p></p></details><hr><h6 id="55-Output-la-gi"><a href="#55-Output-la-gi" class="headerlink" title="55. Output là gì?"></a><a name=20190629></a>55. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Dog.prototype.bark = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Woof I am <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pet = <span class="keyword">new</span> Dog(<span class="string">"Mara"</span>);</span><br><span class="line"></span><br><span class="line">pet.bark();</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> Dog.prototype.bark;</span><br><span class="line"></span><br><span class="line">pet.bark();</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;Woof I am Mara&quot;</code>, <code>TypeError</code></li><li>B: <code>&quot;Woof I am Mara&quot;</code>,<code>&quot;Woof I am Mara&quot;</code></li><li>C: <code>&quot;Woof I am Mara&quot;</code>, <code>undefined</code></li><li>D: <code>TypeError</code>, <code>TypeError</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-18"><a href="#Dap-an-A-18" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p>Chúng ta có thể xóa các thuộc tính khỏe object bằng từ khóa <code>delete</code>, kể cả với prototype. Khi chúng ta xóa một thuộc tính trên prototype, nó sẽ bị vô hiệu hóa hoàn toàn trong chuỗi prototype. Trong trường hợp này, hàm <code>bark</code> sẽ bị vô hiệu hóa ngay sau khi chúng ta thực hiện hàm xóa <code>delete Dog.prototype.bark</code>, tất nhiên ta vẫn có thể truy cập vào nó nhưng giá trị sẽ là <code>undefined</code>.</p><p>Khi chúng ta chạy một thứ không phải là <code>hàm</code>, nó sẽ bắn ra một <code>TypeError</code>. Trong trường hợp này là <code>TypeError: pet.bark is not a function</code>, vì bản thân thuộc tính <code>pet.bark</code> là <code>undefined</code>.</p></p></details><hr><h6 id="56-Output-la-gi"><a href="#56-Output-la-gi" class="headerlink" title="56. Output là gì?"></a>56. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">set</span> = new Set([1, 1, 2, 3, 4]);</span><br><span class="line"></span><br><span class="line">console.log(<span class="keyword">set</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>[1, 1, 2, 3, 4]</code></li><li>B: <code>[1, 2, 3, 4]</code></li><li>C: <code>{1, 1, 2, 3, 4}</code></li><li>D: <code>{1, 2, 3, 4}</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-D-6"><a href="#Dap-an-D-6" class="headerlink" title="Đáp án: D"></a>Đáp án: D</h4><p><code>Set</code> là một tập hơp các giá trị <em>không trùng nhau</em>.</p><p>Chúng ta đưa đầu vào là một mảng <code>[1, 1, 2, 3, 4]</code> với giá trị <code>1</code> bị trùng. Giá trị trùng đó sẽ bị loại bỏ. Kết quả là <code>{1, 2, 3, 4}</code>.</p></p></details><hr><h6 id="57-Output-la-gi"><a href="#57-Output-la-gi" class="headerlink" title="57. Output là gì?"></a>57. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// counter.js</span></span><br><span class="line"><span class="keyword">let</span> counter = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> counter;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> myCounter <span class="keyword">from</span> <span class="string">"./counter"</span>;</span><br><span class="line"></span><br><span class="line">myCounter += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myCounter);</span><br></pre></td></tr></table></figure><ul><li>A: <code>10</code></li><li>B: <code>11</code></li><li>C: <code>Error</code></li><li>D: <code>NaN</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-16"><a href="#Dap-an-C-16" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Một module khi được import sẽ là <strong>read-only</strong>: chúng ta sẽ không thể chỉnh sửa module đó, chỉ có bản thân module đó có thể chỉnh sửa giá trị của nó mà thôi.</p><p>Khi ta thay đổi giá trị cuả <code>myCounter</code>, nó sẽ throw ra một lỗi: <code>myCounter</code> là <em>read-only</em> và không thể thay đổi.</p></p></details><hr><h6 id="58-Output-la-gi"><a href="#58-Output-la-gi" class="headerlink" title="58. Output là gì?"></a>58. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">"Lydia"</span>;</span><br><span class="line">age = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">delete</span> name);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">delete</span> age);</span><br></pre></td></tr></table></figure><ul><li>A: <code>false</code>, <code>true</code></li><li>B: <code>&quot;Lydia&quot;</code>, <code>21</code></li><li>C: <code>true</code>, <code>true</code></li><li>D: <code>undefined</code>, <code>undefined</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-19"><a href="#Dap-an-A-19" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p>Phép toán <code>delete</code> sẽ trả về một giá trị boolean: <code>true</code> nếu xóa thành công, <code>false</code> nếu thất bại. Tuy nhiên, nếu biến được khai báo với các từ khóa <code>var</code>, <code>const</code> hay <code>let</code> thì nó sẽ không thể bị xóa bởi phép toán <code>delete</code>.</p><p>Biến <code>name</code> được khai báo với từ khóa <code>const</code>, nên nó sẽ không thể bị xóa và trả về <code>false</code>. Khi ta set <code>age</code> bằng <code>21</code>, thực tế là ta đang sử dụng biến global <code>age</code>. Ta có thể xóa sử dụng phép toán <code>delete</code>, khi này <code>delete age</code> trả về <code>true</code>.</p></p></details><hr><h6 id="59-Output-la-gi"><a href="#59-Output-la-gi" class="headerlink" title="59. Output là gì?"></a>59. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> [y] = numbers;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(y);</span><br></pre></td></tr></table></figure><ul><li>A: <code>[[1, 2, 3, 4, 5]]</code></li><li>B: <code>[1, 2, 3, 4, 5]</code></li><li>C: <code>1</code></li><li>D: <code>[1]</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-17"><a href="#Dap-an-C-17" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Chúng ta có thể unpack các giá trị từ mảng hoặc thuộc tính từ objects bằng phương pháp <code>destructuring</code>. Ví dụ:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[a, b] = [<span class="number">1</span>, <span class="number">2</span>];</span><br></pre></td></tr></table></figure><img src="https://i.imgur.com/ADFpVop.png" width="200"><p>Giá trị của <code>a</code> sẽ là <code>1</code>, <code>b</code> sẽ là <code>2</code>. Thực tế, câu hỏi của chúng ta đơn giản là:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure><img src="https://i.imgur.com/NzGkMNk.png" width="200"><p>Có nghĩa là <code>y</code> chính là giá trị đầu tiên trong mảng, tức số <code>1</code>. Do đó khi ta in ra <code>y</code> thì sẽ là<code>1</code>.</p></p></details><hr><h6 id="60-Output-la-gi"><a href="#60-Output-la-gi" class="headerlink" title="60. Output là gì?"></a>60. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">"Lydia"</span>, <span class="attr">age</span>: <span class="number">21</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> admin = &#123; <span class="attr">admin</span>: <span class="literal">true</span>, ...user &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(admin);</span><br></pre></td></tr></table></figure><ul><li>A: <code>{ admin: true, user: { name: &quot;Lydia&quot;, age: 21 } }</code></li><li>B: <code>{ admin: true, name: &quot;Lydia&quot;, age: 21 }</code></li><li>C: <code>{ admin: true, user: [&quot;Lydia&quot;, 21] }</code></li><li>D: <code>{ admin: true }</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-14"><a href="#Dap-an-B-14" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p>Ta có thể kết hợp 2 object sử dụng phép toán <code>spread operator</code> <code>...</code>. Nó cho phép ta tạo ra bản sao của từng cặp key/values trong từng object và nối chúng lại với nhau thành một object mới. Trong trường hợp này chúng ta tạo ra các bản sao của các cặp key/value của object <code>user</code> object, và nối chúng vào object <code>admin</code>. <code>admin</code> object khi này sẽ trở thành <code>{ admin: true, name: &quot;Lydia&quot;, age: 21 }</code>.</p></p></details><hr><h6 id="61-Output-la-gi"><a href="#61-Output-la-gi" class="headerlink" title="61. Output là gì?"></a>61. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">"Lydia"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">"age"</span>, &#123; <span class="attr">value</span>: <span class="number">21</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(person));</span><br></pre></td></tr></table></figure><ul><li>A: <code>{ name: &quot;Lydia&quot;, age: 21 }</code>, <code>[&quot;name&quot;, &quot;age&quot;]</code></li><li>B: <code>{ name: &quot;Lydia&quot;, age: 21 }</code>, <code>[&quot;name&quot;]</code></li><li>C: <code>{ name: &quot;Lydia&quot;}</code>, <code>[&quot;name&quot;, &quot;age&quot;]</code></li><li>D: <code>{ name: &quot;Lydia&quot;}</code>, <code>[&quot;age&quot;]</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-15"><a href="#Dap-an-B-15" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p>Với phương thức <code>defineProperty</code>, chúng ta có thể thêm các thuộc tính mới, cũng như sửa các thuộc tính sẵn có của object. Khi chúng ta thêm thuộc tính vào object bằng <code>defineProperty</code>, chúng sẽ mặc định là thuộc tính <em>not enumerable</em>. Phương thức <code>Object.keys</code> sẽ trả về tất cả các thuộc tính <em>enumerable</em> của object, trong trường hợp này thì chỉ có <code>&quot;name&quot;</code> mà thôi.</p><p>Thêm nữa, các thuộc tính được thêm bởi <code>defineProperty</code> là mặc định không thể thay đổi được. Tất nhiên ta có thể override các điều đó bằng các thuộc tính như <code>writable</code>, <code>configurable</code> và <code>enumerable</code>. Tức là <code>defineProperty</code> là một cách rất mềm dẻo để tạo ra và điều chỉnh thuộc tính của object.</p></p></details><hr><h6 id="62-Output-la-gi"><a href="#62-Output-la-gi" class="headerlink" title="62. Output là gì?"></a>62. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> settings = &#123;</span><br><span class="line">  username: <span class="string">"lydiahallie"</span>,</span><br><span class="line">  level: <span class="number">19</span>,</span><br><span class="line">  health: <span class="number">90</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = <span class="built_in">JSON</span>.stringify(settings, [<span class="string">"level"</span>, <span class="string">"health"</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;{&quot;level&quot;:19, &quot;health&quot;:90}&quot;</code></li><li>B: <code>&quot;{&quot;username&quot;: &quot;lydiahallie&quot;}&quot;</code></li><li>C: <code>&quot;[&quot;level&quot;, &quot;health&quot;]&quot;</code></li><li>D: <code>&quot;{&quot;username&quot;: &quot;lydiahallie&quot;, &quot;level&quot;:19, &quot;health&quot;:90}&quot;</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-20"><a href="#Dap-an-A-20" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p>Đối số thứ hai của <code>JSON.stringify</code> là <em>replacer</em>. Replacer Có thể là một hàm hoặc một mảng, nó sẽ quy định xem giá trị nào sẽ được chuỗi hóa ra sao.</p><p>Nếu replacer là một <em>mảng</em>, chỉ có các thuộc tính có tên trong mảng được convert thành chuỗi JSON. Trong trường hợp này, chỉ có các thuộc tính <code>&quot;level&quot;</code> và <code>&quot;health&quot;</code> được đưa vào, <code>&quot;username&quot;</code> bị loại bỏ. <code>data</code> giờ sẽ là <code>&quot;{&quot;level&quot;:19, &quot;health&quot;:90}&quot;</code>.</p><p>Nếu replacer là <em>function</em>, hàm này sẽ được gọi trên từng thuộc tính của object được chuỗi hóa. Giá trị trả về sẽ là giá trị được đưa vào chuỗi JSON. Nếu trả về <code>undefined</code>, thuộc tính này sẽ bị loại bỏ khỏi chuỗi.</p></p></details><hr><h6 id="63-Output-la-gi"><a href="#63-Output-la-gi" class="headerlink" title="63. Output là gì?"></a>63. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> increaseNumber = <span class="function"><span class="params">()</span> =&gt;</span> num++;</span><br><span class="line"><span class="keyword">const</span> increasePassedNumber = <span class="function"><span class="params">number</span> =&gt;</span> number++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> num1 = increaseNumber();</span><br><span class="line"><span class="keyword">const</span> num2 = increasePassedNumber(num1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num1);</span><br><span class="line"><span class="built_in">console</span>.log(num2);</span><br></pre></td></tr></table></figure><ul><li>A: <code>10</code>, <code>10</code></li><li>B: <code>10</code>, <code>11</code></li><li>C: <code>11</code>, <code>11</code></li><li>D: <code>11</code>, <code>12</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-21"><a href="#Dap-an-A-21" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p>Phép toán <code>++</code> sẽ <em>trả về trước</em> giá trị của toán hạng, <em>sau đó tăng</em> giá trị của toán hạng lên. Giá trị của <code>num1</code> là <code>10</code>, vì <code>increaseNumber</code> sẽ trả về giá trị của <code>num</code>, đang là <code>10</code>, và sau đó mới tăng giá trị của <code>num</code> lên.</p><p><code>num2</code> cũng là <code>10</code>, vì chúng ta đưa <code>num1</code> vào <code>increasePassedNumber</code>. <code>number</code> bằng <code>10</code>(tức giá trị của <code>num1</code>). Cũng giống như trên, phép toán <code>++</code> sẽ <em>trả về trước</em> giá trị của toán hạng, <em>sau đó tăng</em> giá trị của toán hạng lên. Giá trị của <code>number</code> là <code>10</code>, do đó <code>num2</code> cũng sẽ là <code>10</code>.</p></p></details><hr><h6 id="64-Output-la-gi"><a href="#64-Output-la-gi" class="headerlink" title="64. Output là gì?"></a>64. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> value = &#123; <span class="attr">number</span>: <span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> multiply = <span class="function">(<span class="params">x = &#123; ...value &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log((x.number *= <span class="number">2</span>));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">multiply();</span><br><span class="line">multiply();</span><br><span class="line">multiply(value);</span><br><span class="line">multiply(value);</span><br></pre></td></tr></table></figure><ul><li>A: <code>20</code>, <code>40</code>, <code>80</code>, <code>160</code></li><li>B: <code>20</code>, <code>40</code>, <code>20</code>, <code>40</code></li><li>C: <code>20</code>, <code>20</code>, <code>20</code>, <code>40</code></li><li>D: <code>NaN</code>, <code>NaN</code>, <code>20</code>, <code>40</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-18"><a href="#Dap-an-C-18" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Trong ES6 thì chúng ta có thể khởi tạo tham số với giá trị mặc định. Giá trị của tham số sẽ là giá trị mặc định nếu ta không truyền gì vào hàm, hoặc khi giá trị truyền vào là <code>&quot;undefined&quot;</code>. Trong trường hợp này, ta dùng <code>spread operator</code> (toán tử mở rộng) để biến <code>value</code> thành một object mới, do đó <code>x</code> sẽ có giá trị mặc định là <code>{ number: 10 }</code>.</p><p>Chú ý một điều là đối số sẽ được xét giá trị tại <em>call time</em>! Có nghĩa là mỗi khi chúng ta gọi hàm, một <em>object mới</em> sẽ được tạo ra. Chúng ta gọi hàm <code>multiply</code> hai lần mà không truyền vào đối số nào cả: <code>x</code> sẽ nhận giá trị mặc định <code>{ number: 10 }</code>. Sau đó chúng ta sẽ ghi ra giá trị là <code>20</code>.</p><p>Lần gọi thứ ba chúng ta truyền vào một đối số: chính là <code>value</code>. Toán tử <code>*=</code> chính là cách viết gọn của <code>x.number = x.number * 2</code>: chúng ta thay đổi giá trị của <code>x.number</code>, và ghi ra giá trị <code>20</code>. </p><p>Tại lần gọi thứ tư, chúng ta truyền vào <code>value</code> một lần nữa. <code>x.number</code> trước đó đã bị thay đổi thành <code>20</code>, nên <code>x.number *= 2</code> sẽ ghi ra <code>40</code>. </p></p></details><hr><h6 id="65-Output-la-gi"><a href="#65-Output-la-gi" class="headerlink" title="65. Output là gì?"></a>65. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].reduce(<span class="function">(<span class="params">x, y</span>) =&gt;</span> <span class="built_in">console</span>.log(x, y));</span><br></pre></td></tr></table></figure><ul><li>A: <code>1</code> <code>2</code> and <code>3</code> <code>3</code> and <code>6</code> <code>4</code></li><li>B: <code>1</code> <code>2</code> and <code>2</code> <code>3</code> and <code>3</code> <code>4</code></li><li>C: <code>1</code> <code>undefined</code> and <code>2</code> <code>undefined</code> and <code>3</code> <code>undefined</code> and <code>4</code> <code>undefined</code></li><li>D: <code>1</code> <code>2</code> and <code>undefined</code> <code>3</code> and <code>undefined</code> <code>4</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-D-7"><a href="#Dap-an-D-7" class="headerlink" title="Đáp án: D"></a>Đáp án: D</h4><p>Đối số đầu tiên của hàm <code>reduce</code> chính là <em>accumulator</em> (tổng tích lũy), trong trường hợp này là <code>x</code>. Đối số thứ 2 chính là <em>giá trị hiện tại</em>, tức <code>y</code>. Với hàm reduce, ta sẽ gọi callback trên mỗi phần tử của mảng, cứ vậy cho tới khi ra đến một giá trị cuối cùng. </p><p>Trong trường hợp này, chúng ta không trả về bất cứ giá trị nào cả, mà đơn thuần chỉ là ghi ra giá trị của <em>tổng tích lũy</em> và <em>giá trị hiện tại</em> mà thôi.</p><p>Giá trị của tổng tích lũy chính là giá trị được hàm callback trả về tại vòng lặp trước đó. Nếu ta không đặt giá trị khởi tạo cho đối số trong hàm <code>reduce</code>, thì tổng tích lũy sẽ chính bằng giá trị đầu tiên tại lời gọi đầu tiên.</p><p>Trong lời gọi đầu tiên, tổng tích lũy (<code>x</code>) là <code>1</code>, và giá trị hiện tại (<code>y</code>) là <code>2</code>. Chúng ta không trả về giá trị cho hàm callback, mà đơn thuần chỉ ghi chúng ta, vậy nên <code>1</code> và <code>2</code> được ghi ra.  </p><p>Nếu ta không trả về giá trị trong một function, thì nó sẽ mặc định trả về là <code>undefined</code>. Do đó trong lời gọi tiếp theo tổng tích lũy sẽ là <code>undefined</code>, và giá trị hiện tại là <code>3</code>. <code>undefined</code> và <code>3</code> sẽ được ghi ra. </p><p>Tiếp tục như vậy, trong lời gọi thứ tư thì tổng tích lũy sẽ vẫn là <code>undefined</code>, giá trị hiện tại là <code>4</code>. <code>undefined</code> và <code>4</code> sẽ được ghi ra.</p></p></details><hr><h6 id="66-Voi-cach-nao-chung-ta-co-the-ke-thua-Dog-class"><a href="#66-Voi-cach-nao-chung-ta-co-the-ke-thua-Dog-class" class="headerlink" title="66. Với cách nào chúng ta có thể kế thừa Dog class?"></a>66. Với cách nào chúng ta có thể kế thừa <code>Dog</code> class?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Labrador</span> <span class="keyword">extends</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 1 </span></span><br><span class="line">  <span class="keyword">constructor</span>(name, size) &#123;</span><br><span class="line">    <span class="keyword">this</span>.size = size;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2</span></span><br><span class="line">  <span class="keyword">constructor</span>(name, size) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">    <span class="keyword">this</span>.size = size;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 3</span></span><br><span class="line">  <span class="keyword">constructor</span>(size) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">    <span class="keyword">this</span>.size = size;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 4 </span></span><br><span class="line">  <span class="keyword">constructor</span>(name, size) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.size = size;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>A: 1</li><li>B: 2</li><li>C: 3</li><li>D: 4</li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-16"><a href="#Dap-an-B-16" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p>Trong class dẫn xuất, ta không thể truy cập từ khóa <code>this</code> trước khi gọi <code>super</code>. Nếu bạn chạy thử, nó sẽ throw ra một <code>ReferenceError</code>, do đó 1 và 4 sẽ throw ra reference error.</p><p>Với việc gọi <code>super</code>, chúng ta đã gọi hàm constructor của class cha với tham số truyền vào. Trong trường hợp này, class cha nhận <code>name</code> làm đối số trong constructor, do đó chúng cần đưa <code>name</code> vào hàm <code>super</code>. </p><p><code>Labrador</code> class nhận vào hai đối số, <code>name</code> vì nó kế thừa <code>Dog</code>, và <code>size</code> - một thuộc tính của <code>Labrador</code> class. Cả hai đều cần thiết để đưa vào trong constructor của class <code>Labrador</code>, do đó cách khởi tạo đúng là 2.</p></p></details><hr><h6 id="67-Output-la-gi"><a href="#67-Output-la-gi" class="headerlink" title="67. Output là gì?"></a>67. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'running index.js'</span>);</span><br><span class="line"><span class="keyword">import</span> &#123; sum &#125; <span class="keyword">from</span> <span class="string">'./sum.js'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// sum.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'running sum.js'</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> sum = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br></pre></td></tr></table></figure><ul><li>A: <code>running index.js</code>, <code>running sum.js</code>, <code>3</code></li><li>B: <code>running sum.js</code>, <code>running index.js</code>, <code>3</code></li><li>C: <code>running sum.js</code>, <code>3</code>, <code>running index.js</code></li><li>D: <code>running index.js</code>, <code>undefined</code>, <code>running sum.js</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-17"><a href="#Dap-an-B-17" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p>Với <code>import</code>, tất cả các module import vào đều sẽ được <em>pre-parsed</em> (đánh giá trước). Có nghĩa là những module được import vào sẽ được <em>chạy trước</em>, còn code trong file sẽ <em>chạy sau</em>.</p><p>Đó chính là điều khác biệt giữa <code>require()</code> trong CommonJS và <code>import</code>! Với <code>require()</code>, ta có thể load các dependencies tại bất cứ khi nào ta cần. Nếu ta sử dụng <code>require</code> thay thế cho <code>import</code> thì <code>running index.js</code>, <code>running sum.js</code>, <code>3</code> sẽ được ghi ra. </p></p></details><hr><h6 id="68-Output-la-gi"><a href="#68-Output-la-gi" class="headerlink" title="68. Output là gì?"></a>68. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="number">2</span>) === <span class="built_in">Number</span>(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">false</span>) === <span class="built_in">Boolean</span>(<span class="literal">false</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>(<span class="string">'foo'</span>) === <span class="built_in">Symbol</span>(<span class="string">'foo'</span>))****</span><br></pre></td></tr></table></figure><ul><li>A: <code>true</code>, <code>true</code>, <code>false</code></li><li>B: <code>false</code>, <code>true</code>, <code>false</code></li><li>C: <code>true</code>, <code>false</code>, <code>true</code></li><li>D: <code>true</code>, <code>true</code>, <code>true</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-22"><a href="#Dap-an-A-22" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p>Mỗi Symbol là một thứ hoàn toàn khác biệt. Giá trị truyền vào làm đối số trong Symbol chỉ đơn thuần là phần giải thích cho Symbol đó mà thôi, và nó không liên quan gì tới giá trị của Symbol đó cả. Chúng ta kiểm tra tính bằng nhau của hai Symbol hoàn toàn khác biệt: <code>Symbol(&#39;foo&#39;)</code> thứ nhất, và <code>Symbol(&#39;foo&#39;)</code> thứ hai. Mỗi giá trị đều là riêng biệt và duy nhất, nên <code>Symbol(&#39;foo&#39;) === Symbol(&#39;foo&#39;)</code> sẽ trả về <code>false</code>. </p></p></details><hr><h6 id="69-Output-la-gi"><a href="#69-Output-la-gi" class="headerlink" title="69. Output là gì?"></a>69. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">"Lydia Hallie"</span></span><br><span class="line"><span class="built_in">console</span>.log(name.padStart(<span class="number">13</span>))</span><br><span class="line"><span class="built_in">console</span>.log(name.padStart(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;Lydia Hallie&quot;</code>, <code>&quot;Lydia Hallie&quot;</code></li><li>B: <code>&quot;           Lydia Hallie&quot;</code>, <code>&quot;  Lydia Hallie&quot;</code> (<code>&quot;[13x whitespace]Lydia Hallie&quot;</code>, <code>&quot;[2x whitespace]Lydia Hallie&quot;</code>)</li><li>C: <code>&quot; Lydia Hallie&quot;</code>, <code>&quot;Lydia Hallie&quot;</code> (<code>&quot;[1x whitespace]Lydia Hallie&quot;</code>, <code>&quot;Lydia Hallie&quot;</code>)</li><li>D: <code>&quot;Lydia Hallie&quot;</code>, <code>&quot;Lyd&quot;</code>, </li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-19"><a href="#Dap-an-C-19" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Với hàm <code>padStart</code> chúng ta có thể thêm vào khoảng trắng đằng trước mỗi chuỗi. Giá trị đưa vào trong hàm là <em>tổng độ dài</em> của chuỗi sau khi thêm vào khoảng trắng. Chuỗi <code>&quot;Lydia Hallie&quot;</code> có độ dài là <code>12</code> nên <code>name.padStart(13)</code> sẽ thêm vào một khoảng trắng đằng trước chuỗi.</p><p>Nếu đối số truyền vào cho hàm <code>padStart</code> nhỏ hơn độ dài của chuỗi, không có khoảng trắng nào được thêm vào.</p></p></details><hr><h6 id="70-Output-la-gi"><a href="#70-Output-la-gi" class="headerlink" title="70. Output là gì?"></a>70. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"🥑"</span> + <span class="string">"💻"</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;🥑💻&quot;</code></li><li>B: <code>257548</code></li><li>C: A string containing their code points</li><li>D: Error</li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-23"><a href="#Dap-an-A-23" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p>Với phép toán <code>+</code>, ta có thể nối các xâu chuỗi. Trong trường hợp này, ta nối chuỗi <code>&quot;🥑&quot;</code> với chuỗi <code>&quot;💻&quot;</code>, kết quả tạo ra <code>&quot;🥑💻&quot;</code>.</p></p></details><hr><h6 id="71-Lam-the-nao-co-the-ghi-ra-gia-tri-giong-nhu-trong-comment-khi-console-log"><a href="#71-Lam-the-nao-co-the-ghi-ra-gia-tri-giong-nhu-trong-comment-khi-console-log" class="headerlink" title="71. Làm thế nào có thể ghi ra giá trị giống như trong comment khi console.log?"></a>71. Làm thế nào có thể ghi ra giá trị giống như trong comment khi console.log?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">startGame</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> answer = <span class="keyword">yield</span> <span class="string">"Do you love JavaScript?"</span>;</span><br><span class="line">  <span class="keyword">if</span> (answer !== <span class="string">"Yes"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Oh wow... Guess we're gone here"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"JavaScript loves you back ❤️"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> game = startGame();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="comment">/* 1 */</span>); <span class="comment">// Do you love JavaScript?</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="comment">/* 2 */</span>); <span class="comment">// JavaScript loves you back ❤️</span></span><br></pre></td></tr></table></figure><ul><li>A: <code>game.next(&quot;Yes&quot;).value</code> and <code>game.next().value</code></li><li>B: <code>game.next.value(&quot;Yes&quot;)</code> and <code>game.next.value()</code></li><li>C: <code>game.next().value</code> and <code>game.next(&quot;Yes&quot;).value</code></li><li>D: <code>game.next.value()</code> and <code>game.next.value(&quot;Yes&quot;)</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-20"><a href="#Dap-an-C-20" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Một <em>generator</em> sẽ “tạm dừng” khi nhìn thấy từ khóa <code>yield</code>. Đầu tiên ra sẽ đưa ra chuỗi “Do you love JavaScript?”, bằng cách gọi <code>game.next().value</code>.</p><p>Chương trình sẽ chạy từng dòng, cho tới khi nó tìm thấy từ khóa <code>yield</code>. Có một từ khóa <code>yield</code> tại dòng đầu tiên của hàm: chương trình sẽ dừng tại đâ! <em>Điều đó có nghĩa là biến <code>answer</code> chưa hề được định nghĩa!</em></p><p>Khi ta gọi <code>game.next(&quot;Yes&quot;).value</code>, <code>yield</code> trước đó sẽ được thay thế bởi giá trị được truyền vào hàm <code>next()</code>, trong trường hợp này là<code>&quot;Yes&quot;</code>. Theo đó giá trị của biến <code>answer</code> giờ sẽ là <code>&quot;Yes&quot;</code>. Điều kiện if sẽ trả về <code>false</code>, và <code>JavaScript loves you back ❤️</code> sẽ được ghi ra.</p></p></details><hr><hr><h6 id="72-Output-la-gi"><a href="#72-Output-la-gi" class="headerlink" title="72. Output là gì?"></a>72. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.raw<span class="string">`Hello\nworld`</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>Hello world!</code></li><li>B: <code>Hello</code> <br />&nbsp; &nbsp; &nbsp;<code>world</code></li><li>C: <code>Hello\nworld</code></li><li>D: <code>Hello\n</code> <br /> &nbsp; &nbsp; &nbsp;<code>world</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-21"><a href="#Dap-an-C-21" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p><code>String.raw</code> trả về chuỗi nguyên bản, các ký tự (<code>\n</code>, <code>\v</code>, <code>\t</code> etc.) sẽ vẫn là nguyên bản và không biến thành xuống dòng hay khoảng trắng! Nếu ta không để là chuỗi nguyên bản, sẽ có trường hợp xảy ra lỗi không mong muốn, ví dụ với đường dẫn:</p><p><code>const path = `C:\Documents\Projects\table.html`</code></p><p>Sẽ cho ta chuỗi là:</p><p><code>&quot;C:DocumentsProjects able.html&quot;</code></p><p>Với <code>String.raw</code>, nó sẽ trả về là:</p><p><code>C:\Documents\Projects\table.html</code></p><p>Do đó, trong trường hợp này <code>Hello\nworld</code> sẽ được ghi ra.</p></p></details><hr><h6 id="73-Output-la-gi"><a href="#73-Output-la-gi" class="headerlink" title="73. Output là gì?"></a>73. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="built_in">Promise</span>.resolve(<span class="string">"I made it!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = getData();</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;I made it!&quot;</code></li><li>B: <code>Promise {&lt;resolved&gt;: &quot;I made it!&quot;}</code></li><li>C: <code>Promise {&lt;pending&gt;}</code></li><li>D: <code>undefined</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-22"><a href="#Dap-an-C-22" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Một hàm <code>async</code> luôn luôn trả về một <code>promise</code>. <code>await</code> sẽ chờ cho tới khi promise đó được hoàn thành: một pending promise sẽ được trả về khi ta gọi <code>getData()</code> bằng cách gán nó cho biến <code>data</code>.</p><p>Nếu ta muốn truy cập giá trị đã hoàn thành của promise, trong trường hợp này là <code>&quot;I made it&quot;</code>, ta có thể sử dụng hàm <code>.then()</code> ngay sau <code>data</code> như sau:</p><p><code>data.then(res =&gt; console.log(res))</code></p><p>Khi này nó sẽ ghi ra <code>&quot;I made it!&quot;</code></p></p></details><hr><h6 id="74-Output-la-gi"><a href="#74-Output-la-gi" class="headerlink" title="74. Output là gì?"></a>74. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addToList</span>(<span class="params">item, list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> list.push(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = addToList(<span class="string">"apple"</span>, [<span class="string">"banana"</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><ul><li>A: <code>[&#39;apple&#39;, &#39;banana&#39;]</code></li><li>B: <code>2</code></li><li>C: <code>true</code></li><li>D: <code>undefined</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-18"><a href="#Dap-an-B-18" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p>Hàm <code>.push()</code> trả về <em>độ dài</em> của mảng mới! Trước đó, mảng chỉ hồm một phần tử là <code>&quot;banana&quot;</code> và có độ dài là <code>1</code>. Sau khi thêm chuỗi <code>&quot;apple&quot;</code> vào mảng, mảng lúc này có hai chuỗi và có độ dài là <code>2</code>. Do đó hàm <code>addToList</code> sẽ trả về 2.</p><p>Hàm <code>push</code> sẽ thay đổi chính bản thân mảng truyền vào. Do đó nếu chúng ta muốn trả về <em>mảng</em> thay vì chỉ trả về <em>độ dài</em>, chúng ta nên trả về trực tiếp mảng <code>list</code> sau khi đã thêm <code>item</code> vào đó.</p></p></details><hr><h6 id="75-Output-la-gi"><a href="#75-Output-la-gi" class="headerlink" title="75. Output là gì?"></a>75. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> box = &#123; <span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">20</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.freeze(box);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> shape = box;</span><br><span class="line">shape.x = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(shape);</span><br></pre></td></tr></table></figure><ul><li>A: <code>{ x: 100, y: 20 }</code></li><li>B: <code>{ x: 10, y: 20 }</code></li><li>C: <code>{ x: 100 }</code></li><li>D: <code>ReferenceError</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-19"><a href="#Dap-an-B-19" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p><code>Object.freeze</code> khiến cho chúng ta không thể thêm vào, xóa đi hay thay đổi bất kì thuộc tính nào của object (trừ phi giá trị của thuộc tính lại chính là một object khác).</p><p>Khi chúng ta tạo ra biến <code>shape</code> và set cho nó giá trị bằng với một object đã được đóng băng là <code>box</code>, thì <code>shape</code> cũng sẽ trỏ tới một object đã được đóng băng. Ta có thể check một object có đang bị đóng băng hay không bằng <code>Object.isFrozen</code>. Trong trường hợp này, <code>Object.isFrozen(shape)</code> trả về true, vì <code>shape</code> đang trỏ tới một object bị đóng băng.</p><p>Do đó, cộng với việc <code>x</code> không phải là object, ta sẽ không thể thay đổi giá trị của <code>x</code>. <code>x</code> sẽ vẫn là <code>10</code>, và <code>{ x: 10, y: 20 }</code> được ghi ra.</p></p></details><hr><h6 id="76-Output-la-gi"><a href="#76-Output-la-gi" class="headerlink" title="76. Output là gì?"></a>76. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="attr">name</span>: myName &#125; = &#123; <span class="attr">name</span>: <span class="string">"Lydia"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;Lydia&quot;</code></li><li>B: <code>&quot;myName&quot;</code></li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-D-8"><a href="#Dap-an-D-8" class="headerlink" title="Đáp án: D"></a>Đáp án: D</h4><p>Khi ta tiến hành unpack giá trị <code>name</code> từ object ở phía bên phải, ta đã gán giá trị <code>&quot;Lydia&quot;</code> của nó cho biến có tên là <code>myName</code>.</p><p>Với cú pháp <code>{ name: myName }</code>, chúng ta muốn khai báo một biến <code>myName</code> với giá trị là giá trị của thuộc tính <code>name</code> trong object phía bên phải.</p><p>Do <code>name</code> chưa được định nghĩa, nên ghi log ra, nó sẽ throw ra một ReferenceError.</p></p></details><hr><h6 id="77-Day-co-phai-la-mot-pure-function-khong"><a href="#77-Day-co-phai-la-mot-pure-function-khong" class="headerlink" title="77. Đây có phải là một pure function không?"></a>77. Đây có phải là một pure function không?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: Yes</li><li>B: No</li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-24"><a href="#Dap-an-A-24" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p>Một hàm được gọi là <em>pure function</em> khi nó luôn luôn trả về một giá trị giống nhau, nếu đối số đưa vào là giống nhau.</p><p>Hàm <code>sum</code> luôn trả về giá trị giống nhau. Nếu ta đưa vào <code>1</code> và <code>2</code>, nó sẽ <em>luôn</em> trả về <code>3</code>. Nếu ta đưa vào <code>5</code> và <code>10</code>, nó <em>luôn</em> trả về <code>15</code>. Cứ như vậy, đây là một <em>pure function</em>.</p></p></details><hr><h6 id="78-Output-la-gi"><a href="#78-Output-la-gi" class="headerlink" title="78. Output là gì?"></a>78. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> cache = &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (num <span class="keyword">in</span> cache) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`From cache! <span class="subst">$&#123;cache[num]&#125;</span>`</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> result = num + <span class="number">10</span>;</span><br><span class="line">      cache[num] = result;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`Calculated! <span class="subst">$&#123;result&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> addFunction = add();</span><br><span class="line"><span class="built_in">console</span>.log(addFunction(<span class="number">10</span>));</span><br><span class="line"><span class="built_in">console</span>.log(addFunction(<span class="number">10</span>));</span><br><span class="line"><span class="built_in">console</span>.log(addFunction(<span class="number">5</span> * <span class="number">2</span>));</span><br></pre></td></tr></table></figure><ul><li>A: <code>Calculated! 20</code> <code>Calculated! 20</code> <code>Calculated! 20</code></li><li>B: <code>Calculated! 20</code> <code>From cache! 20</code> <code>Calculated! 20</code></li><li>C: <code>Calculated! 20</code> <code>From cache! 20</code> <code>From cache! 20</code></li><li>D: <code>Calculated! 20</code> <code>From cache! 20</code> <code>Error</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-23"><a href="#Dap-an-C-23" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Hàm <code>add</code> chính là một hàm <em>memoized</em> (hàm có nhớ). Với việc có nhớ, chúng ta có thể cache lại kết quả của function để tăng tốc độ tính toán lên. Trong trường hợp này, chúng ta tạo ra một <code>cache</code> object để lưu trữ những kết quả tính toán trước đó.</p><p>Mỗi lần chúng ta gọi hàm <code>addFunction</code> với đối số giống nhau, đầu tiên nó sẽ check xem đối số đó có tồn tại trong cache hay không. Nếu có, giá trị trong cache sẽ được trả về luôn, tiết kiệm thời gian tính toán. Còn nếu không thì nó sẽ tiến hành tính toán kết quả và tiếp tục lưu vào cache.</p><p>Chúng ta gọi hàm <code>addFunction</code> ba lần với cùng một đối số: trong lần gọi đầu tiên, giá trị của <code>num</code> là <code>10</code> và chưa có mặt trong cache. Do đó <code>num in cache</code> trả về <code>false</code>, và sẽ chạy vào else block: <code>Calculated! 20</code> sẽ được ghi ra, và 10 sẽ được đưa vào cạche. <code>cache</code> khi này sẽ là <code>{ 10: 20 }</code>.</p><p>Tại lần gọi thứ hai, <code>cache</code> object đã có giá trị <code>10</code>. <code>num in cache</code> trả về <code>true</code>, và <code>&#39;From cache! 20&#39;</code> được ghi ra.</p><p>Tại lần gọi thứ ba, ta đưa vào <code>5 * 2</code>, tức <code>10</code> vào hàm. Tiếp tục giống như trên, <code>&#39;From cache! 20&#39;</code> sẽ được ghi ra.</p></p></details><hr><h6 id="79-Output-la-gi"><a href="#79-Output-la-gi" class="headerlink" title="79. Output là gì?"></a>79. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myLifeSummedUp = [<span class="string">"☕"</span>, <span class="string">"💻"</span>, <span class="string">"🍷"</span>, <span class="string">"🍫"</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">in</span> myLifeSummedUp) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> myLifeSummedUp) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>0</code> <code>1</code> <code>2</code> <code>3</code> and <code>&quot;☕&quot;</code> <code>&quot;💻&quot;</code> <code>&quot;🍷&quot;</code> <code>&quot;🍫&quot;</code></li><li>B: <code>&quot;☕&quot;</code> <code>&quot;💻&quot;</code> <code>&quot;🍷&quot;</code> <code>&quot;🍫&quot;</code> and <code>&quot;☕&quot;</code> <code>&quot;💻&quot;</code> <code>&quot;🍷&quot;</code> <code>&quot;🍫&quot;</code></li><li>C: <code>&quot;☕&quot;</code> <code>&quot;💻&quot;</code> <code>&quot;🍷&quot;</code> <code>&quot;🍫&quot;</code> and <code>0</code> <code>1</code> <code>2</code> <code>3</code></li><li>D:  <code>0</code> <code>1</code> <code>2</code> <code>3</code> and <code>{0: &quot;☕&quot;, 1: &quot;💻&quot;, 2: &quot;🍷&quot;, 3: &quot;🍫&quot;}</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-25"><a href="#Dap-an-A-25" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p>Với vòng lặp <em>for-in</em>, chúng ta có thể duyệt qua các thuộc tính <strong>enumerable</strong> của object. Với mảng, thuộc tính enumerable chính là các “key” của mảng, hay chính là các index của mảng đó. Ta có thể coi mảng như là:</p><p><code>{0: &quot;☕&quot;, 1: &quot;💻&quot;, 2: &quot;🍷&quot;, 3: &quot;🍫&quot;}</code></p><p>Do đó <code>0</code> <code>1</code> <code>2</code> <code>3</code> được ghi ra.</p><p>Với vòng lặp <em>for-of</em>, chúng ta sẽ duyệt qua các phần tử của một <strong>iterable</strong>. Một mảng chính là một iterable. Khi chúng ta duyệt qua mảng, biến “item” chính là phần tử mà nó đang duyệt qua, do đó <code>&quot;☕&quot;</code> <code>&quot;💻&quot;</code> <code>&quot;🍷&quot;</code> <code>&quot;🍫&quot;</code> được ghi ra.</p></p></details><hr><h6 id="80-Output-la-gi"><a href="#80-Output-la-gi" class="headerlink" title="80. Output là gì?"></a>80. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [<span class="number">1</span> + <span class="number">2</span>, <span class="number">1</span> * <span class="number">2</span>, <span class="number">1</span> / <span class="number">2</span>]</span><br><span class="line"><span class="built_in">console</span>.log(list)</span><br></pre></td></tr></table></figure><ul><li>A: <code>[&quot;1 + 2&quot;, &quot;1 * 2&quot;, &quot;1 / 2&quot;]</code></li><li>B: <code>[&quot;12&quot;, 2, 0.5]</code></li><li>C: <code>[3, 2, 0.5]</code></li><li>D:  <code>[1, 1, 1]</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-24"><a href="#Dap-an-C-24" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Mảng có thể nhận bất cứ giá trị nào. Số, chuỗi, objects, mảng khác, null, boolean, undefined, và nhiều dạng biểu thức nữa như ngày tháng, hàm, và các tính toán.</p><p>Giá trị của phần tử chính là giá trị trả về.  <code>1 + 2</code> trả về <code>3</code>, <code>1 * 2</code> trả về <code>2</code>, và <code>1 / 2</code> trả về <code>0.5</code>.</p></p></details><hr><h6 id="81-Output-la-gi"><a href="#81-Output-la-gi" class="headerlink" title="81. Output là gì?"></a>81. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`Hi there, <span class="subst">$&#123;name&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sayHi())</span><br></pre></td></tr></table></figure><ul><li>A: <code>Hi there,</code></li><li>B: <code>Hi there, undefined</code></li><li>C: <code>Hi there, null</code></li><li>D:  <code>ReferenceError</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-20"><a href="#Dap-an-B-20" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p>Mặc định, đối số sẽ có giá trị là <code>undefined</code>, trừ phi ta gán giá trị cho nó khi đưa vào hàm. Trong trường hợp này, ta không đưa vào giá trị nào cho đối số <code>name</code> cả. Do đó <code>name</code> sẽ là <code>undefined</code> và được ghi ra.</p><p>Với cú pháp ES6, ta có thể thay đổi giá trị mặc định <code>undefined</code> bằng một giá trị mặc định khác. Ví dụ:</p><p><code>function sayHi(name = &quot;Lydia&quot;) { ... }</code></p><p>Trong trường hợp này, nếu ta không đưa giá trị nào vào hoặc đưa vào <code>undefined</code>, <code>name</code> cũng sẽ nhận giá trị mặc định là <code>Lydia</code>.</p></p></details><hr><h6 id="82-Output-la-gi"><a href="#82-Output-la-gi" class="headerlink" title="82. Output là gì?"></a>82. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> status = <span class="string">"😎"</span></span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> status = <span class="string">"😍"</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    status: <span class="string">"🥑"</span>,</span><br><span class="line">    getStatus() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.status</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(data.getStatus())</span><br><span class="line">  <span class="built_in">console</span>.log(data.getStatus.call(<span class="keyword">this</span>))</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;🥑&quot;</code> and <code>&quot;😍&quot;</code></li><li>B: <code>&quot;🥑&quot;</code> and <code>&quot;😎&quot;</code></li><li>C: <code>&quot;😍&quot;</code> and <code>&quot;😎&quot;</code></li><li>D: <code>&quot;😎&quot;</code> and <code>&quot;😎&quot;</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-21"><a href="#Dap-an-B-21" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p>Giá trị của <code>this</code> phụ thuộc vào vị trí mà nó được gọi. Trong một <strong>phương thức</strong>, ví dụ <code>getStatus</code>, <code>this</code> trỏ tới <em>object chứa phương thức đó</em>. Phương thức này thuộc <code>data</code> object, do đó <code>this</code> trỏ tới <code>data</code> object. Khi chúng ta gọi <code>this.status</code> thì thuộc tính <code>status</code> của <code>data</code> sẽ được ghi ra, chính là <code>&quot;🥑&quot;</code>.</p><p>Với phương thức <code>call</code>, chúng ta thay đổi tham chiếu mà <code>this</code> trỏ tới. Trong <strong>hàm</strong>, từ khóa <code>this</code> trỏ tới <em>object chứa hàm đó</em>. Chúng ta khai báo hàm <code>setTimeout</code> trong <em>global object</em>, do đó bên trong hàm <code>setTimeout</code> thì <code>this</code> sẽ trỏ tới <em>global object</em>. Tại biến global object, có một biến <em>status</em> với giá trị <code>&quot;😎&quot;</code>. Do đó khi gọi <code>this.status</code>, <code>&quot;😎&quot;</code> sẽ được ghi ra.</p></p></details><hr><h6 id="83-Output-la-gi"><a href="#83-Output-la-gi" class="headerlink" title="83. Output là gì?"></a>83. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">"Lydia"</span>,</span><br><span class="line">  age: <span class="number">21</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> city = person.city</span><br><span class="line">city = <span class="string">"Amsterdam"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person)</span><br></pre></td></tr></table></figure><ul><li>A: <code>{ name: &quot;Lydia&quot;, age: 21 }</code></li><li>B: <code>{ name: &quot;Lydia&quot;, age: 21, city: &quot;Amsterdam&quot; }</code></li><li>C: <code>{ name: &quot;Lydia&quot;, age: 21, city: undefined }</code></li><li>D: <code>&quot;Amsterdam&quot;</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-26"><a href="#Dap-an-A-26" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p>Chúng ta set biến <code>city</code> bằng với giá trị của thuộc tính <code>city</code> của object <code>person</code>. Nhưng object này không có thuộc tính nào là <code>city</code> cả, nên giá trị của biến <code>city</code> sẽ là <code>undefined</code>. </p><p>Chú ý là chúng ta <em>không tham chiếu</em> tới bản thân object <code>person</code>! Chúng ta chỉ đơn giản là set giá trị của biến <code>city</code> bằng với giá trị của thuộc tính <code>city</code> trong object <code>person</code> mà thôi.</p><p>Sau đó chúng ta set biến <code>city</code> bằng với chuỗi <code>&quot;Amsterdam&quot;</code>. Điều này không hề ảnh hưởng gì tới object person vì không có tham chiếu nào ở đây cả.</p><p>Do đó khi ghi object <code>person</code> ra, Tất cả các thuộc tính vẫn như cũ không hề thay đổi gì cả. </p></p></details><hr><h6 id="84-Output-la-gi"><a href="#84-Output-la-gi" class="headerlink" title="84. Output là gì?"></a>84. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAge</span>(<span class="params">age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (age &lt; <span class="number">18</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> message = <span class="string">"Sorry, you're too young."</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> message = <span class="string">"Yay! You're old enough!"</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> message</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(checkAge(<span class="number">21</span>))</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;Sorry, you&#39;re too young.&quot;</code></li><li>B: <code>&quot;Yay! You&#39;re old enough!&quot;</code></li><li>C: <code>ReferenceError</code></li><li>D: <code>undefined</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-25"><a href="#Dap-an-C-25" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Biến số được khai báo với các từ khóa như <code>const</code> hay <code>let</code> đều là <em>block-scoped</em>. Block chính là những khối được bao bọc bởi cặp ngoặc nhọn (<code>{ }</code>). Trong trường hợp này nó chính là cặp ngoặc bao quanh những câu lệnh <code>if/else</code>. Chúng ta không thể truy cập đến biến đó bên ngoài block, và kết quả là throw một ReferenceError.</p></p></details><hr><h6 id="85-Nhung-thong-tin-nao-se-duoc-ghi-ra"><a href="#85-Nhung-thong-tin-nao-se-duoc-ghi-ra" class="headerlink" title="85. Những thông tin nào sẽ được ghi ra?"></a>85. Những thông tin nào sẽ được ghi ra?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'https://www.website.com/api/user/1'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res))</span><br></pre></td></tr></table></figure><ul><li>A: The result of the <code>fetch</code> method.</li><li>B: The result of the second invocation of the <code>fetch</code> method.</li><li>C: The result of the callback in the previous <code>.then()</code>.</li><li>D: It would always be undefined. </li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-26"><a href="#Dap-an-C-26" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Giá trị của <code>res</code> trong <code>.then</code> thứ hai chính là giá trị trả về từ <code>.then</code> trước đó. Chúng ta có thể thực hiện <code>.then</code> liên tiếp như vậy, các giá trị sẽ liên tiếp được truyền tới hàm xử lý tiếp theo.</p></p></details><hr><h6 id="86-Bang-cach-nao-chung-ta-co-the-set-hasName-bang-true-neu-chung-ta-khong-dua-true-vao-doi-so"><a href="#86-Bang-cach-nao-chung-ta-co-the-set-hasName-bang-true-neu-chung-ta-khong-dua-true-vao-doi-so" class="headerlink" title="86. Bằng cách nào chúng ta có thể set hasName bằng true, nếu chúng ta không đưa true vào đối số?"></a>86. Bằng cách nào chúng ta có thể set <code>hasName</code> bằng <code>true</code>, nếu chúng ta không đưa <code>true</code> vào đối số?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> hasName = <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>!!name</code></li><li>B: <code>name</code></li><li>C: <code>new Boolean(name)</code></li><li>D: <code>name.length</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-27"><a href="#Dap-an-A-27" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p>Với <code>!!name</code>, chúng ta sẽ đánh giá giá trị của <code>name</code> là <em>truthy</em> hay <em>falsy</em>. Nếu name là truthy, thì <code>!name</code> sẽ trả về <code>false</code>. <code>!false</code> (hay chính là <code>!!name</code> khi này) sẽ trả về <code>true</code>.</p><p>Bằng cách set <code>hasName</code> bằng với <code>name</code>, chúng ta set <code>hasName</code> bằng với giá trị đối số đưa vào trong hàm <code>getName</code>, không thỏa mãn vì ta đã giới hạn là không đưa <code>true</code> vào.</p><p><code>new Boolean(true)</code> trả về một object wrapper, chứ không phải là một giá trị boolean.</p><p><code>name.length</code> trả về độ dài của đối số, chứ không phải <code>true</code>.</p></p></details><hr><h6 id="87-Output-la-gi"><a href="#87-Output-la-gi" class="headerlink" title="87. Output là gì?"></a><a name=20190805></a>87. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"I want pizza"</span>[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;&quot;&quot;</code></li><li>B: <code>&quot;I&quot;</code></li><li>C: <code>SyntaxError</code></li><li>D: <code>undefined</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-22"><a href="#Dap-an-B-22" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p>Trong trường hợp ta muốn lấy ra một ký tự trong một chuỗi, ta có thể sử dụng toán tử ngoặc vuông. Ký tự đầu tiên sẽ có thứ tự là 0, và cứ tiếp tục như vậy. Trong trường hợp này chúng ta lấy ra ký tự có thứ tự là 0, đó chính là ký tự <code>&quot;I&#39;</code>.</p><p>Chú ý là phương thức này không hoạt động với IE7 trở xuống. Thay vì thế ta sử dụng <code>.charAt()</code></p></p></details><hr><h6 id="88-Output-la-gi"><a href="#88-Output-la-gi" class="headerlink" title="88. Output là gì?"></a>88. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1, num2 = num1</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(num1 + num2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>NaN</code></li><li>B: <code>20</code></li><li>C: <code>ReferenceError</code></li><li>D: <code>undefined</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-23"><a href="#Dap-an-B-23" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p>Ta có thể set giá trị mặc định của một tham số là tham số khác trong hàm, miễn là tham số đó được khai báo <em>trước</em> tham số mặc định. Chúng ta đưa <code>10</code> vào hàm <code>sum</code>. Nếu hàm <code>sum</code> chỉ nhận 1 đối số, nó có nghĩa là giá trị của <code>num2</code> không được đưa vào, nên nó sẽ lấy giá trị mặc định là giá trị của <code>num1</code> đã được đưa vào, hay chính là <code>10</code> trong trường hợp này. Khi này <code>num1 + num2</code> trả về <code>20</code>.</p><p>Nếu chúng ta thử set một giá trị mặc định của tham số bằng với giá trị của tham số khai báo <em>sau</em> (về bên phải), giá trị của tham số đó sẽ không được khởi tạo và dẫn đến throw ra lỗi. </p></p></details><hr><h6 id="89-Output-la-gi"><a href="#89-Output-la-gi" class="headerlink" title="89. Output là gì?"></a>89. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module.js </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; <span class="string">"Hello world"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">"Lydia"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js </span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> data <span class="keyword">from</span> <span class="string">"./module"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(data)</span><br></pre></td></tr></table></figure><ul><li>A: <code>{ default: function default(), name: &quot;Lydia&quot; }</code></li><li>B: <code>{ default: function default() }</code></li><li>C: <code>{ default: &quot;Hello world&quot;, name: &quot;Lydia&quot; }</code></li><li>D: Global object of <code>module.js</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-28"><a href="#Dap-an-A-28" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p>Cú pháp <code>import * as data</code> sẽ import <em>tất cả những gì được export</em> từ <code>module.js</code> vào trong <code>index.js</code> và lưu trữ dưới một object có tên là <code>data</code>. Trong file <code>module.js</code>, có hai thứ được export ra: default export và một named export. Default export là một hàm trả về chuỗi <code>&quot;Hello World&quot;</code>, và named export là một biến <code>name</code> nhận giá trị là chuỗi <code>&quot;Lydia&quot;</code>. </p><p>Do đó <code>data</code> object có thuộc tính <code>default</code> cho default export, các thuộc tính khác sẽ có tên chính là tên của named exports và giá trị đi kèm. </p></p></details><hr><h6 id="90-Output-la-gi"><a href="#90-Output-la-gi" class="headerlink" title="90. Output là gì?"></a>90. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> member = <span class="keyword">new</span> Person(<span class="string">"John"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> member)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;class&quot;</code></li><li>B: <code>&quot;function&quot;</code></li><li>C: <code>&quot;object&quot;</code></li><li>D: <code>&quot;string&quot;</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-27"><a href="#Dap-an-C-27" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Classes chỉ đơn thuần là <code>syntactical sugar</code> (cú pháp đặc biệt) của function constructors mà thôi. Nó tương đương với việc ta viết một function thế này:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Gọi một constructor với từ khóa <code>new</code> sẽ tạo ra một instance của class <code>Person</code>, <code>typeof</code> sẽ trả về là <code>&quot;object&quot;</code> cho các instance. Do đó <code>typeof member</code> trả về <code>&quot;object&quot;</code>. </p></p></details><hr><h6 id="91-Output-la-gi"><a href="#91-Output-la-gi" class="headerlink" title="91. Output là gì?"></a>91. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].push(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newList.push(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><ul><li>A: <code>[1, 2, 3, 4, 5]</code></li><li>B: <code>[1, 2, 3, 5]</code></li><li>C: <code>[1, 2, 3, 4]</code></li><li>D: <code>Error</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-D-9"><a href="#Dap-an-D-9" class="headerlink" title="Đáp án: D"></a>Đáp án: D</h4><p>Hàm <code>.push</code> trả về <em>độ dài mới</em> của mảng, chứ không phải bản thân mảng đó! Bằng cách set <code>newList</code> bằng với <code>[1, 2, 3].push(4)</code>, ta đã set cho <code>newList</code> giá trị là <code>4</code> - tức độ dài của mảng lúc này. </p><p>Sau đó chúng ta tiến hành <code>.push</code> trên <code>newList</code>. Vì <code>newList</code> là một số thông thường, ta không thể dùng <code>.push</code> được, nên sẽ throw ra một TypeError.</p></p></details><hr><h6 id="92-Output-la-gi"><a href="#92-Output-la-gi" class="headerlink" title="92. Output là gì?"></a>92. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">giveLydiaPizza</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"Here is pizza!"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> giveLydiaChocolate = <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">"Here's chocolate... now go hit the gym already."</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(giveLydiaPizza.prototype)</span><br><span class="line"><span class="built_in">console</span>.log(giveLydiaChocolate.prototype)</span><br></pre></td></tr></table></figure><ul><li>A: <code>{ constructor: ...}</code> <code>{ constructor: ...}</code> </li><li>B: <code>{}</code> <code>{ constructor: ...}</code> </li><li>C: <code>{ constructor: ...}</code> <code>{}</code></li><li>D: <code>{ constructor: ...}</code> <code>undefined</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-D-10"><a href="#Dap-an-D-10" class="headerlink" title="Đáp án: D"></a>Đáp án: D</h4><p>Hàm thông thường giống như <code>giveLydiaPizza</code>, sẽ có thuộc tính <code>prototype</code> là một object (prototype object) với một thuộc tính là <code>constructor</code>. Còn <code>arrow functions</code> giống như <code>giveLydiaChocolate</code>thì không có thuộc tính <code>prototype</code> này. <code>undefined</code> trả về khi ta truy cập thuộc tính <code>prototype</code> bằng cách gọi <code>giveLydiaChocolate.prototype</code>. </p></p></details><hr><h6 id="93-Output-la-gi"><a href="#93-Output-la-gi" class="headerlink" title="93. Output là gì?"></a>93. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">"Lydia"</span>,</span><br><span class="line">  age: <span class="number">21</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [x, y] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(person)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x, y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>name</code> <code>Lydia</code> và <code>age</code> <code>21</code></li><li>B: <code>[&quot;name&quot;, &quot;Lydia&quot;]</code> và <code>[&quot;age&quot;, 21]</code> </li><li>C: <code>[&quot;name&quot;, &quot;age&quot;]</code> và <code>undefined</code></li><li>D: <code>Error</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-29"><a href="#Dap-an-A-29" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p><code>Object.entries(person)</code> sẽ trả về một mảng của mảng, bao gồm các key và các object:</p><p><code>[ [ &#39;name&#39;, &#39;Lydia&#39; ], [ &#39;age&#39;, 21 ] ]</code> </p><p>Khí sử dụng <code>for-of</code>, chúng ta sẽ duyệt qua từng thành phần của mảng, trong trường hợp này chính là những mảng con. Đồng thời tiến hành gán giá trị luôn trong vongf lặp for-of, bằng cách sử dụng <code>const [x, y]</code>. Khi này <code>x</code> sẽ là phần tử đầu tiên trong mảng con, <code>y</code> chính là phần tử thứ hai trong mảng con. </p><p>Mảng con đầu tiên là <code>[ &quot;name&quot;, &quot;Lydia&quot; ]</code>, nên <code>x</code> sẽ là <code>&quot;name&quot;</code>, và <code>y</code> sẽ là <code>&quot;Lydia&quot;</code>, và được ghi ra.<br>Mảng con thứ hai là <code>[ &quot;age&quot;, 21 ]</code>, nên <code>x</code> sẽ là <code>&quot;age&quot;</code>, và <code>y</code> sẽ là <code>21</code>, và được ghi ra.</p></p></details><hr><h6 id="94-Output-la-gi"><a href="#94-Output-la-gi" class="headerlink" title="94. Output là gì?"></a>94. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getItems</span>(<span class="params">fruitList, ...args, favoriteFruit</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [...fruitList, ...args, favoriteFruit]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getItems([<span class="string">"banana"</span>, <span class="string">"apple"</span>], <span class="string">"pear"</span>, <span class="string">"orange"</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>[&quot;banana&quot;, &quot;apple&quot;, &quot;pear&quot;, &quot;orange&quot;]</code></li><li>B: <code>[[&quot;banana&quot;, &quot;apple&quot;], &quot;pear&quot;, &quot;orange&quot;]</code> </li><li>C: <code>[&quot;banana&quot;, &quot;apple&quot;, [&quot;pear&quot;], &quot;orange&quot;]</code></li><li>D: <code>SyntaxError</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-D-11"><a href="#Dap-an-D-11" class="headerlink" title="Đáp án: D"></a>Đáp án: D</h4><p><code>...args</code> là cú pháp tham số cuối cùng. Giá trị của tham số cuối cùng chính là toàn bộ các đối số còn lại, <strong>và nó là tham số cuối cùng duy nhất</strong>! Trong trường hợp này, tham số cuối cùng lại là tham số thứ hai. Điều đó là không thể được, và sẽ throw ra một lỗi cú pháp. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getItems</span>(<span class="params">fruitList, favoriteFruit, ...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [...fruitList, ...args, favoriteFruit]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getItems([<span class="string">"banana"</span>, <span class="string">"apple"</span>], <span class="string">"pear"</span>, <span class="string">"orange"</span>)</span><br></pre></td></tr></table></figure><p>Nếu ta code như thế này thì lại đúng. Giá trị trả về sẽ là <code>[ &#39;banana&#39;, &#39;apple&#39;, &#39;orange&#39;, &#39;pear&#39; ]</code></p></p></details><hr><h6 id="95-Output-la-gi"><a href="#95-Output-la-gi" class="headerlink" title="95. Output là gì?"></a><a name=20190817></a>95. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nums</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span></span><br><span class="line">  (a &gt; b)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'a is bigger'</span>)</span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'b is bigger'</span>)</span><br><span class="line">  <span class="keyword">return</span> </span><br><span class="line">  a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(nums(<span class="number">4</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">console</span>.log(nums(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><ul><li>A: <code>a is bigger</code>, <code>6</code> và <code>b is bigger</code>, <code>3</code></li><li>B: <code>a is bigger</code>, <code>undefined</code> và <code>b is bigger</code>, <code>undefined</code></li><li>C: <code>undefined</code> và <code>undefined</code></li><li>D: <code>SyntaxError</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-24"><a href="#Dap-an-B-24" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p>Với JavaScript, ta <em>không bắt buộc</em> phải viết dấu chấm phẩy (<code>;</code>), JavaScript engine sẽ tự động thêm vào sau mỗi câu lệnh. Nó gọi là <strong>Automatic Semicolon Insertion</strong>. Một câu lệnh có thể là khai báo biến, hoặc từ khóa như <code>throw</code>, <code>return</code>, <code>break</code>, vv. </p><p>Ở đây ta sử dụng câu lệnh <code>return</code> ở một dòng và giá trị <code>a + b</code> ở một <em>dòng khác</em>. Tuy nhiên do khác dòng nên JS engine không thể biết đâu là giá trị ta thực sự muốn trả về. Thay vì thế, nó sẽ tự động thêm vào dấu chấm phẩy ngay sau <code>return</code> giống như này:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span>;</span><br><span class="line">a + b</span><br></pre></td></tr></table></figure><p>Có nghĩa là <code>a + b</code> sẽ không bao giờ được thực hiện, vì hàm đã được <code>return</code> rồi. Do không giá trị nào được trả về, nên giá trị trả về của hàm sẽ là <code>undefined</code>. Lưu ý là sẽ không tự động thêm dấu chấm phẩy ngay sau <code>if/else</code> đâu nhé!</p></p></details><hr><h6 id="96-Output-la-gi"><a href="#96-Output-la-gi" class="headerlink" title="96. Output là gì?"></a>96. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">"Lydia"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person = <span class="class"><span class="keyword">class</span> <span class="title">AnotherPerson</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">"Sarah"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> member = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="built_in">console</span>.log(member.name)</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;Lydia&quot;</code></li><li>B: <code>&quot;Sarah&quot;</code></li><li>C: <code>Error: cannot redeclare Person</code></li><li>D: <code>SyntaxError</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-25"><a href="#Dap-an-B-25" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p>Chúng ta có thể set một class với giá trị là một classes/function constructor khác. Trong trường hợp này, ta set <code>Person</code> bằng với <code>AnotherPerson</code>. Trong constructor, <code>this.name</code> là <code>Sarah</code>, do đó giá trị của thuộc tính này trong instance <code>member</code> chính là <code>&quot;Sarah&quot;</code>.</p></p></details><hr><h6 id="97-Output-la-gi"><a href="#97-Output-la-gi" class="headerlink" title="97. Output là gì?"></a>97. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> info = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>(<span class="string">'a'</span>)]: <span class="string">'b'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(info)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(info))</span><br></pre></td></tr></table></figure><ul><li>A: <code>{Symbol(&#39;a&#39;): &#39;b&#39;}</code> và <code>[&quot;{Symbol(&#39;a&#39;)&quot;]</code></li><li>B: <code>{}</code> và <code>[]</code></li><li>C: <code>{ a: &quot;b&quot; }</code> và <code>[&quot;a&quot;]</code></li><li>D: <code>{Symbol(&#39;a&#39;): &#39;b&#39;}</code> và <code>[]</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-D-12"><a href="#Dap-an-D-12" class="headerlink" title="Đáp án: D"></a>Đáp án: D</h4><p>Phương thức <code>Object.keys</code> sẽ trả về toàn bộ những key của các thuộc tính <em>enumerable</em> trên một object. Nhưng Symbol không phải dạng <em>enumerable</em>. do đó nó sẽ trả về một mảng rỗng. Tuy nhiên khi ta log ra toàn bộ object, thì ta sẽ ghi ra toàn bộ các thuộc tính, cho dù đó có là thuộc tính <em>enumerable</em> hay không.</p><p>Đó chính là một đặc trưng của Symbol: Bên cạnh việc nó biểu diễn một giá trị duy nhất (tránh việc xảy ra xung đột tên gọi, ví dụ khi ta sử dụng 2 thư viện mà muốn thêm thuộc tính vào cho cùng một object chẳng hạn), nó còn giúp “ẩn” thuộc tính đó đi (dù không hoàn toàn, ta vẫn có thể truy cập được bằng cách sử dụng phương thức <code>Object.getOwnPropertySymbols()</code>).</p></p></details><hr><h6 id="98-Output-la-gi"><a href="#98-Output-la-gi" class="headerlink" title="98. Output là gì?"></a>98. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getList = <span class="function">(<span class="params">[x, ...y]</span>) =&gt;</span> [x, y]</span><br><span class="line"><span class="keyword">const</span> getUser = <span class="function"><span class="params">user</span> =&gt;</span> &#123; <span class="attr">name</span>: user.name, <span class="attr">age</span>: user.age &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">"Lydia"</span>, <span class="attr">age</span>: <span class="number">21</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getList(list))</span><br><span class="line"><span class="built_in">console</span>.log(getUser(user))</span><br></pre></td></tr></table></figure><ul><li>A: <code>[1, [2, 3, 4]]</code> và <code>undefined</code></li><li>B: <code>[1, [2, 3, 4]]</code> và <code>{ name: &quot;Lydia&quot;, age: 21 }</code></li><li>C: <code>[1, 2, 3, 4]</code> và <code>{ name: &quot;Lydia&quot;, age: 21 }</code></li><li>D: <code>Error</code> và <code>{ name: &quot;Lydia&quot;, age: 21 }</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-30"><a href="#Dap-an-A-30" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p>Hàm <code>getList</code> nhận vào một mảng các đối số, và tiến hành xử lý mảng đó luôn khi đưa vào hàm:</p><p> <code>[x, ...y] = [1, 2, 3, 4]</code></p><p> Với việc sử dụng cú pháp tham số cuối cùng <code>...y</code>, chúng ta đưa toàn bộ “những đối số còn lại” vào một mảng y. Trong trường hợp này đó là mảng gồm các phần tử <code>2</code>, <code>3</code> và <code>4</code>. Do đó giá trị của <code>y</code> lúc này chính là mảng <code>[2, 3, 4]</code>. Giá trị của <code>x</code> là <code>1</code>, nên khi ghi <code>[x, y]</code> ra, kết quả sẽ là <code>[1, [2, 3, 4]]</code>.</p><p>Hàm <code>getUser</code> nhận vào một object. Với cú pháp arrow function, chúng ta sẽ không phải viết trong ngoặc nhọn <code>{}</code> nữa nếu ta chỉ muốn đơn thuần trả về giá trị. Tuy nhiên, nếu ta muốn trả về một <em>object</em> t arrow function, ta sẽ phải viết chúng trong dấu ngoặc tròn <code>()</code>, nếu không thì sẽ không có giá trị nào được trả về! Ví dụ như sau:</p><figure class="highlight plain"><figcaption><span>getUser </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Do không giá trị nào được trả về, kết quả sẽ là &#96;undefined&#96;.</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;details&gt;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">###### 99. Output là gì?</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;javascript</span><br><span class="line">const name &#x3D; &quot;Lydia&quot;</span><br><span class="line"></span><br><span class="line">console.log(name())</span><br></pre></td></tr></table></figure><ul><li>A: <code>SyntaxError</code></li><li>B: <code>ReferenceError</code></li><li>C: <code>TypeError</code></li><li>D: <code>undefined</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-28"><a href="#Dap-an-C-28" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Biến <code>name</code> có giá trị là một chuỗi, không phải hàm, vì thế không thể gọi được. </p><p>TypeErrors sẽ được throw ra nếu một giá trị không được sử dụng đúng kiểu. JavaScript muốn <code>name</code> là một hàm khi ta tiến hành gọi nó. Nhưng nó là chuỗi, nên sẽ throw ra một TypeError.</p><p>SyntaxErrors sẽ được throw khi ta viết code không đúng cú pháp của JavaScript, ví dụ thay vì <code>return</code> ta viết <code>retrun</code>. </p><p>ReferenceErrors sẽ được throw ra khi Javascript không thể tìm được tham chiếu nào đến giá trị mà ta đang cố truy cập.</p></p></details><hr><h6 id="100-Output-la-gi"><a href="#100-Output-la-gi" class="headerlink" title="100. Output là gì?"></a>100. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 🎉✨ Đây là câu hỏi thứ 100 của tôi! ✨🎉</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> output = <span class="string">`<span class="subst">$&#123;[] &amp;&amp; <span class="string">'Im'</span>&#125;</span>possible!</span></span><br><span class="line"><span class="string">You should<span class="subst">$&#123;<span class="string">''</span> &amp;&amp; <span class="string">`n't`</span>&#125;</span> see a therapist after so much JavaScript lol`</span></span><br></pre></td></tr></table></figure><ul><li>A: <code>possible! You should see a therapist after so much JavaScript lol</code></li><li>B: <code>Impossible! You should see a therapist after so much JavaScript lol</code></li><li>C: <code>possible! You shouldn&#39;t see a therapist after so much JavaScript lol</code></li><li>D: <code>Impossible! You shouldn&#39;t see a therapist after so much JavaScript lol</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-26"><a href="#Dap-an-B-26" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p><code>[]</code> là một giá trị truthy. Với phép toán <code>&amp;&amp;</code> , giá trị bên phải sẽ được trả về nếu giá trị bên trái là truthy. Trong trường hợp này giá trị bên trái <code>[]</code> là truthy, nên <code>&quot;Im&#39;</code> sẽ được trả về.</p><p><code>&quot;&quot;</code> là một giá trị falsy. Nếu giá trị bên trái là falsy, không có gì được trả về cả. Do đó <code>n&#39;t</code> sẽ không được trả về.</p></p></details><hr><h6 id="101-Output-la-gi"><a href="#101-Output-la-gi" class="headerlink" title="101. Output là gì?"></a>101. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> one = (<span class="literal">false</span> || &#123;&#125; || <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> two = (<span class="literal">null</span> || <span class="literal">false</span> || <span class="string">""</span>)</span><br><span class="line"><span class="keyword">const</span> three = ([] || <span class="number">0</span> || <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(one, two, three)</span><br></pre></td></tr></table></figure><ul><li>A: <code>false</code> <code>null</code> <code>[]</code></li><li>B: <code>null</code> <code>&quot;&quot;</code> <code>true</code></li><li>C: <code>{}</code> <code>&quot;&quot;</code> <code>[]</code></li><li>D: <code>null</code> <code>null</code> <code>true</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-29"><a href="#Dap-an-C-29" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Với phép toán <code>||</code>, ta sẽ trả về giá trị truethy đầu tiên. Nếu tất cả đều là falsy, giá trị cuối cùng sẽ được trả về.</p><p><code>(false || {} || null)</code>: object rỗng <code>{}</code> là một giá trị truthy. Nó là giá trị truethy đầu tiên và duy nhất nên sẽ được trả về. Do đó <code>one</code> sẽ là <code>{}</code>.</p><p><code>(null || false || &quot;&quot;)</code>: Tất cả toán hạng đều là falsy. Có nghĩa là toán hạng cuối cùng <code>&quot;&quot;</code> sẽ được trả về. Do đó <code>two</code> sẽ là <code>&quot;&quot;</code>.</p><p><code>([] || 0 || &quot;&quot;)</code>: mảng rỗng <code>[]</code> là một giá trị truthy. Nó là giá trị truthy đầu tiên nên sẽ được trả về. Do đó <code>three</code> sẽ là <code>[]</code>.</p></p></details><hr><h6 id="102-Output-la-gi"><a href="#102-Output-la-gi" class="headerlink" title="102. Output là gì?"></a>102. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myPromise = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Promise</span>.resolve(<span class="string">'I have resolved!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">firstFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  myPromise().then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res))</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'second'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">secondFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">await</span> myPromise())</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'second'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">firstFunction()</span><br><span class="line">secondFunction()</span><br></pre></td></tr></table></figure><ul><li>A: <code>I have resolved!</code>, <code>second</code> và <code>I have resolved!</code>, <code>second</code></li><li>B: <code>second</code>, <code>I have resolved!</code> và <code>second</code>, <code>I have resolved!</code></li><li>C: <code>I have resolved!</code>, <code>second</code> và <code>second</code>, <code>I have resolved!</code></li><li>D: <code>second</code>, <code>I have resolved!</code> và <code>I have resolved!</code>, <code>second</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-D-13"><a href="#Dap-an-D-13" class="headerlink" title="Đáp án: D"></a>Đáp án: D</h4><p>Có thể tưởng tượng đơn giản cách promise thực thi như sau: <em>bây giờ tôi sẽ để tạm nó sang một bên vì nó tính toán mất thời gian. Chỉ khi nào nó được hoàn thành (resolved) hay bị hủy bỏ (rejected) hay khi call stack trở nên rỗng thì tôi sẽ lấy giá trị trả về ra.</em></p><p>Dù chúng ta có thể sử dụng giá trị thu được bằng cú pháp <code>.then</code>, hoặc sử dụng cặp cú pháp <code>await/async</code>, nhưng, cách chúng hoạt động là khác nhau.</p><p>Trong <code>firstFunction</code>, chúng ta đưa promise qua một bên chờ cho nó tính toán xong, và vẫn tiếp tục chạy những code tiếp sau đó, theo đó <code>console.log(&#39;second&#39;)</code> sẽ được chạy. Sau đó promise được hoàn thành trả về giá trị <code>I have resolved</code>, giá trị này sẽ được log ra khi call stack trở nên rỗng. </p><p>Với từ khóa <code>await</code> trong <code>secondFunction</code>, ta đã tạm dừng một hàm bất đồng bộ cho tới khi chúng trả về giá trị, sau đó ta mới đi tiếp đến các câu lệnh tiếp theo.</p><p>Do đó nó sẽ chờ cho tới khi <code>myPromise</code> được hoàn thành và trả về giá trị <code>I have resolved</code>, sau đó chúng ta sẽ chạy tiếp câu lệnh tiếp theo in ra <code>second</code>. </p></p></details><hr><h6 id="103-Output-la-gi"><a href="#103-Output-la-gi" class="headerlink" title="103. Output là gì?"></a>103. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">set</span> = new Set()</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>.add(1)</span><br><span class="line"><span class="keyword">set</span>.add("Lydia")</span><br><span class="line"><span class="keyword">set</span>.add(&#123; name: <span class="string">"Lydia"</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="keyword">set</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item + <span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>3</code>, <code>NaN</code>, <code>NaN</code></li><li>B: <code>3</code>, <code>7</code>, <code>NaN</code></li><li>C: <code>3</code>, <code>Lydia2</code>, <code>[object Object]2</code></li><li>D: <code>&quot;12&quot;</code>, <code>Lydia2</code>, <code>[object Object]2</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-30"><a href="#Dap-an-C-30" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Phép toán <code>+</code> không chỉ dùng để cộng các số, mà nó còn dùng để nối chuỗi nữa. Mỗi khi Javascript engine gặp một giá trị trong phép toán không phải dạng số, nó sẽ chuyển các số trong phép toán đó sang dạng chuỗi. </p><p>Phép toán đầu tiên item là một số <code>1</code>, nên <code>1 + 2</code> trả về 3.</p><p>Ở phép toán thứ hai, item là một chuỗi <code>&quot;Lydia&quot;</code>. trong khi đó <code>2</code> là một số, nên <code>2</code> sẽ bị chuyển sang dạng chuỗi, sau khi nối vào ta có chuỗi <code>&quot;Lydia2&quot;</code>. </p><p>Ở phép toán thứ ba, <code>{ name: &quot;Lydia&quot; }</code> là một object. Tuy nhiên dù có là object hay gì đi nữa thì nó cũng sẽ bị chuyển sang dạng chuỗi. Đối với object thì khi chuyển sang dạng chuỗi nó sẽ trở thành <code>&quot;[object Object]&quot;</code>. <code>&quot;[object Object]&quot;</code> nối với <code>&quot;2&quot;</code> trở thành <code>&quot;[object Object]2&quot;</code>.</p></p></details><hr><h6 id="104-Output-la-gi"><a href="#104-Output-la-gi" class="headerlink" title="104. Output là gì?"></a>104. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>5</code></li><li>B: <code>Promise {&lt;pending&gt;: 5}</code></li><li>C: <code>Promise {&lt;fulfilled&gt;: 5}</code></li><li>D: <code>Error</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-31"><a href="#Dap-an-C-31" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Ta có thể truyền vào giá trị bất kì cho <code>Promise.resolve</code>, dù có là promise hay không promise. Bản thân nó sẽ là một hàm trả về một promise với giá trị đã được resolved.</p><p>Trong trường hợp này ta đưa vào giá trị <code>5</code>. Nó sẽ trả về một resolved promise với giá trị <code>5</code>. </p></p></details><hr><h6 id="105-Output-la-gi"><a href="#105-Output-la-gi" class="headerlink" title="105. Output là gì?"></a>105. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compareMembers</span>(<span class="params">person1, person2 = person</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (person1 !== person2) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Not the same!"</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"They are the same!"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">"Lydia"</span> &#125;</span><br><span class="line"></span><br><span class="line">compareMembers(person)</span><br></pre></td></tr></table></figure><ul><li>A: <code>Not the same!</code></li><li>B: <code>They are the same!</code></li><li>C: <code>ReferenceError</code></li><li>D: <code>SyntaxError</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-27"><a href="#Dap-an-B-27" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p>Object sẽ được truyền vào hàm theo reference. Khi chúng ta nói so sánh strict equal (<code>===</code>), nghĩa là ta đang so sánh các reference của chúng. </p><p>Ta set giá trị mặc định của <code>person2</code> là object <code>person</code>, và đưa object <code>person</code> vào làm giá trị cho đối số <code>person1</code>.</p><p>Điều đó có nghĩa là chúng cùng trỏ đến một object trong bộ nhớ, do đó chúng bằng nhau, và <code>They are the same!</code> được in ra.</p></p></details><hr><h6 id="106-Output-la-gi"><a href="#106-Output-la-gi" class="headerlink" title="106. Output là gì?"></a>106. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> colorConfig = &#123;</span><br><span class="line">  red: <span class="literal">true</span>,</span><br><span class="line">  blue: <span class="literal">false</span>,</span><br><span class="line">  green: <span class="literal">true</span>,</span><br><span class="line">  black: <span class="literal">true</span>,</span><br><span class="line">  yellow: <span class="literal">false</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> colors = [<span class="string">"pink"</span>, <span class="string">"red"</span>, <span class="string">"blue"</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(colorConfig.colors[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><ul><li>A: <code>true</code></li><li>B: <code>false</code></li><li>C: <code>undefined</code></li><li>D: <code>TypeError</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-D-14"><a href="#Dap-an-D-14" class="headerlink" title="Đáp án: D"></a>Đáp án: D</h4><p>Trong Javascript ta có hai cách để truy cập thuộc tính của một object: sử dụng ngoặc vuông <code>[]</code>, hoặc sử dụng chấm <code>.</code>. Trong trương hợp này chúng ta sử dụng chấm (<code>colorConfig.colors</code>) thay cho ngoặc vuông (<code>colorConfig[&quot;colors&quot;]</code>). </p><p>Với cách sử dụng chấm, Javascript sẽ tìm kiếm một thuộc tính có tên chính xác như tên ta đưa vào. Trong trường hợp này nó là thuộc tính <code>colors</code> trong object <code>colorConfig</code> Tuy nhiên trong object này không có thuộc tính nào tên là  <code>colors</code>, nên nó sẽ trả về <code>undefined</code>. Sau đó chúng ta cố truy cậ vào thuộc tính 1 của nó bằng cách gọi <code>[1]</code>. Chúng ta không thể làm như vậy trên giá trị <code>undefined</code>, nên nó sẽ trả về <code>TypeError</code>: <code>Cannot read property &#39;1&#39; of undefined</code>.</p><p>Javascript thông dịch theo câu lệnh. Khi ta sử dụng ngoặc vuông, Nnó sẽ tìm mở ngoặc đầu tiên <code>[</code> và tiếp tục cho tới khi gặp đóng ngoặc tương ứng <code>]</code>. Chỉ khi đó nó mới đánh giá câu lệnh. Nếu chúng ta sử dụng cú pháp <code>colorConfig[colors[1]]</code>, nó sẽ trả về giá trị của thuộc tính <code>red</code> trong object <code>colorConfig</code>. </p></p></details><hr><h6 id="107-Ouput-la-gi"><a href="#107-Ouput-la-gi" class="headerlink" title="107. Ouput là gì?"></a>107. Ouput là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'❤️'</span> === <span class="string">'❤️'</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>true</code></li><li>B: <code>false</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-31"><a href="#Dap-an-A-31" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p>Về cơ bản, emoji vẫn là các ký tự unicode mà thôi. Mã unicode cho hình trái tim là <code>&quot;U+2764 U+FE0F&quot;</code>. Chúng luôn luôn là một, nên phép toán đơn giản trả về <code>true</code>. </p></p></details><hr><h6 id="108-Phep-toan-nao-sau-day-lam-thay-doi-mang-goc"><a href="#108-Phep-toan-nao-sau-day-lam-thay-doi-mang-goc" class="headerlink" title="108. Phép toán nào sau đây làm thay đổi mảng gốc?"></a>108. Phép toán nào sau đây làm thay đổi mảng gốc?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> emojis = [<span class="string">'✨'</span>, <span class="string">'🥑'</span>, <span class="string">'😍'</span>]</span><br><span class="line"></span><br><span class="line">emojis.map(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="string">'✨'</span>)</span><br><span class="line">emojis.filter(<span class="function"><span class="params">x</span> =&gt;</span> x !== <span class="string">'🥑'</span>)</span><br><span class="line">emojis.find(<span class="function"><span class="params">x</span> =&gt;</span> x !== <span class="string">'🥑'</span>)</span><br><span class="line">emojis.reduce(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> acc + <span class="string">'✨'</span>)</span><br><span class="line">emojis.slice(<span class="number">1</span>, <span class="number">2</span>, <span class="string">'✨'</span>) </span><br><span class="line">emojis.splice(<span class="number">1</span>, <span class="number">2</span>, <span class="string">'✨'</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>All of them</code></li><li>B: <code>map</code> <code>reduce</code> <code>slice</code> <code>splice</code></li><li>C: <code>map</code> <code>slice</code> <code>splice</code> </li><li>D: <code>splice</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-D-15"><a href="#Dap-an-D-15" class="headerlink" title="Đáp án: D"></a>Đáp án: D</h4><p>Với <code>splice</code>, ta thay đổi mảng gốc bằng cách thêm sửa xóa các phần tử. Trong trường hợp này ta xóa 2 phần tử kể từ index 1 (ta xóa <code>&#39;🥑&#39;</code> và <code>&#39;😍&#39;</code>) và thêm vào ✨ emoji. </p><p><code>map</code>, <code>filter</code> và <code>slice</code> trả về một mảng mới, <code>find</code> trả về một phần tử, và <code>reduce</code> trả về giá trị tích lũy.</p></p></details><hr><h6 id="109-Output-la-gi"><a href="#109-Output-la-gi" class="headerlink" title="109. Output là gì?"></a>109. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> food = [<span class="string">'🍕'</span>, <span class="string">'🍫'</span>, <span class="string">'🥑'</span>, <span class="string">'🍔'</span>]</span><br><span class="line"><span class="keyword">const</span> info = &#123; <span class="attr">favoriteFood</span>: food[<span class="number">0</span>] &#125;</span><br><span class="line"></span><br><span class="line">info.favoriteFood = <span class="string">'🍝'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(food)</span><br></pre></td></tr></table></figure><ul><li>A: <code>[&#39;🍕&#39;, &#39;🍫&#39;, &#39;🥑&#39;, &#39;🍔&#39;]</code></li><li>B: <code>[&#39;🍝&#39;, &#39;🍫&#39;, &#39;🥑&#39;, &#39;🍔&#39;]</code></li><li>C: <code>[&#39;🍝&#39;, &#39;🍕&#39;, &#39;🍫&#39;, &#39;🥑&#39;, &#39;🍔&#39;]</code> </li><li>D: <code>ReferenceError</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-32"><a href="#Dap-an-A-32" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p>Trong Javascript tất cả các kiểu cơ bản (mọi thứ không phải object) đều tương tác bằng <em>giá trị</em>. Chúng ta set giá trị của thuộc tính <code>favoriteFood</code> trong object <code>info</code> bằng ký tự bánh pizza, <code>&#39;🍕&#39;</code>. Chuỗi trong javascript là một kiểu cơ bản, nên nó cũng sẽ tương tác bằng giá trị.</p><p>Bản thân mảng <code>food</code> không hề thay đổi, do giá trị của <code>favoriteFood</code> chỉ là một bản <em>copy</em> của giá trị đầu tiên trong mảng mà thôi, và không hề trỏ tới reference của <code>food[0]</code>. Do đó khi ghi ra, giá trị của mảng vẫn là giá trị ban đầu, <code>[&#39;🍕&#39;, &#39;🍫&#39;, &#39;🥑&#39;, &#39;🍔&#39;]</code>.</p></p></details><hr><h6 id="110-Phep-toan-nay-dung-de-lam-gi"><a href="#110-Phep-toan-nay-dung-de-lam-gi" class="headerlink" title="110. Phép toán này dùng để làm gì?"></a>110. Phép toán này dùng để làm gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.parse()</span><br></pre></td></tr></table></figure><ul><li>A: Parse JSON thành một giá trị JavaScript</li><li>B: Parse một JavaScript object thành JSON</li><li>C: Parse giá trị JavaScript bất kì thành JSON</li><li>D: Parse JSON thành một JavaScript object</li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-33"><a href="#Dap-an-A-33" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p>Với phương thức <code>JSON.parse()</code>, ta sẽ parse một chuỗi JSON thành một giá trị JavaScript. </p><p>Ví dụ:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Chuyển một số thành một chuỗi JSON, sau đó parse chuỗi JSON đó để trả về một giá trị JavaScript:</span></span><br><span class="line"><span class="keyword">const</span> jsonNumber = <span class="built_in">JSON</span>.stringify(<span class="number">4</span>) <span class="comment">// '4'</span></span><br><span class="line"><span class="built_in">JSON</span>.parse(jsonNumber) <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Chuyển một mảng thành một chuỗi JSON, sau đó parse chuỗi JSON để trả về một giá trị JavaScript:</span></span><br><span class="line"><span class="keyword">const</span> jsonArray = <span class="built_in">JSON</span>.stringify([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment">// '[1, 2, 3]'</span></span><br><span class="line"><span class="built_in">JSON</span>.parse(jsonArray) <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Chuyển một object thành một chuỗi JSON, sau đó parse chuỗi JSON để trả về một giá trị JavaScript:</span></span><br><span class="line"><span class="keyword">const</span> jsonArray = <span class="built_in">JSON</span>.stringify(&#123; <span class="attr">name</span>: <span class="string">"Lydia"</span> &#125;) <span class="comment">// '&#123;"name":"Lydia"&#125;'</span></span><br><span class="line"><span class="built_in">JSON</span>.parse(jsonArray) <span class="comment">// &#123; name: 'Lydia' &#125;</span></span><br></pre></td></tr></table></figure></p></details><hr><h6 id="111-Ouput-la-gi"><a href="#111-Ouput-la-gi" class="headerlink" title="111. Ouput là gì?"></a>111. Ouput là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'Lydia'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name)</span><br><span class="line">  <span class="keyword">let</span> name = <span class="string">'Sarah'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getName()</span><br></pre></td></tr></table></figure><ul><li>A: Lydia</li><li>B: Sarah</li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-D-16"><a href="#Dap-an-D-16" class="headerlink" title="Đáp án: D"></a>Đáp án: D</h4><p>Mỗi hàm sẽ có một <em>context thực thi</em> (hay <em>scope</em>) của riêng nó. Hàm <code>getName</code> đầu tiên sẽ tìm trong context của nó (scope) để tìm xem có biến nào tên là <code>name</code> hay không. Trong trường hợp này, hàm <code>getName</code> có biến <code>name</code> được khai báo với từ khóa <code>let</code>, giá trị là <code>&#39;Sarah&#39;</code>. </p><p>Một biến được khai báo với từ khóa <code>let</code> (hoặc <code>const</code>) sẽ được <code>hoisted</code>, nhưng không giống như <code>var</code>, nó sẽ không được <em>khởi tạo</em>. Nó sẽ không thể truy cập được trước dòng ta khai báo (initialize). Nó được gọi là “temporal dead zone”. Khi ta cố truy cập một biến trước khi nó được khai báo, JavaScript sẽ throw ra <code>ReferenceError</code>. </p><p>Nếu ta không khai báo biến <code>name</code> bên trong hàm <code>getName</code>, thì Javascript engine sẽ tiếp tục tìm kiếm trong <em>scope chain</em>. Nó sẽ tìm thấy ở scope phía ngoài một biến <code>name</code> với giá trị là <code>Lydia</code>. Trong trường hợp này nó sẽ log ra <code>Lydia</code>. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'Lydia'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getName() <span class="comment">// Lydia</span></span><br></pre></td></tr></table></figure></p></details><hr><h6 id="112-Output-la-gi"><a href="#112-Output-la-gi" class="headerlink" title="112. Output là gì?"></a>112. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorOne</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorTwo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span>* [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> one = generatorOne()</span><br><span class="line"><span class="keyword">const</span> two = generatorTwo()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(one.next().value)</span><br><span class="line"><span class="built_in">console</span>.log(two.next().value)</span><br></pre></td></tr></table></figure><ul><li>A: <code>a</code> and <code>a</code></li><li>B: <code>a</code> and <code>undefined</code></li><li>C: <code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code> and <code>a</code></li><li>D: <code>a</code> and <code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-32"><a href="#Dap-an-C-32" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Với từ khóa <code>yield</code>, ta sẽ trả về các giá trị trong một <code>generator</code>. Với từ khóa <code>yield*</code>, ta có thể trả về giá trị từ một <code>engerator</code> khác, hoặc một <code>iterable object</code> (ví dụ mảng).</p><p>Trong <code>generatorOne</code>, ta trả về toàn bộ mảng <code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code> sử dụng từ khóa <code>yield</code>. Giá trị của thuộc tính <code>value</code> trong object thu được bởi phương thức <code>next</code> trong <code>one</code> (<code>one.next().value</code>) là toàn bộ mảng <code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(one.next().value) <span class="comment">// ['a', 'b', 'c']</span></span><br><span class="line"><span class="built_in">console</span>.log(one.next().value) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>Trong <code>generatorTwo</code>, ta sử dụng từ khóa <code>yield*</code>. Có nghĩa là giá trị đầu tiên mà <code>two</code> trả về là giá trị đầu tiên trong <code>iterator</code>. Trong trường hợp này <code>iterator</code> của chúng ta là mảng <code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code>. Giá trị đầu tiên của mảng là <code>a</code>, nên lần đầu tiên khi ta gọi <code>two.next().value</code>, <code>a</code> sẽ được trả về. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(two.next().value) <span class="comment">// 'a'</span></span><br><span class="line"><span class="built_in">console</span>.log(two.next().value) <span class="comment">// 'b'</span></span><br><span class="line"><span class="built_in">console</span>.log(two.next().value) <span class="comment">// 'c'</span></span><br><span class="line"><span class="built_in">console</span>.log(two.next().value) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></p></details><hr><h6 id="113-Output-la-gi"><a href="#113-Output-la-gi" class="headerlink" title="113. Output là gì?"></a>113. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;(x =&gt; x)(<span class="string">'I love'</span>)&#125;</span> to program`</span>)</span><br></pre></td></tr></table></figure><ul><li>A: <code>I love to program</code></li><li>B: <code>undefined to program</code></li><li>C: <code>${(x =&gt; x)(&#39;I love&#39;) to program</code></li><li>D: <code>TypeError</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-34"><a href="#Dap-an-A-34" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p>Biểu thức bên trong chuỗi template (tức chuỗi nằm trong hai dấu ``, gọi là <code>template literals</code>) sẽ được đánh giá trước. Sau đó kết quả của biểu thức sẽ được đưa vào chuỗi, trong trường hợp này biểu thức là <code>(x =&gt; x)(&#39;I love&#39;)</code>. Chúng ta truyền giá trị đối số <code>&#39;I love&#39;</code> cho một arrow function <code>x =&gt; x</code>. <code>x</code> lúc này là <code>&#39;I love&#39;</code>, và trả về chính nó. Cuối cùng kết quả của chuỗi là <code>I love to program</code>. </p></p></details><hr><h6 id="114-Dieu-gi-se-xay-ra"><a href="#114-Dieu-gi-se-xay-ra" class="headerlink" title="114. Điều gì sẽ xảy ra?"></a>114. Điều gì sẽ xảy ra?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> config = &#123;</span><br><span class="line">  alert: setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Alert!'</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">config = <span class="literal">null</span></span><br></pre></td></tr></table></figure><ul><li>A: Callback <code>setInterval</code> sẽ không được gọi</li><li>B: Callback <code>setInterval</code> sẽ được gọi một lần duy nhất</li><li>C: Callback <code>setInterval</code> vẫn sẽ được gọi mỗi giây một lần</li><li>D: <code>config.alert()</code> không bao giờ được gọi bởi config là <code>null</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-33"><a href="#Dap-an-C-33" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Thông thường khi ta set một object bằng <code>null</code>, thì object này sẽ được bộ dọn rác dọn đi do không còn gì reference đến nó nữa (<em>garbage collected</em>). Tuy nhiên, do callback trong <code>setInterval</code> là một arrow function (do đó nó sẽ gắn với object <code>config</code>), nên callback này vẫn sẽ giữ reference đến object <code>config</code>. Vì vẫn còn giữ reference, nên object sẽ không bị dọn đi. Do đó nó vẫn sẽ được gọi sau mỗi 1000ms (tức 1 giây).</p></p></details><hr><h6 id="115-Nhung-ham-nao-se-tra-ve-39-Hello-world-39"><a href="#115-Nhung-ham-nao-se-tra-ve-39-Hello-world-39" class="headerlink" title="115. Những hàm nào sẽ trả về &#39;Hello world!&#39;?"></a>115. Những hàm nào sẽ trả về <code>&#39;Hello world!&#39;</code>?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line"><span class="keyword">const</span> myFunc = <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">'greeting'</span></span><br><span class="line"></span><br><span class="line">myMap.set(myFunc, <span class="string">'Hello world!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line">myMap.get(<span class="string">'greeting'</span>)</span><br><span class="line"><span class="comment">//2</span></span><br><span class="line">myMap.get(myFunc)</span><br><span class="line"><span class="comment">//3</span></span><br><span class="line">myMap.get(<span class="function"><span class="params">()</span> =&gt;</span> <span class="string">'greeting'</span>)</span><br></pre></td></tr></table></figure><ul><li>A: 1</li><li>B: 2</li><li>C: 2 và 3</li><li>D: Tất cả</li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-28"><a href="#Dap-an-B-28" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p>Khi ta thêm vào một cặp key/value với từ khóa <code>set</code>, key sẽ là đối số đầu tiên đưa vào trong hàm <code>set</code> function, và value sẽ là đối số thứ hai.Trong trường hơp này key chính là <em>hàm</em> <code>() =&gt; &#39;greeting&#39;</code>, value là <code>&#39;Hello world&#39;</code>. <code>myMap</code> trở thành <code>{ () =&gt; &#39;greeting&#39; =&gt; &#39;Hello world!&#39; }</code>. </p><p>1 sai, vì key là <code>() =&gt; &#39;greeting&#39;</code> chứ không phải là <code>&#39;greeting&#39;</code>.<br>3 sai, vì khi chúng ta đưa một hàm vào làm đối số trong phương thức <code>get</code>, nó sẽ được đưa vào dưới dạng <em>reference</em>. Function vốn là object, do đó 2 hàm sẽ không bao giờ là <code>strictly equal</code>, mặc dù chúng có trông giống nhau đi chăng nữa thì chúng vẫn trỏ đến các vùng nhớ khác nhau.</p></p></details><hr><h6 id="116-Output-la-gi"><a href="#116-Output-la-gi" class="headerlink" title="116. Output là gì?"></a>116. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">"Lydia"</span>,</span><br><span class="line">  age: <span class="number">21</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> changeAge = <span class="function">(<span class="params">x = &#123; ...person &#125;</span>) =&gt;</span> x.age += <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> changeAgeAndName = <span class="function">(<span class="params">x = &#123; ...person &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  x.age += <span class="number">1</span></span><br><span class="line">  x.name = <span class="string">"Sarah"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">changeAge(person)</span><br><span class="line">changeAgeAndName()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person)</span><br></pre></td></tr></table></figure><ul><li>A: <code>{name: &quot;Sarah&quot;, age: 22}</code></li><li>B: <code>{name: &quot;Sarah&quot;, age: 23}</code></li><li>C: <code>{name: &quot;Lydia&quot;, age: 22}</code></li><li>D: <code>{name: &quot;Lydia&quot;, age: 23}</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-34"><a href="#Dap-an-C-34" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Cả hai hàm <code>changeAge</code> và <code>changeAgeAndName</code> đều có tham số mặc định - nó là một <em>bản copy</em> mới của object <code>{ ...person }</code>. Object này sẽ copy tất cả những cặp key/values bên trong object <code>person</code>. </p><p>Đầu tiên, chúng ta gọi hàm <code>changeAge</code> và đưa chính object <code>person</code> vào làm đối số. Hàm này sẽ tăng giá trị của thuộc tính <code>age</code> lên 1. <code>person</code> lúc này là <code>{ name: &quot;Lydia&quot;, age: 22 }</code>.</p><p>Sau đó, chúng ta gọi hàm <code>changeAgeAndName</code> tuy nhiên không đưa vào đối số nào cả. Do đó giá trị của <code>x</code> lúc này sẽ là giá trị mặc định, tức một bản <em>copy</em> của object <code>{ ...person }</code>. Do nó chỉ là một bản copy (tức object mới), nên nó không ảnh hưởng gì tới giá trị của object <code>person</code> gốc, giá trị của <code>person</code> gốc sẽ vẫn là <code>{ name: &quot;Lydia&quot;, age: 22 }</code>.</p></p></details><hr><h6 id="117-Phep-tinh-nao-duoi-day-tra-ve-6"><a href="#117-Phep-tinh-nao-duoi-day-tra-ve-6" class="headerlink" title="117. Phép tính nào dưới đây trả về 6?"></a>117. Phép tính nào dưới đây trả về <code>6</code>?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumValues</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + y + z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>sumValues([...1, 2, 3])</code></li><li>B: <code>sumValues([...[1, 2, 3]])</code></li><li>C: <code>sumValues(...[1, 2, 3])</code></li><li>D: <code>sumValues([1, 2, 3])</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-35"><a href="#Dap-an-C-35" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Với toán tử ba chấm (<code>spread operator</code>) <code>...</code>, chúng ta có thể unpack một iterable thành từng các phần tử riêng biệt. Hàm <code>sumValues</code> nhận vào 3 giá trị: <code>x</code>, <code>y</code> và <code>z</code>. <code>...[1, 2, 3]</code> sẽ trả về <code>1, 2, 3</code>, đưa vào <code>sumValues</code> sẽ cho ta kết quả là 6.</p></p></details><hr><h6 id="118-Output-la-gi"><a href="#118-Output-la-gi" class="headerlink" title="118. Output là gì?"></a>118. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> list = [<span class="string">"🥳"</span>, <span class="string">"🤠"</span>, <span class="string">"🥰"</span>, <span class="string">"🤪"</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(list[(num += <span class="number">1</span>)]);</span><br></pre></td></tr></table></figure><ul><li>A: <code>🤠</code></li><li>B: <code>🥰</code></li><li>C: <code>SyntaxError</code></li><li>D: <code>ReferenceError</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-29"><a href="#Dap-an-B-29" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p>Với phép toán <code>+=</code>, Ta tăng giá trị của <code>num</code> lên <code>1</code>. <code>num</code> có giá trị khởi tạo là <code>1</code>, do đó <code>1 + 1</code> là <code>2</code>. Phần tử thứ hai của <code>list</code> là 🥰, do đó <code>console.log(list[2])</code> sẽ in ra 🥰.</p></p></details><hr><h6 id="119-Output-la-gi"><a href="#119-Output-la-gi" class="headerlink" title="119. Output là gì?"></a>119. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">firstName: <span class="string">"Lydia"</span>,</span><br><span class="line">lastName: <span class="string">"Hallie"</span>,</span><br><span class="line">pet: &#123;</span><br><span class="line">name: <span class="string">"Mara"</span>,</span><br><span class="line">breed: <span class="string">"Dutch Tulip Hound"</span></span><br><span class="line">&#125;,</span><br><span class="line">getFullName() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.firstName&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>.lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.pet?.name);</span><br><span class="line"><span class="built_in">console</span>.log(person.pet?.family?.name);</span><br><span class="line"><span class="built_in">console</span>.log(person.getFullName?.());</span><br><span class="line"><span class="built_in">console</span>.log(member.getLastName?.());</span><br></pre></td></tr></table></figure><ul><li>A: <code>undefined</code> <code>undefined</code> <code>undefined</code> <code>undefined</code></li><li>B: <code>Mara</code> <code>undefined</code> <code>Lydia Hallie</code> <code>undefined</code></li><li>C: <code>Mara</code> <code>null</code> <code>Lydia Hallie</code> <code>null</code></li><li>D: <code>null</code> <code>ReferenceError</code> <code>null</code> <code>ReferenceError</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-30"><a href="#Dap-an-B-30" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p>Với phép toán optional chaining <code>?.</code>, chúng ta sẽ không cần phải check xem giá trị phía sau nó có được phép truy cập hay có tồn tại hay không. Nếu ta cố lấy một thuộc tính của <code>undefined</code> hay <code>null</code> (<em>nullish</em>), biểu thức sẽ dừng lại và trả về <code>undefined</code>.</p><p><code>person.pet?.name</code>: <code>person</code> có thuộc tính <code>pet</code>: do đó <code>person.pet</code> không phải là một nullish. Nó có một thuộc tính <code>name</code>, với giá trị <code>Mara</code>.</p><p><code>person.pet?.family?.name</code>: <code>person</code> có thuộc tính <code>pet</code>: do đó <code>person.pet</code> không phải là nullish. Tuy nhiên <code>pet</code> không có thuộc tính <code>family</code>, nên <code>person.pet.family</code> là nullish. Biểu thức sẽ trả về <code>undefined</code>.</p><p><code>person.getFullName?.()</code>: <code>person</code> có thuộc tính <code>getFullName</code>: do đó <code>person.getFullName()</code> không phải nullish và có thể gọi ra, trả về <code>Lydia Hallie</code>.</p><p><code>member.getLastName?.()</code>: <code>member</code> không được định nghĩa: do đó <code>member.getLastName()</code> là nullish. Biểu thức trả về <code>undefined</code>.</p></p></details><hr><h6 id="120-Ouput-la-gi"><a href="#120-Ouput-la-gi" class="headerlink" title="120. Ouput là gì?"></a>120. Ouput là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> groceries = [<span class="string">"banana"</span>, <span class="string">"apple"</span>, <span class="string">"peanuts"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (groceries.indexOf(<span class="string">"banana"</span>)) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"We have to buy bananas!"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`We don't have to buy bananas!`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: We have to buy bananas!</li><li>B: We don’t have to buy bananas</li><li>C: <code>undefined</code></li><li>D: <code>1</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-31"><a href="#Dap-an-B-31" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p>Ta đưa một điều kiện <code>groceries.indexOf(&quot;banana&quot;)</code> vào câu lệnh <code>if</code>. <code>groceries.indexOf(&quot;banana&quot;)</code> trả về <code>0</code>, là một giá trị <code>falsy</code>. Do đó điệu kiện <code>if</code> sẽ chạy vào khối <code>else</code> và in ra <code>We don&#39;t have to buy bananas!</code>.</p></p></details><hr><h6 id="121-Ouput-la-gi"><a href="#121-Ouput-la-gi" class="headerlink" title="121. Ouput là gì?"></a>121. Ouput là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">languages: [],</span><br><span class="line"><span class="keyword">set</span> language(lang) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.languages.push(lang);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(config.language);</span><br></pre></td></tr></table></figure><ul><li>A: <code>function language(lang) { this.languages.push(lang }</code></li><li>B: <code>0</code></li><li>C: <code>[]</code></li><li>D: <code>undefined</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-D-17"><a href="#Dap-an-D-17" class="headerlink" title="Đáp án: D"></a>Đáp án: D</h4><p>Phương thức <code>language</code> là một <code>setter</code>. Setter không mang giá trị, nhiệm vụ của nó chỉ đơn giản là <em>thay đổi</em> thuộc tính. Khi ta gọi một phương thức <code>setter</code> nó sẽ trả về <code>undefined</code>.</p></p></details><hr><h6 id="122-Output-la-gi"><a href="#122-Output-la-gi" class="headerlink" title="122. Output là gì?"></a>122. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">"Lydia Hallie"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(!<span class="keyword">typeof</span> name === <span class="string">"object"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(!<span class="keyword">typeof</span> name === <span class="string">"string"</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>false</code> <code>true</code></li><li>B: <code>true</code> <code>false</code></li><li>C: <code>false</code> <code>false</code></li><li>D: <code>true</code> <code>true</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-36"><a href="#Dap-an-C-36" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p><code>typeof name</code> trả về <code>&quot;string&quot;</code>. Chuỗi <code>&quot;string&quot;</code> là một giá trị <code>truthy</code>, do đó <code>!typeof name</code> sẽ trả về một giá trị bool là <code>false</code>. Do đó <code>false === &quot;object&quot;</code> và <code>false === &quot;string&quot;</code> đều trả về<code>false</code>.</p><p>(Nếu chúng ta muốn check xem một kiểu dữ liệu không phải là một kiểu nào đó, chúng ta nên viết <code>!==</code> thay vì <code>!typeof</code>)</p></p></details><hr><h6 id="123-Output-la-gi"><a href="#123-Output-la-gi" class="headerlink" title="123. Output là gì?"></a>123. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function"><span class="params">x</span> =&gt;</span> <span class="function"><span class="params">y</span> =&gt;</span> <span class="function"><span class="params">z</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(x, y, z);</span><br><span class="line"><span class="keyword">return</span> x + y + z;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">add(<span class="number">4</span>)(<span class="number">5</span>)(<span class="number">6</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>4</code> <code>5</code> <code>6</code></li><li>B: <code>6</code> <code>5</code> <code>4</code></li><li>C: <code>4</code> <code>function</code> <code>function</code></li><li>D: <code>undefined</code> <code>undefined</code> <code>6</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-35"><a href="#Dap-an-A-35" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p>Hàm <code>add</code> trả về một arrow function, arrow function này lại trả về một arrow function khác, arrow function này lại trả về một arrow function khác nữa. Hàm đầu tiên nhận vào một tham số <code>x</code> với giá trị là 4 <code>4</code>. Chúng ta gọi hàm thứ hai, nhận vào giá trị của <code>y</code> là <code>5</code>. Sau đó chúng ta gọi hàm thứ 3, nhận vào giá trị của <code>z</code> là <code>6</code>. Sau đó ta truy cập các giá trị của <code>x</code>, <code>y</code> và <code>z</code> bên trong arrow function cuối cùng, khi này JS engine sẽ lần ngược lại scope chain để tìm các giá trị <code>x</code> và <code>y</code> tương ứng. Do đó cuối cùng nó sẽ trả về <code>4</code> <code>5</code> <code>6</code>.</p></p></details><hr><h6 id="124-Output-la-gi"><a href="#124-Output-la-gi" class="headerlink" title="124. Output là gì?"></a>124. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span>* <span class="title">range</span>(<span class="params">start, end</span>) </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="built_in">Promise</span>.resolve(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> gen = range(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> item <span class="keyword">of</span> gen) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><ul><li>A: <code>Promise {1}</code> <code>Promise {2}</code> <code>Promise {3}</code></li><li>B: <code>Promise {&lt;pending&gt;}</code> <code>Promise {&lt;pending&gt;}</code> <code>Promise {&lt;pending&gt;}</code></li><li>C: <code>1</code> <code>2</code> <code>3</code></li><li>D: <code>undefined</code> <code>undefined</code> <code>undefined</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-37"><a href="#Dap-an-C-37" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Generator <code>range</code> trả về một async object với các promise tương ứng với mỗi phần tử ta đưa vào: <code>Promise{1}</code>, <code>Promise{2}</code>, <code>Promise{3}</code>. Ta set giá trị <code>gen</code> bằng với một async object để thực hiện vòng lặp <code>for await ... of</code> sau đó. Tiếp đó ta lại set giá trị của <code>item</code> bằng với giá trị trả về của mỗi promise: đầu tiên là <code>Promise{1}</code>, sau đó <code>Promise{2}</code>, sau đó <code>Promise{3}</code>. Do chúng ta sử dụng cú pháp <code>async/await</code> nên sẽ trả về giá trị đã được resolve của promise <code>item</code>, do đó lần lượt <code>1</code>, <code>2</code>, và <code>3</code> được in ra.</p></p></details><hr><h6 id="125-Output-la-gi"><a href="#125-Output-la-gi" class="headerlink" title="125. Output là gì?"></a>125. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myFunc = <span class="function">(<span class="params">&#123; x, y, z &#125;</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(x, y, z);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">myFunc(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>1</code> <code>2</code> <code>3</code></li><li>B: <code>{1: 1}</code> <code>{2: 2}</code> <code>{3: 3}</code></li><li>C: <code>{ 1: undefined }</code> <code>undefined</code> <code>undefined</code></li><li>D: <code>undefined</code> <code>undefined</code> <code>undefined</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-D-18"><a href="#Dap-an-D-18" class="headerlink" title="Đáp án: D"></a>Đáp án: D</h4><p><code>myFunc</code> nhận vào một object có các thuộc tính <code>x</code>, <code>y</code> và <code>z</code> làm đối số của nó. Do chúng ta đưa vào 3 số riêng biệt (1, 2, 3) chứ không phải một object với các thuộc tính <code>x</code>, <code>y</code>, <code>z</code> như ({x: 1, y: 2, z: 3}), nên <code>x</code>, <code>y</code>, <code>z</code> đều có giá trị là <code>undefined</code>.</p></p></details><hr><h6 id="126-Output-la-gi"><a href="#126-Output-la-gi" class="headerlink" title="126. Output là gì?"></a>126. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFine</span>(<span class="params">speed, amount</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> formattedSpeed = <span class="keyword">new</span> <span class="built_in">Intl</span>.NumberFormat(&#123;</span><br><span class="line">    <span class="string">'en-US'</span>,</span><br><span class="line">    &#123; <span class="attr">style</span>: <span class="string">'unit'</span>, <span class="attr">unit</span>: <span class="string">'mile-per-hour'</span> &#125;</span><br><span class="line">  &#125;).format(speed)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> formattedAmount = <span class="keyword">new</span> <span class="built_in">Intl</span>.NumberFormat(&#123;</span><br><span class="line">    <span class="string">'en-US'</span>,</span><br><span class="line">    &#123; <span class="attr">style</span>: <span class="string">'currency'</span>, <span class="attr">currency</span>: <span class="string">'USD'</span> &#125;</span><br><span class="line">  &#125;).format(amount)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`The driver drove <span class="subst">$&#123;formattedSpeed&#125;</span> and has to pay <span class="subst">$&#123;formattedAmount&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getFine(<span class="number">130</span>, <span class="number">300</span>))</span><br></pre></td></tr></table></figure><ul><li>A: The driver drove 130 and has to pay 300</li><li>B: The driver drove 130 mph and has to pay $300.00</li><li>C: The driver drove undefined and has to pay undefined</li><li>D: The driver drove 130.00 and has to pay 300.00</li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-32"><a href="#Dap-an-B-32" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p>Với phương thức <code>Intl.NumberFormat</code>, chúng ta có thể format bất cứ số nào theo định dạng ta mong muốn. Ở đây ta format giá trị <code>130</code> theo định dạng <code>en-US</code>, kiểu <code>unit</code>, đơn vị là <code>mile-per-hour</code>, và nó sẽ trả về <code>130 mph</code>. Tiếp theo số <code>300</code> sẽ được format theo định dạng <code>en-US</code>, kiểu <code>currentcy</code>, đơn vị <code>USD</code>, và kết quả là <code>$300.00</code>.</p></p></details><hr><h6 id="127-Output-la-gi"><a href="#127-Output-la-gi" class="headerlink" title="127. Output là gì?"></a>127. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> spookyItems = [<span class="string">"👻"</span>, <span class="string">"🎃"</span>, <span class="string">"🕸"</span>];</span><br><span class="line">(&#123; <span class="attr">item</span>: spookyItems[<span class="number">3</span>] &#125; = &#123; <span class="attr">item</span>: <span class="string">"💀"</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(spookyItems);</span><br></pre></td></tr></table></figure><ul><li>A: <code>[&quot;👻&quot;, &quot;🎃&quot;, &quot;🕸&quot;]</code></li><li>B: <code>[&quot;👻&quot;, &quot;🎃&quot;, &quot;🕸&quot;, &quot;💀&quot;]</code></li><li>C: <code>[&quot;👻&quot;, &quot;🎃&quot;, &quot;🕸&quot;, { item: &quot;💀&quot; }]</code></li><li>D: <code>[&quot;👻&quot;, &quot;🎃&quot;, &quot;🕸&quot;, &quot;[object Object]&quot;]</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-33"><a href="#Dap-an-B-33" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p>Khi tiến hành cú pháp destructuring object, chúng ta có thể unpack các giá trị ở phía phải của một object, và đưa giá trị đã được unpack đó làm giá trị của thuộc tính tương ứng của object phía trái. Trong trường hợp này, ta đã gán giá trị “💀” cho <code>spookyItems[3]</code>. Có nghĩa là mảng <code>spookyItems</code> đã bị thay đổi, chúng ta đã thêm vào nó một phần tử “💀”. Do đó khi in ra thì kết quả sẽ là <code>[&quot;👻&quot;, &quot;🎃&quot;, &quot;🕸&quot;, &quot;💀&quot;]</code> .</p></p></details><hr><h6 id="128-Output-la-gi"><a href="#128-Output-la-gi" class="headerlink" title="128. Output là gì?"></a>128. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">"Lydia Hallie"</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(name));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isNaN(age));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(name));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(age));</span><br></pre></td></tr></table></figure><ul><li>A: <code>true</code> <code>false</code> <code>true</code> <code>false</code></li><li>B: <code>true</code> <code>false</code> <code>false</code> <code>false</code></li><li>C: <code>false</code> <code>false</code> <code>true</code> <code>false</code></li><li>D: <code>false</code> <code>true</code> <code>false</code> <code>true</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-38"><a href="#Dap-an-C-38" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Với phương thức <code>Number.isNaN</code>, ta có thể check một giá trị có phải là <em>dạng số</em> và bằng <code>NaN</code> hay không. <code>name</code> không phải là một số, do đó <code>Number.isNaN(name)</code> sẽ trả về <code>false</code>. <code>age</code> là một số, nhưng không bằng <code>NaN</code>, do đó <code>Number.isNaN(age)</code> cũng trả về <code>false</code>.<br>Với phương thức <code>isNaN</code>, ta đơn thuần chỉ check xem giá trị đưa vào không phải là <em>dạng số</em> hay không. <code>name</code> không phải là dạng số, nên <code>isNaN(name)</code> trả về <code>true</code>. <code>age</code> là số, nên <code>isNaN(age)</code> trả về <code>false</code>.</p></p></details><hr><h6 id="129-Output-la-gi"><a href="#129-Output-la-gi" class="headerlink" title="129. Output là gì?"></a>129. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> randomValue = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> randomValue);</span><br><span class="line"><span class="keyword">const</span> randomValue = <span class="string">"Lydia Hallie"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getInfo();</span><br></pre></td></tr></table></figure><ul><li>A: <code>&quot;number&quot;</code></li><li>B: <code>&quot;string&quot;</code></li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-D-19"><a href="#Dap-an-D-19" class="headerlink" title="Đáp án: D"></a>Đáp án: D</h4><p>Một biến được khai báo với từ khóa <code>const</code> sẽ không thể truy cập trước khi nó được khởi tạo: nó gọi là <em>temporal dead zone</em>. Trong hàm <code>getInfo</code>, giá trị <code>randomValue</code> sẽ được tìm kiếm đầu tiên trong scope của hàm <code>getInfo</code>. Tại dòng ta muốn lấy ra <code>typeof randomValue</code>, giá trị <code>randomValue</code> chưa được khởi tạo, do đó một <code>ReferenceError</code> sẽ được throw ra! Lưu ý nhỏ là Javascript engine sẽ không tìm kiếm ở scope khác nữa do <code>randomValue</code> đã được khai báo bên trong hàm <code>getInfo</code>.</p></p></details><hr><h6 id="130-Ouput-la-gi"><a href="#130-Ouput-la-gi" class="headerlink" title="130. Ouput là gì?"></a>130. Ouput là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myPromise = <span class="built_in">Promise</span>.resolve(<span class="string">"Woah some cool data"</span>);</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">await</span> myPromise);</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Oops didn't work`</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Oh finally!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><ul><li>A: <code>Woah some cool data</code></li><li>B: <code>Oh finally!</code></li><li>C: <code>Woah some cool data</code> <code>Oh finally!</code></li><li>D: <code>Oops didn&#39;t work</code> <code>Oh finally!</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-39"><a href="#Dap-an-C-39" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Trong khối <code>try</code>, ta in ra giá trị của biến <code>myPromise</code>: <code>&quot;Woah some cool data&quot;</code>. Do không có lỗi gì xảy ra ở đây cả, nên các lệnh trong khối <code>catch</code> sẽ không được chạy. Tuy nhiên các lệnh trong khối <code>finally</code> thì sẽ <em>luôn luôn</em> chạy, nên <code>&quot;Oh finally!&quot;</code> sẽ được in ra.</p></p></details><hr><h6 id="131-Output-la-gi"><a href="#131-Output-la-gi" class="headerlink" title="131. Output là gì?"></a>131. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> emojis = [<span class="string">"🥑"</span>, [<span class="string">"✨"</span>, <span class="string">"✨"</span>, [<span class="string">"🍕"</span>, <span class="string">"🍕"</span>]]];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(emojis.flat(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><ul><li>A: <code>[&#39;🥑&#39;, [&#39;✨&#39;, &#39;✨&#39;, [&#39;🍕&#39;, &#39;🍕&#39;]]]</code></li><li>B: <code>[&#39;🥑&#39;, &#39;✨&#39;, &#39;✨&#39;, [&#39;🍕&#39;, &#39;🍕&#39;]]</code></li><li>C: <code>[&#39;🥑&#39;, [&#39;✨&#39;, &#39;✨&#39;, &#39;🍕&#39;, &#39;🍕&#39;]]</code></li><li>D: <code>[&#39;🥑&#39;, &#39;✨&#39;, &#39;✨&#39;, &#39;🍕&#39;, &#39;🍕&#39;]</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-34"><a href="#Dap-an-B-34" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p>Với phương thức <code>flat</code>, ta có thể tạo một mảng mới với các phần tử đã được <code>flattened</code> (làm phẳng). Độ sâu của mảng đã làm phẳng sẽ phụ thuộc vào giá trị ta đưa vào. Trong trường hợp này ta đưa vào là <code>1</code> (thực ra đây là giá trị default, ta không đưa vào cũng không sao), có nghĩa là chỉ những phần tử ở độ sâu 1 sẽ được làm phẳng. Chúng là<code>[&#39;🥑&#39;]</code> và <code>[&#39;✨&#39;, &#39;✨&#39;, [&#39;🍕&#39;, &#39;🍕&#39;]]</code> trong trường hợp này. Nối lại ta sẽ có mảng mới <code>[&#39;🥑&#39;, &#39;✨&#39;, &#39;✨&#39;, [&#39;🍕&#39;, &#39;🍕&#39;]]</code>.</p></p></details><hr><h6 id="132-Output-la-gi"><a href="#132-Output-la-gi" class="headerlink" title="132. Output là gì?"></a>132. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>() &#123;</span><br><span class="line"><span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">increment() &#123;</span><br><span class="line"><span class="keyword">this</span>.count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counterOne = <span class="keyword">new</span> Counter();</span><br><span class="line">counterOne.increment();</span><br><span class="line">counterOne.increment();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counterTwo = counterOne;</span><br><span class="line">counterTwo.increment();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(counterOne.count);</span><br></pre></td></tr></table></figure><ul><li>A: <code>0</code></li><li>B: <code>1</code></li><li>C: <code>2</code></li><li>D: <code>3</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-D-20"><a href="#Dap-an-D-20" class="headerlink" title="Đáp án: D"></a>Đáp án: D</h4><p><code>counterOne</code> là một instance của class <code>Counter</code>. Trong counter class có thuộc tính <code>count</code> bên trong constructor, và một phương thức <code>increment</code>. Đầu tiên chúng ta gọi phương thức <code>increment</code> hai lần bằng <code>counterOne.increment()</code>. Nên hiện tại giá trị của <code>counterOne.count</code> là <code>2</code>.</p><img src="https://i.imgur.com/KxLlTm9.png" width="400"><p>Sau đó chúng ta có thêm một biến mới là <code>counterTwo</code>, và set cho nó giá trị bằng với <code>counterOne</code>. Do object được tương tác bằng reference, nên việc này tương ứng với ta đã tạo thêm một reference đến bộ nhớ mà biến <code>counterOne</code> đã trỏ vào. Do chúng có chung bộ nhớ, bất cứ thay đổi nào trên <code>counterTwo</code> cũng sẽ thay đổi trên <code>counterOne</code>. Lúc này <code>counterTwo.count</code> cũng sẽ là <code>2</code>.</p><p>Ta gọi hàm <code>counterTwo.increment()</code> để tăng <code>count</code> lên <code>3</code>. Sau đó chúng ta in ra <code>count</code> ở <code>counterOne</code>, kết quả là <code>3</code>.</p><img src="https://i.imgur.com/BNBHXmc.png" width="400"></p></details><hr><h6 id="133-Output-la-gi"><a href="#133-Output-la-gi" class="headerlink" title="133. Output là gì?"></a>133. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myPromise = <span class="built_in">Promise</span>.resolve(<span class="built_in">Promise</span>.resolve(<span class="string">"Promise!"</span>));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcOne</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">myPromise.then(<span class="function"><span class="params">res</span> =&gt;</span> res).then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res));</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Timeout!"</span>, <span class="number">0</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Last line!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">funcTwo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> res = <span class="keyword">await</span> myPromise;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">await</span> res);</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Timeout!"</span>, <span class="number">0</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Last line!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">funcOne();</span><br><span class="line">funcTwo();</span><br></pre></td></tr></table></figure><ul><li>A: <code>Promise! Last line! Promise! Last line! Last line! Promise!</code></li><li>B: <code>Last line! Timeout! Promise! Last line! Timeout! Promise!</code></li><li>C: <code>Promise! Last line! Last line! Promise! Timeout! Timeout!</code></li><li>D: <code>Last line! Promise! Promise! Last line! Timeout! Timeout!</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-D-21"><a href="#Dap-an-D-21" class="headerlink" title="Đáp án: D"></a>Đáp án: D</h4><p>Đầu tiên chúng ta gọi <code>funcOne</code>. Trong dòng đầu tiên của <code>funcOne</code>, chúng ta gọi <code>myPromise</code>, đây là một hàm <em>bất đồng bộ</em>. Trong khi chờ promise này hoàn thành, nó sẽ tiếp tục thực thi các dòng khác trong <code>funcOne</code>. Dòng tiếp theo là cũng là một hàm <em>bất đồng bộ</em> <code>setTimeout</code>, phần callback của nó sẽ được gửi tới Web API (các bạn có thể tham khảo câu hỏi trước đó để hiểu về callstack và Web API).</p><p>Do cả promise và timeout đều là những hàm xử lý bất đồng bộ, nên trong khi chờ chúng hoàn thành thì các dòng tiếp theo vẫn tiếp tục được thực thi. Có nghĩa là <code>Last line!</code> sẽ được in ra đầu tiên, do nó là một hàm chạy <em>đồng bộ</em>. Và đây cũng là dòng cuối cùng của hàm <code>funcOne</code>, khi này promise sẽ được resolve, trả về <code>Promise!</code>. Tuy nhiên do ta tiếp tục gọi hàm <code>funcTwo()</code>, call stack của ta vẫn chưa rỗng, nên callback của <code>setTimeout</code> vẫn chưa thể được đưa vào callstack (vẫn đang năm ở Web API).</p><p>Trong hàm <code>funcTwo</code> đầu tiên ta sẽ <em>awaiting</em> myPromise. Với từ khóa <code>await</code>, Ta sẽ tạm dừng thực thi cho tới khi n ào promise được resolved (hay rejected). Khi này ta sẽ in ra giá trị của <code>res</code> (do bản thân hàm promise lại trả về một promise). Nó sẽ in ra <code>Promise!</code>.</p><p>Dòng tiếp theo lại là một hàm <em>bất đồng bộ</em> <code>setTimeout</code>, callback khi này tiếp tục được gửi tới Web API.</p><p>Ta tiếp tục thực thi dòng cuối cùng của <code>funcTwo</code>, trả về <code>Last line!</code>. Khi này <code>funcTwo</code> đã làm rỗng call stack. Các callback khi nãy (<code>() =&gt; console.log(&quot;Timeout!&quot;)</code> từ <code>funcOne</code>, và <code>() =&gt; console.log(&quot;Timeout!&quot;)</code> từ <code>funcTwo</code>) lần lượt được đưa vào trong call stack. Callback đầu tiên in ra <code>Timeout!</code>. Callback thứ hai in ra <code>Timeout!</code>. Kết quả cuối cùng sẽ là <code>Last line! Promise! Promise! Last line! Timeout! Timeout!</code></p></p></details><hr><h6 id="134-Lam-the-nao-co-the-goi-ham-sum-trong-index-js-tu-sum-js"><a href="#134-Lam-the-nao-co-the-goi-ham-sum-trong-index-js-tu-sum-js" class="headerlink" title="134. Làm thế nào có thể gọi hàm sum trong index.js từ sum.js?"></a>134. Làm thế nào có thể gọi hàm <code>sum</code> trong <code>index.js</code> từ <code>sum.js?</code></h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sum.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> sum <span class="keyword">from</span> <span class="string">"./sum"</span>;</span><br></pre></td></tr></table></figure><ul><li>A: <code>sum(4)</code></li><li>B: <code>sum.sum(4)</code></li><li>C: <code>sum.default(4)</code></li><li>D: Default aren’t imported with <code>*</code>, only named exports</li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-40"><a href="#Dap-an-C-40" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Với dấu hoa thị <code>*</code>, ta sẽ import tất cả những gì đã được export ra bởi file đó, cả default lẫn những hàm có tên. Nếu ta có một dòng như sau:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// info.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">"Lydia"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> age = <span class="number">21</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">"I love JavaScript"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> info <span class="keyword">from</span> <span class="string">"./info"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(info);</span><br></pre></td></tr></table></figure><p>Thì kết quả sẽ là:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">default</span>: <span class="string">"I love JavaScript"</span>,</span><br><span class="line">  name: <span class="string">"Lydia"</span>,</span><br><span class="line">  age: <span class="number">21</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Trong ví dụ hàm <code>sum</code>, nó giống với chúng ta đã import hàm <code>sum</code> như thế này:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">default</span>: <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x + x &#125; &#125;</span><br></pre></td></tr></table></figure><p>Ta có thể gọi hàm này bằng cách sử dụng <code>sum.default</code></p></p></details><hr><h6 id="135-Output-la-gi"><a href="#135-Output-la-gi" class="headerlink" title="135. Output là gì?"></a>135. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line"><span class="keyword">set</span>: () =&gt; console.log("Added a new property!"),</span><br><span class="line"><span class="keyword">get</span>: () =&gt; console.log("Accessed a property!")</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const person = new Proxy(&#123;&#125;, handler);</span><br><span class="line"></span><br><span class="line">person.name = <span class="string">"Lydia"</span>;</span><br><span class="line">person.name;</span><br></pre></td></tr></table></figure><ul><li>A: <code>Added a new property!</code></li><li>B: <code>Accessed a property!</code></li><li>C: <code>Added a new property!</code> <code>Accessed a property!</code></li><li>D: Nothing gets logged</li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-41"><a href="#Dap-an-C-41" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Với Proxy object, ta có thể add thêm được các hành vi (behavior) cho object bằng cách đưa nó vào làm đối số thứ hai. Trong trường hợp này, chúng ta đưa vào object <code>handler</code> có hai thuộc tính: <code>set</code> và <code>get</code>. <code>set</code> sẽ được gọi mỗi khi ta <em>thay đổi</em> giá trị của thuộc tính, <code>get</code> sẽ được gọi mỗi khi ta <em>truy cập</em> giá trị của thuộc tính.</p><p>Giá trị của <code>person</code> sẽ là đối số đầu tiên đưa vào, là một object rỗng <code>{}</code>. Hành vi của <code>person</code> là đối số thứ hai, tức <code>handler</code>. Do đó môi khi ta thêm thuộc tính của obejct <code>person</code>, <code>set</code> sẽ được gọi. Nếu ta truy cập thuộc tính của <code>person</code> thì <code>get</code> sẽ được gọi.</p><p>Đầu tiên ra thêm vào thuộc tính <code>name</code> cho proxy object (<code>person.name = &quot;Lydia&quot;</code>). <code>set</code> được gọi và in ra <code>&quot;Added a new property!&quot;</code>.</p><p>Sau đó chúng truy cập thuộc tính này, <code>get</code> được gọi và in ra <code>&quot;Accessed a property!&quot;</code>.</p></p></details><hr><h6 id="136-Cach-nao-sau-day-se-thay-doi-object-person"><a href="#136-Cach-nao-sau-day-se-thay-doi-object-person" class="headerlink" title="136. Cách nào sau đây sẽ thay đổi object person?"></a>136. Cách nào sau đây sẽ thay đổi object <code>person</code>?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">"Lydia Hallie"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.seal(person);</span><br></pre></td></tr></table></figure><ul><li>A: <code>person.name = &quot;Evan Bacon&quot;</code></li><li>B: <code>person.age = 21</code></li><li>C: <code>delete person.name</code></li><li>D: <code>Object.assign(person, { age: 21 })</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-36"><a href="#Dap-an-A-36" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p>Với <code>Object.seal</code> ta có thể ngăn <em>thêm vào</em> các thuộc tính mới, hay <em>xóa đi</em> các thuộc tính cũ.</p><p>Tuy nhiên ta vẫn có thể <em>thay đổi</em> các thuộc tính cũ.</p></p></details><hr><h6 id="137-Cach-nao-sau-day-co-the-thay-doi-object-person"><a href="#137-Cach-nao-sau-day-co-the-thay-doi-object-person" class="headerlink" title="137. Cách nào sau đây có thể thay đổi object person?"></a>137. Cách nào sau đây có thể thay đổi object <code>person</code>?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">name: <span class="string">"Lydia Hallie"</span>,</span><br><span class="line">address: &#123;</span><br><span class="line">street: <span class="string">"100 Main St"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.freeze(person);</span><br></pre></td></tr></table></figure><ul><li>A: <code>person.name = &quot;Evan Bacon&quot;</code></li><li>B: <code>delete person.address</code></li><li>C: <code>person.address.street = &quot;101 Main St&quot;</code></li><li>D: <code>person.pet = { name: &quot;Mara&quot; }</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-42"><a href="#Dap-an-C-42" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Phương thức <code>Object.freeze</code> sẽ <em>đóng băng</em> object. Ta không thể thêm/sửa/xóa bất kì thuộc tính nào.</p><p>Tuy nhiên trên thực tế đây chỉ là đóng băng <em>nông</em> (<em>shallowly</em>) object, có nghĩa là nó chỉ đóng băng các thuộc tính <em>trực tiếp</em> của object mà thôi. Nếu thuộc tính lại là một object khác, như <code>address</code> trong trường hợp này, thuộc tính bên trong của <code>address</code> sẽ không bị đóng băng, và ta vẫn có thể chỉnh sửa như bình thường.</p></p></details><hr><h6 id="138-Output-la-gi"><a href="#138-Output-la-gi" class="headerlink" title="138. Output là gì?"></a>138. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function"><span class="params">x</span> =&gt;</span> x + x;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunc</span>(<span class="params">num = <span class="number">2</span>, value = add(num</span>)) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(num, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myFunc();</span><br><span class="line">myFunc(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><ul><li>A: <code>2</code> <code>4</code> and <code>3</code> <code>6</code></li><li>B: <code>2</code> <code>NaN</code> and <code>3</code> <code>NaN</code></li><li>C: <code>2</code> <code>Error</code> and <code>3</code> <code>6</code></li><li>D: <code>2</code> <code>4</code> and <code>3</code> <code>Error</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-37"><a href="#Dap-an-A-37" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p>Đầu tiên, ta gọi hàm <code>myFunc()</code> nhưng không đưa vào đối số nào. Do đó <code>num</code> và <code>value</code> sẽ nhận các giá trị mặc định: <code>num</code> là <code>2</code>, và <code>value</code> sẽ là giá trị trả về của hàm <code>add</code>. Với hàm <code>add</code>, ta đưa <code>num</code> vào làm đối số, tức <code>2</code>. <code>add</code> trả về <code>4</code>, đây sẽ là giá trị của <code>value</code>.</p><p>Sau đó ta gọi hàm <code>myFunc(3)</code>, khi này <code>3</code> sẽ là giá trị của <code>num</code>. Ta không đưa vào giá trị cho <code>value</code>. Lúc này <code>value</code> tiếp tục nhận giá trị mặc định: giá trị trả về của hàm <code>add</code>. Trong <code>add</code>, ta đưa vào <code>num</code>, khi này là <code>3</code>. <code>add</code> sẽ trả về <code>6</code>, đây sẽ là giá trị của <code>value</code>.</p></p></details><hr><h6 id="139-Output-la-gi"><a href="#139-Output-la-gi" class="headerlink" title="139. Output là gì?"></a>139. Output là gì?</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">  #number = 10</span><br><span class="line"></span><br><span class="line">  increment() &#123;</span><br><span class="line">    this.#number++</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getNum() &#123;</span><br><span class="line">    return this.#number</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counter = <span class="keyword">new</span> Counter()</span><br><span class="line">counter.increment()</span><br><span class="line"></span><br><span class="line">console.log(counter.#number)</span><br></pre></td></tr></table></figure><ul><li>A: <code>10</code></li><li>B: <code>11</code></li><li>C: <code>undefined</code></li><li>D: <code>SyntaxError</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-D-22"><a href="#Dap-an-D-22" class="headerlink" title="Đáp án: D"></a>Đáp án: D</h4><p>Với cú pháp ES2020, ta có thể thêm các thuộc tính private vào class bằng cách sử dụng <code>#</code>. Ta không thể truy cập được biến này bên ngoài class. Khi ta in ra <code>counter.#number</code>, một SyntaxError sẽ được throw: ta không thể truy cập từ phía ngoài class <code>Counter</code>!</p></p></details><hr><h6 id="140-Cau-lenh-con-thieu-la-gi"><a href="#140-Cau-lenh-con-thieu-la-gi" class="headerlink" title="140. Câu lệnh còn thiếu là gì?"></a>140. Câu lệnh còn thiếu là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> teams = [</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">"Team 1"</span>, <span class="attr">members</span>: [<span class="string">"Paul"</span>, <span class="string">"Lisa"</span>] &#125;,</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">"Team 2"</span>, <span class="attr">members</span>: [<span class="string">"Laura"</span>, <span class="string">"Tim"</span>] &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">getMembers</span>(<span class="params">members</span>) </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; members.length; i++) &#123;</span><br><span class="line"><span class="keyword">yield</span> members[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">getTeams</span>(<span class="params">teams</span>) </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; teams.length; i++) &#123;</span><br><span class="line"><span class="comment">// ✨ SOMETHING IS MISSING HERE ✨</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = getTeams(teams);</span><br><span class="line">obj.next(); <span class="comment">// &#123; value: "Paul", done: false &#125;</span></span><br><span class="line">obj.next(); <span class="comment">// &#123; value: "Lisa", done: false &#125;</span></span><br></pre></td></tr></table></figure><ul><li>A: <code>yield getMembers(teams[i].members)</code></li><li>B: <code>yield* getMembers(teams[i].members)</code></li><li>C: <code>return getMembers(teams[i].members)</code></li><li>D: <code>return yield getMembers(teams[i].members)</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-35"><a href="#Dap-an-B-35" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p>Ta duyệt và in ra giá trị của từng member bên trong <code>members</code>, mà <code>members</code> lại nằm bên trong mảng <code>teams</code>, ta cần đưa vào đối số <code>teams[i].members</code> cho hàm generator <code>getMembers</code> trong phần code thiếu. Hàm generator sẽ trả về một generator object. Để duyệt qua từng phần tử của một generator object, ta dùng từ khóa <code>yield*</code>.</p><p>Nếu ta dùng <code>yield</code>, <code>return yield</code>, hay <code>return</code>, toàn bộ generator sẽ được trả về trong lần đầu tiên chúng ta gọi phương thức <code>next</code>.</p></p></details><hr><h6 id="141-Output-la-gi"><a href="#141-Output-la-gi" class="headerlink" title="141. Output là gì?"></a>141. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">name: <span class="string">"Lydia Hallie"</span>,</span><br><span class="line">hobbies: [<span class="string">"coding"</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addHobby</span>(<span class="params">hobby, hobbies = person.hobbies</span>) </span>&#123;</span><br><span class="line">hobbies.push(hobby);</span><br><span class="line"><span class="keyword">return</span> hobbies;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addHobby(<span class="string">"running"</span>, []);</span><br><span class="line">addHobby(<span class="string">"dancing"</span>);</span><br><span class="line">addHobby(<span class="string">"baking"</span>, person.hobbies);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.hobbies);</span><br></pre></td></tr></table></figure><ul><li>A: <code>[&quot;coding&quot;]</code></li><li>B: <code>[&quot;coding&quot;, &quot;dancing&quot;]</code></li><li>C: <code>[&quot;coding&quot;, &quot;dancing&quot;, &quot;baking&quot;]</code></li><li>D: <code>[&quot;coding&quot;, &quot;running&quot;, &quot;dancing&quot;, &quot;baking&quot;]</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-43"><a href="#Dap-an-C-43" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Hàm <code>addHobby</code> nhận vào hai đối số, <code>hobby</code>, và <code>hobbies</code> với giá trị default là mảng <code>hobbies</code> của object <code>person</code>.</p><p>Đầu tiên chúng ta gọi hàm <code>addHobby</code> và đưa vào <code>&quot;running&quot;</code> làm giá trị cho <code>hobby</code>, và một mảng rỗng cho <code>hobbies</code>. Do chúng ta đưa vào một mảng rỗng cho <code>hobbies</code>, <code>&quot;running&quot;</code> sẽ được add vào một mảng rỗng.</p><p>Sau đó chúng ta tiếp tục gọi hàm <code>addHobby</code>, đưa <code>&quot;dancing&quot;</code> vào làm giá trị cho <code>hobby</code>. Chúng ta không hề đưa vào giá trị nào cho <code>hobbies</code>, do đó nó sẽ sử dụng giá trị mặc định, tức mảng <code>hobbies</code> trong thuộc tính của object <code>person</code>. Có nghĩa là ta đã thêm <code>dancing</code> vào trong mảng <code>person.hobbies</code>.</p><p>Cuối cùng chúng ta lại gọi <code>addHobby</code>, đưa <code>&quot;baking&quot;</code> vào làm giá trị cho <code>hobby</code>, và mảng <code>person.hobbies</code> làm giá trị cho <code>hobbies</code>. Có nghĩa là ta đã thêm <code>baking</code> vào trong mảng <code>person.hobbies</code>.</p><p>Sau khi thêm <code>dancing</code> và <code>baking</code>, giá trị của <code>person.hobbies</code> là <code>[&quot;coding&quot;, &quot;dancing&quot;, &quot;baking&quot;]</code></p></p></details><hr><h6 id="142-Output-la-gi"><a href="#142-Output-la-gi" class="headerlink" title="142. Output là gì?"></a>142. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>() &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"I'm a bird. 🦢"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flamingo</span> <span class="keyword">extends</span> <span class="title">Bird</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>() &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"I'm pink. 🌸"</span>);</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pet = <span class="keyword">new</span> Flamingo();</span><br></pre></td></tr></table></figure><ul><li>A: <code>I&#39;m pink. 🌸</code></li><li>B: <code>I&#39;m pink. 🌸</code> <code>I&#39;m a bird. 🦢</code></li><li>C: <code>I&#39;m a bird. 🦢</code> <code>I&#39;m pink. 🌸</code></li><li>D: Nothing, we didn’t call any method</li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-36"><a href="#Dap-an-B-36" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p>Chúng ta tạo ra biến <code>pet</code> là một instance của clas <code>Flamingo</code>. Khi ta tạo ra instance, <code>constructor</code> bên trong <code>Flamingo</code> sẽ được gọi. Đầu tiên, <code>&quot;I&#39;m pink. 🌸&quot;</code> được in ra, sau đó chúng ta gọi <code>super()</code>. <code>super()</code> sẽ gọi constructor ở class cha, tức <code>Bird</code>. Hàm constructor trong <code>Bird</code> được gọi và in ra <code>&quot;I&#39;m a bird. 🦢&quot;</code>.</p></p></details><hr><h6 id="143-Cau-lenh-nao-se-bi-loi"><a href="#143-Cau-lenh-nao-se-bi-loi" class="headerlink" title="143. Câu lệnh nào sẽ bị lỗi?"></a>143. Câu lệnh nào sẽ bị lỗi?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> emojis = [<span class="string">"🎄"</span>, <span class="string">"🎅🏼"</span>, <span class="string">"🎁"</span>, <span class="string">"⭐"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 1 */</span> emojis.push(<span class="string">"🦌"</span>);</span><br><span class="line"><span class="comment">/* 2 */</span> emojis.splice(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">/* 3 */</span> emojis = [...emojis, <span class="string">"🥂"</span>];</span><br><span class="line"><span class="comment">/* 4 */</span> emojis.length = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><ul><li>A: 1</li><li>B: 1 and 2</li><li>C: 3 and 4</li><li>D: 3</li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-D-23"><a href="#Dap-an-D-23" class="headerlink" title="Đáp án: D"></a>Đáp án: D</h4><p>Từ khóa <code>const</code> làm cho ta không thể <em>định nghĩa lại</em> giá trị của biến, nó là <em>read-only</em>. Tuy nhiên giá trị của bên trong nó thì không phải là bất biến. Các thuộc tính bên trong mảng <code>emojis</code> vẫn có thể được sửa đổi, ví dụ thêm phần tử, cắt, hoặc là đưa độ dài mảng về 0.</p></p></details><hr><h6 id="144-Ta-can-them-gi-vao-object-person-de-khi-goi-person-se-cho-ket-qua-la-quot-Lydia-Hallie-quot-21"><a href="#144-Ta-can-them-gi-vao-object-person-de-khi-goi-person-se-cho-ket-qua-la-quot-Lydia-Hallie-quot-21" class="headerlink" title="144. Ta cần thêm gì vào object person để khi gọi [...person] sẽ cho kết quả là [&quot;Lydia Hallie&quot;, 21]?"></a>144. Ta cần thêm gì vào object <code>person</code> để khi gọi <code>[...person]</code> sẽ cho kết quả là <code>[&quot;Lydia Hallie&quot;, 21]</code>?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">"Lydia Hallie"</span>,</span><br><span class="line">  age: <span class="number">21</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[...person] <span class="comment">// ["Lydia Hallie", 21]</span></span><br></pre></td></tr></table></figure><ul><li>A: Nothing, object are iterable by default</li><li>B: <code>*[Symbol.iterator]() { for (let x in this) yield* this[x] }</code></li><li>C: <code>*[Symbol.iterator]() { for (let x in this) yield* Object.values(this) }</code></li><li>D: <code>*[Symbol.iterator]() { for (let x in this) yield this }</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-44"><a href="#Dap-an-C-44" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Mặc định ta không thể duyệt qua được object. Trừ phi nó được cài đặt iterator protocol. Ta có thể cài đặt bằng cách thêm vào một iterator symbol <code>[Symbol.iterator]</code>, biến nó trở thành generator object (object có thể duyệt được), ví dụ <code>*[Symbol.iterator]() {}</code>.</p><p>Để generator này trả về được mảng các giá trị của các thuộc tính của object <code>person</code>, tức <code>Object.values</code> của object <code>person</code>, ta sẽ sử dụng cấu trúc <code>yield* Object.values(this)</code>.</p></p></details><h6 id="145-Output-la-gi"><a href="#145-Output-la-gi" class="headerlink" title="145. Output là gì?"></a>145. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">nums.forEach(<span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (num) count += <span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(count)</span><br></pre></td></tr></table></figure><ul><li>A: 1</li><li>B: 2</li><li>C: 3</li><li>D: 4</li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-45"><a href="#Dap-an-C-45" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Câu lệnh <code>if</code> trong vòng lập <code>forEach</code> kiểm tra giá trị của <code>num</code> là truthy hay falsy. Vì số đầu tiên trong mảng <code>nums</code> là <code>0</code>, giá trị falsy, code trong câu lệnh <code>if</code> sẽ không chạy. <code>count</code> chỉ tăng giá trị đối với 3 số còn lại trong mảng <code>nums</code>, <code>1</code>, <code>2</code> và <code>3</code>. Vì giá trị của <code>count</code> tăng thêm <code>1</code> trong 3 lần, giá trị của <code>count</code> sẽ là <code>3</code>.</p></p></details><hr><h6 id="146-Output-la-gi"><a href="#146-Output-la-gi" class="headerlink" title="146. Output là gì?"></a>146. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFruit</span>(<span class="params">fruits</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(fruits?.[<span class="number">1</span>]?.[<span class="number">1</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getFruit([[<span class="string">'🍊'</span>, <span class="string">'🍌'</span>], [<span class="string">'🍍'</span>]])</span><br><span class="line">getFruit()</span><br><span class="line">getFruit([[<span class="string">'🍍'</span>], [<span class="string">'🍊'</span>, <span class="string">'🍌'</span>]])</span><br></pre></td></tr></table></figure><ul><li>A: <code>null</code>, <code>undefined</code>, 🍌</li><li>B: <code>[]</code>, <code>null</code>, 🍌</li><li>C: <code>[]</code>, <code>[]</code>, 🍌</li><li>D: <code>undefined</code>, <code>undefined</code>, 🍌</li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-D-24"><a href="#Dap-an-D-24" class="headerlink" title="Đáp án: D"></a>Đáp án: D</h4><p>Phép toán <code>?</code> cho phép ta truy cập giá trị bên trong của object. Chúng ta thử in ra phần tử có thứ tự là <code>1</code> trong mảng con với thứ tự là <code>1</code> trong mảng <code>fruits</code>. Nếu mảng con với thứ tự là <code>1</code> trong mảng <code>fruits</code> không tồn tại, nó sẽ trả về <code>undefined</code>. Nếu mảng con với thứ tự là <code>1</code> trong mảng <code>fruits</code> tồn tại, nhưng mảng con này không có phần tử nào mang thứ tự <code>1</code>, nó cũng sẽ trả về <code>undefined</code>.</p><p>Trước tiên, chúng ta thử in ra phần tử thứ hai trong mảng con <code>[&#39;🍍&#39;]</code> của <code>[[&#39;🍊&#39;, &#39;🍌&#39;], [&#39;🍍&#39;]]</code>. Mảng con này chỉ chứa một phần tử, nghĩa là không có phần tử nào với thứ tự là <code>1</code>, và trả về <code>undefined</code>.</p><p>Sau đó, ta gọi hàm <code>getFruits</code> khi không truyền vào một đối số nào, nghĩa là <code>fruits</code> có giá trị mặc định là <code>undefined</code>. Vì ta truyền phần tử mang thứ tự <code>1</code> của <code>fruits</code>, nó trả về <code>undefined</code> do phần tử này không tồn tại. </p><p>Cuối cùng, ta thử in ra phần tử thứ hai trong mảng con <code>[&#39;🍊&#39;, &#39;🍌&#39;]</code> của mảng <code>[&#39;🍍&#39;], [&#39;🍊&#39;, &#39;🍌&#39;]</code>. Phần tử mang thứ tự <code>1</code> bên trong mảng con này là <code>🍌</code> sẽ được in ra.</p></p></details><hr><h6 id="147-Output-la-gi"><a href="#147-Output-la-gi" class="headerlink" title="147. Output là gì?"></a>147. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calc</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>() &#123;</span><br><span class="line"><span class="keyword">this</span>.count = <span class="number">0</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">increase() &#123;</span><br><span class="line"><span class="keyword">this</span>.count ++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> calc = <span class="keyword">new</span> Calc()</span><br><span class="line"><span class="keyword">new</span> Calc().increase()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(calc.count)</span><br></pre></td></tr></table></figure><ul><li>A: <code>0</code></li><li>B: <code>1</code></li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-38"><a href="#Dap-an-A-38" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p>Ta set biến <code>calc</code> bằng một instance mới của <code>Calc</code> class. Sau đó ta tạo ra instance mới của <code>Calc</code> và gọi <code>increase</code> hàm trên instance đó. Vì thuộc tính count nằm trong constructor của <code>Calc</code> class, thuộc tính count không được sử dụng trên prototype của <code>Calc</code>. Điều này nghĩa là giá trị của count chưa được thay đổi cho instance mà calc trỏ vào, giá trị của count vẫn là <code>0</code>.</p></p></details><hr><h6 id="148-Output-la-gi"><a href="#148-Output-la-gi" class="headerlink" title="148. Output là gi?"></a>148. Output là gi?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">email: <span class="string">"e@mail.com"</span>,</span><br><span class="line">password: <span class="string">"12345"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> updateUser = <span class="function">(<span class="params">&#123; email, password &#125;</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (email) &#123;</span><br><span class="line"><span class="built_in">Object</span>.assign(user, &#123; email &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (password) &#123;</span><br><span class="line">user.password = password</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> user</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> updatedUser = updateUser(&#123; <span class="attr">email</span>: <span class="string">"new@email.com"</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(updatedUser === user)</span><br></pre></td></tr></table></figure><ul><li>A: <code>false</code></li><li>B: <code>true</code></li><li>C: <code>TypeError</code></li><li>D: <code>ReferenceError</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-37"><a href="#Dap-an-B-37" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p>Hàm <code>updateUser</code> thay đổi các giá trị của thuộc tính <code>email</code> và <code>password</code> của user, nếu các giá trị của chúng được truyền vào hàm sau và sau đó hàm trả về <code>user</code> object. Giá trị trả về của hàm <code>updateUser</code> là <code>user</code> object, tức là giá trị của updateUser là trỏ đến cùng một <code>user</code> object mà <code>user</code> trỏ vào. <code>updatedUser === user</code> bằng <code>true</code>.</p></p></details><hr><h6 id="149-Output-la-gi"><a href="#149-Output-la-gi" class="headerlink" title="149. Output là gi?"></a>149. Output là gi?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruit = [<span class="string">'🍌'</span>, <span class="string">'🍊'</span>, <span class="string">'🍎'</span>]</span><br><span class="line"></span><br><span class="line">fruit.slice(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">fruit.splice(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">fruit.unshift(<span class="string">'🍇'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fruit)</span><br></pre></td></tr></table></figure><ul><li>A: <code>[&#39;🍌&#39;, &#39;🍊&#39;, &#39;🍎&#39;]</code></li><li>B: <code>[&#39;🍊&#39;, &#39;🍎&#39;]</code></li><li>C: <code>[&#39;🍇&#39;, &#39;🍊&#39;, &#39;🍎&#39;]</code></li><li>D: <code>[&#39;🍇&#39;, &#39;🍌&#39;, &#39;🍊&#39;, &#39;🍎&#39;]</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-46"><a href="#Dap-an-C-46" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Trước tiên, ta gọi hàm <code>slice</code> trên mảng fruit. Hàm slice không thay đổi mảng ban đầu nhưng sẽ trả về giá trị mà nó cắt từ mảng đó: banana emoji. Sau đó ta gọi hàm <code>splice</code> trên mảng fruit. Hàm splice sẽ thay đổi mảng ban đầu, nghĩa là mảng fruit bây giờ sẽ bao gồm <code>[&#39;🍊&#39;, &#39;🍎&#39;]</code>. Cuối cùng, ta gọi mảng <code>unshift</code> trên mảng <code>fruit</code> để thay đổi mảng ban đầu bằng cách cộng thêm giá trị được đưa ra, trong trường hợp này là ‘🍇’, phần tử đầu tiên của mảng. Mảng fruit bây giờ bao gồm [‘🍇’, ‘🍊’, ‘🍎’]`.</p></p></details><hr><h6 id="150-Output-la-gi"><a href="#150-Output-la-gi" class="headerlink" title="150. Output là gì?"></a>150. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> animals = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> dog = &#123; <span class="attr">emoji</span>: <span class="string">'🐶'</span> &#125;</span><br><span class="line"><span class="keyword">let</span> cat = &#123; <span class="attr">emoji</span>: <span class="string">'🐈'</span> &#125;</span><br><span class="line"></span><br><span class="line">animals[dog] = &#123; ...dog, <span class="attr">name</span>: <span class="string">"Mara"</span> &#125;</span><br><span class="line">animals[cat] = &#123; ...cat, <span class="attr">name</span>: <span class="string">"Sara"</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(animals[dog])</span><br></pre></td></tr></table></figure><ul><li>A: <code>{ emoji: &quot;🐶&quot;, name: &quot;Mara&quot; }</code></li><li>B: <code>{ emoji: &quot;🐈&quot;, name: &quot;Sara&quot; }</code></li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-38"><a href="#Dap-an-B-38" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p>Các keys của object được chuyển thành các chuỗi.</p><p>Do giá trị của <code>dog</code> là một object, <code>animals[dog]</code> thực sự nghĩa là ta tạo ra một thuộc tính mới gọi là <code>&quot;object Object&quot;</code> bằng với object mới. <code>animals[&quot;object Object&quot;]</code> lúc này bằng với <code>{ emoji: &quot;🐶&quot;, name: &quot;Mara&quot;}</code>.</p><p><code>cat</code> cũng là một object, nên <code>animals[cat]</code> thực sự nghĩa là ta thay đổi giá trị của <code>animals[``&quot;``object Object``&quot;``]</code> bằng thuộc tính cat mới.</p><p>Khi in ra <code>animals[dog]</code>, hoặc thực chất là <code>animals[&quot;object Object&quot;]</code> vì thay <code>dog</code> object bằng một chuỗi thì nó trả về <code>&quot;object Object&quot;</code>, ta nhận được <code>{ emoji: &quot;🐈&quot;, name: &quot;Sara&quot; }</code>.</p></p></details><hr><h6 id="151-Output-la-gi"><a href="#151-Output-la-gi" class="headerlink" title="151. Output là gì?"></a>151. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">email: <span class="string">"my@email.com"</span>,</span><br><span class="line">updateEmail: <span class="function"><span class="params">email</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.email = email</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">user.updateEmail(<span class="string">"new@email.com"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(user.email)</span><br></pre></td></tr></table></figure><ul><li>A: <code>my@email.com</code></li><li>B: <code>new@email.com</code></li><li>C: <code>undefined</code></li><li>D: <code>ReferenceError</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-A-39"><a href="#Dap-an-A-39" class="headerlink" title="Đáp án: A"></a>Đáp án: A</h4><p>Hàm <code>updateEmail</code> là một cú pháp arrow function và nó không gắn với <code>user</code> object. Điều này cho thấy từ khoá <code>this</code> không trỏ tới <code>user</code> object mà trỏ tới global scope. Giá trị của <code>email</code> trong <code>user</code> object không thay đổi. Khi ta in ra giá trị của <code>user.email</code>, nó trả về giá trị ban đầu của <code>my@email.com</code>.</p></p></details><hr><h6 id="152-Output-la-gi"><a href="#152-Output-la-gi" class="headerlink" title="152. Output là gì?"></a>152. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="built_in">Promise</span>.resolve(<span class="string">'First'</span>)</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="built_in">Promise</span>.resolve(<span class="string">'Second'</span>)</span><br><span class="line"><span class="keyword">const</span> promise3 = <span class="built_in">Promise</span>.reject(<span class="string">'Third'</span>)</span><br><span class="line"><span class="keyword">const</span> promise4 = <span class="built_in">Promise</span>.resolve(<span class="string">'Fourth'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> runPromises = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> res1 = <span class="keyword">await</span> <span class="built_in">Promise</span>.all([promise1, promise2])</span><br><span class="line"><span class="keyword">const</span> res2  = <span class="keyword">await</span> <span class="built_in">Promise</span>.all([promise3, promise4])</span><br><span class="line"><span class="keyword">return</span> [res1, res2]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">runPromises()</span><br><span class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res))</span><br><span class="line">.catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err))</span><br></pre></td></tr></table></figure><ul><li>A: <code>[[&#39;First&#39;, &#39;Second&#39;], [&#39;Fourth&#39;]]</code></li><li>B: <code>[[&#39;First&#39;, &#39;Second&#39;], [&#39;Third&#39;, &#39;Fourth&#39;]]</code></li><li>C: <code>[[&#39;First&#39;, &#39;Second&#39;]]</code></li><li>D: <code>&#39;Third&#39;</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-D-25"><a href="#Dap-an-D-25" class="headerlink" title="Đáp án: D"></a>Đáp án: D</h4><p>Hàm <code>Promise.all</code> trả về những promise truyền vào song song nhau. Nếu một promise thất bại, hàm <code>Promise.all</code> <em>rejects</em> với giá trị của promise đó. Trong trường hợp này, <code>promise3</code> bị reject với giá trị <code>&quot;Third&quot;</code>. Ta đang kiểm tra giá trị bị reject trong chuỗi hàm <code>catch</code> khi goi hàm <code>runPromises</code> để tìm ra lỗi trong hàm <code>runPromises</code>. Chỉ có <code>&quot;Third&quot;</code> được trả về vì <code>promise3</code> reject giá trị này.</p></p></details><hr><h6 id="153-Gia-tri-nao-cua-method-se-duoc-tra-ve-voi-log-name-quot-Lydia-quot-age-22"><a href="#153-Gia-tri-nao-cua-method-se-duoc-tra-ve-voi-log-name-quot-Lydia-quot-age-22" class="headerlink" title="153. Giá trị nào của method sẽ được trả về với log { name: &quot;Lydia&quot;, age: 22 }?"></a>153. Giá trị nào của <code>method</code> sẽ được trả về với log <code>{ name: &quot;Lydia&quot;, age: 22 }</code>?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> keys = [<span class="string">"name"</span>, <span class="string">"age"</span>]</span><br><span class="line"><span class="keyword">const</span> values = [<span class="string">"Lydia"</span>, <span class="number">22</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> method = <span class="comment">/* ?? */</span></span><br><span class="line"><span class="built_in">Object</span>[method](keys.map(<span class="function">(<span class="params">_, i</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> [keys[i], values[i]]</span><br><span class="line">&#125;)) <span class="comment">// &#123; name: "Lydia", age: 22 &#125;</span></span><br></pre></td></tr></table></figure><ul><li>A: <code>entries</code></li><li>B: <code>values</code></li><li>C: <code>fromEntries</code></li><li>D: <code>forEach</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-47"><a href="#Dap-an-C-47" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Hàm <code>fromEntries</code> trả về một mảng 2d trong một object. Phần tử đầu tiên trong từng mảng con sẽ là từ khoá và phần tử thứ hai trong từng mảng con sẽ là giá trị. Trong trường hợp này, ta tiến hành map qua mảng <code>keys</code>, nó sẽ trả về một mảng mà phần tử đầu tiên của mảng đó là phần tử trên thứ tự hiện tại của mảng key, và phần tử thứ hai của mảng đó là phần tử trên thứ tự hiện tại của mảng values.</p><p>Theo như trên thì ta tạo ra một mảng gồm những mảng con chứa đựng những từ khoá và giá trị đúng, và nó trả về <code>{ name: &quot;Lydia&quot;, age: 22 }</code>.</p></p></details><hr><h6 id="154-Output-la-gi"><a href="#154-Output-la-gi" class="headerlink" title="154. Output là gì?"></a>154. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> createMember = <span class="function">(<span class="params">&#123; email, address = &#123;&#125;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> validEmail = <span class="regexp">/.+\@.+\..+/</span>.test(email)</span><br><span class="line"><span class="keyword">if</span> (!validEmail) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Valid email pls"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">email,</span><br><span class="line">address: address ? address : <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> member = createMember(&#123; <span class="attr">email</span>: <span class="string">"my@email.com"</span> &#125;)</span><br><span class="line"><span class="built_in">console</span>.log(member)</span><br></pre></td></tr></table></figure><ul><li>A: <code>{ email: &quot;my@email.com&quot;, address: null }</code></li><li>B: <code>{ email: &quot;my@email.com&quot; }</code></li><li>C: <code>{ email: &quot;my@email.com&quot;, address: {} }</code></li><li>D: <code>{ email: &quot;my@email.com&quot;, address: undefined }</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-C-48"><a href="#Dap-an-C-48" class="headerlink" title="Đáp án: C"></a>Đáp án: C</h4><p>Giá trị mặc định của <code>address</code> là một object rỗng <code>{}</code>. Khi ta cho biến <code>member</code> bằng với object được trả về bởi hàm <code>createMember</code>, ta đã không truyền vào một giá trị của address, nghĩa là giá trị của address là object rỗng <code>{}</code> được mặc định. Object rỗng mang giá trị truthy, tức là điều kiện <code>address ? address : null</code> trả về <code>true</code>. Giá trị của address là một object rỗng <code>{}</code>.</p></p></details><hr><h6 id="155-Output-la-gi"><a href="#155-Output-la-gi" class="headerlink" title="155. Output là gì?"></a>155. Output là gì?</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> randomValue = &#123; <span class="attr">name</span>: <span class="string">"Lydia"</span> &#125;</span><br><span class="line">randomValue = <span class="number">23</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">typeof</span> randomValue === <span class="string">"string"</span>) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"It's not a string!"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Yay it's a string!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A: <code>It&#39;s not a string!</code></li><li>B: <code>Yay it&#39;s a string!</code></li><li>C: <code>TypeError</code></li><li>D: <code>undefined</code></li></ul><details><summary><b>Đáp án</b></summary><p><h4 id="Dap-an-B-39"><a href="#Dap-an-B-39" class="headerlink" title="Đáp án: B"></a>Đáp án: B</h4><p>Điều kiện trong mệnh đề <code>if</code> kiểm tra xem giá trị của <code>!typeof randomValue</code> bằng với <code>&quot;string&quot;</code> hay không. Phép toán <code>!</code> chuyển giá trị đó thành giá trị boolean. Nếu giá trị là truthy, giá trị trả về sẽ là <code>false</code>, nếu giá trị là falsy, giá trị trả về sẽ là <code>true</code>. Trong trường hợp này, giá trị trả về của <code>typeof randomValue</code> là giá trị truthy <code>&quot;number&quot;</code>, nghĩa là giá trị của <code>!typeof randomValue</code> là một giá trị boolean <code>false</code>.</p><p><code>!typeof randomValue === &quot;string&quot;</code> luôn trả về false, vì ta thực sự đang kiểm tra <code>false === &quot;string&quot;</code>. Vì điều kiện đã trả về <code>false</code>, code của mệnh đề <code>else</code> sẽ chạy và <code>Yay it&#39;s a string!</code> được in ra.</p></p></details>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;1-Output-la-gi&quot;&gt;&lt;a href=&quot;#1-Output-la-gi&quot; class=&quot;headerlink&quot; title=&quot;1. Output là gì?&quot;&gt;&lt;/a&gt;1. Output là gì?&lt;/h6&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
    
    
      <category term="javascript" scheme="https://phamtuananh1996.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Kiểm tra chịu tải của server với K6.io (Phần 2 InfluxDB + Grafana)</title>
    <link href="https://phamtuananh1996.github.io/2021/11/25/kiem-tra-chiu-tai-cua-server-voi-k6io-phan-2/"/>
    <id>https://phamtuananh1996.github.io/2021/11/25/kiem-tra-chiu-tai-cua-server-voi-k6io-phan-2/</id>
    <published>2021-11-25T09:37:46.000Z</published>
    <updated>2024-01-04T00:39:10.962Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mo-dau"><a href="#Mo-dau" class="headerlink" title="Mở đầu"></a>Mở đầu</h1><p>Ở phần trước mình đã giới thiệu sơ qua về kiểm tra chịu tải của server với k6.io, cách settup , visualization kết quả với cloud k6 tuy nhiên do dùng bản miễn phí nên vẫn còn nhiều giới hạn ví dụ chỉ có thể visualization được 50 user trong 12 phút. Muốn nhiều hơn chúng ta phải trả phí. vì vậy hôm nay mình viết tiếp phần 2 hướng dẫn visualization kết quả hoàn toàn miễn phí mà không bị giới hạn với InfluxDB + Grafana. </p><p>Các bạn có thể xem qua phần 1 ở đây:<br><a href="https://viblo.asia/p/kiem-tra-chiu-tai-cua-server-voi-k6io-phan-1-bWrZnVywZxw" target="_blank" rel="noopener">Kiểm tra chịu tải của server với K6.io (Phần 1)</a></p><p><img src="https://k6.io/docs/static/5b7ecf17cae56371683a7ecdce447a4b/ce447/grafana-visualization.png" alt=""></p><h1 id="InfluxDB"><a href="#InfluxDB" class="headerlink" title="InfluxDB"></a>InfluxDB</h1><p>InfluxDB là một cơ sở dữ liệu chuỗi thời gian nguồn mở được phát triển bởi InfluxData. Ở bài viết này sẽ dùng với mục đích lưu lại các thông số mà k6 thu thập được từ việc chạy test.</p><p>Những tính năng chính mà Influxdb hỗ trợ có thể kể đến như :</p><ul><li>Có các API đọc ghi dễ hiểu, hiệu suất cao</li><li>Plugin hỗ trợ cho các giao thức nhập dữ liệu khác như Graphite, collectd và OpenTSDB (Phần này trong khuôn khổ bài viết mình chưa thể thực nghiệm)</li><li>Câu query tương đồng với SQL do đó rất dễ để những người đã có base về SQL ứng dụng</li><li>Đánh index theo các trường tags giúp truy vấn tốc độ. </li><li>Các truy vấn liên tục tự động tính toán dữ liệu tổng hợp để làm cho các truy vấn thường xuyên hiệu quả hơn. Và cuối cùng thì Influxdb có cả mã nguồn mở và phiên bản cho enterprise</li></ul><h2 id="Cai-dat-InfluxDB"><a href="#Cai-dat-InfluxDB" class="headerlink" title="Cái đặt InfluxDB"></a>Cái đặt InfluxDB</h2><h3 id="Linux-Debian-Ubuntu"><a href="#Linux-Debian-Ubuntu" class="headerlink" title="Linux (Debian/Ubuntu)"></a>Linux (Debian/Ubuntu)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install influxdb</span><br></pre></td></tr></table></figure><h3 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install influxdb</span><br></pre></td></tr></table></figure><h2 id="Chay-k6-test-va-upload-ket-qua-vao-InfluxDB"><a href="#Chay-k6-test-va-upload-ket-qua-vao-InfluxDB" class="headerlink" title="Chạy k6 test và upload kết quả vào InfluxDB"></a>Chạy k6 test và upload kết quả vào InfluxDB</h2><p>k6 có hỗ trợ tích hợp để xuất dữ liệu kết quả trực tiếp tới cơ sở dữ liệu InfluxDB bằng cách sử dụng option –out (-o)</p><h3 id="Linux-amp-MacOS"><a href="#Linux-amp-MacOS" class="headerlink" title="Linux &amp; MacOS"></a>Linux &amp; MacOS</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">k6 run --out influxdb&#x3D;http:&#x2F;&#x2F;localhost:8086&#x2F;myk6db script.js</span><br></pre></td></tr></table></figure><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -i loadimpact&#x2F;k6 run --out influxdb&#x3D;http:&#x2F;&#x2F;localhost:8086&#x2F;myk6db - &lt;script.js</span><br></pre></td></tr></table></figure><h1 id="Grafana"><a href="#Grafana" class="headerlink" title="Grafana"></a>Grafana</h1><p>Grafana là một nền tảng open-source chuyên phục vụ mục đích theo dõi và đánh giá các số liệu thu được. Bất kì lĩnh vực nào có thể thu được dữ liệu theo dòng thời gian đều có thể hiển thị tối ưu trên Grafana. Ngoài khả năng kết nối đa dạng với các nguồn dữ liệu, phần giao diện của công cụ này rất thân thiền với người dùng. Dễ dàng đưa ra thông tin và cảnh báo.</p><h2 id="Cai-dat-Grafana"><a href="#Cai-dat-Grafana" class="headerlink" title="Cài đặt Grafana"></a>Cài đặt Grafana</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install grafana</span><br></pre></td></tr></table></figure><h3 id="macOS-1"><a href="#macOS-1" class="headerlink" title="macOS"></a>macOS</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install grafana</span><br></pre></td></tr></table></figure><p>Sau khi cài đặt xong grafana chúng ta đã có InfluxDB server chạy ở cổng 8086 và Grafana server chạy ở cổng 3000. Tiếp theo chúng ta có thể visualize k6 metrics rồi. </p><h1 id="Su-dung-docker-compose-duoc-settup-san"><a href="#Su-dung-docker-compose-duoc-settup-san" class="headerlink" title="Sử dụng docker-compose được settup sẵn"></a>Sử dụng docker-compose được settup sẵn</h1><p>Để thay thế các cài đặt bên trên, thì k6 cũng đã xây dựng sẵn file docker-composer giúp cài đặt nhanh chóng  InfluxDB và Grafana. Để sử dụng chỉ cần chạy lệnh: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git clone &#39;https:&#x2F;&#x2F;github.com&#x2F;k6io&#x2F;k6&#39;</span><br><span class="line">$ cd k6</span><br><span class="line">$ docker-compose up -d \</span><br><span class="line">    influxdb \</span><br><span class="line">    grafana</span><br></pre></td></tr></table></figure><p>Truy cập vào Grafana server <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a></p><p><img src="https://images.viblo.asia/6431bee7-68ed-46d6-b3c9-3b5d2f185a56.png" alt=""><br>Vậy là ok rồi . tiếp theo là chạy test và visualize metrics.<br>Để chạy test thì mình cd vào thư mục k6/samples vào tạo file test với nội dùng sau: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import http from &#39;k6&#x2F;http&#39;;</span><br><span class="line">import &#123; sleep &#125; from &#39;k6&#39;;</span><br><span class="line"></span><br><span class="line">export let options &#x3D; &#123;</span><br><span class="line">  stages: [</span><br><span class="line">    &#123; duration: &#39;2m&#39;, target: 100 &#125;, &#x2F;&#x2F; below normal load</span><br><span class="line">    &#123; duration: &#39;5m&#39;, target: 100 &#125;,</span><br><span class="line">    &#123; duration: &#39;2m&#39;, target: 200 &#125;, &#x2F;&#x2F; normal load</span><br><span class="line">    &#123; duration: &#39;5m&#39;, target: 200 &#125;,</span><br><span class="line">    &#123; duration: &#39;2m&#39;, target: 300 &#125;, &#x2F;&#x2F; around the breaking point</span><br><span class="line">    &#123; duration: &#39;5m&#39;, target: 300 &#125;,</span><br><span class="line">    &#123; duration: &#39;2m&#39;, target: 400&#125;, &#x2F;&#x2F; beyond the breaking point</span><br><span class="line">    &#123; duration: &#39;5m&#39;, target: 400&#125;,</span><br><span class="line">    &#123; duration: &#39;10m&#39;, target: 0 &#125;, &#x2F;&#x2F; scale down. Recovery stage.</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default function () &#123;</span><br><span class="line">  http.get(&#39;https:&#x2F;&#x2F;phamtuananh1996.github.io&#39;);</span><br><span class="line">  sleep(1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Để chạy test dùng lệnh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker-compose run -v \</span><br><span class="line">    $PWD&#x2F;samples:&#x2F;scripts \</span><br><span class="line">    k6 run &#x2F;scripts&#x2F;blog.js</span><br></pre></td></tr></table></figure><p>Để visualize metrics thì mình sẽ dùng Grafana dashboards được cấu hình sẵn cho k6 được cộng đồng phát triển như:</p><ul><li><a href="https://grafana.com/grafana/dashboards/2587" target="_blank" rel="noopener">dcadwallader</a></li><li><a href="https://grafana.com/grafana/dashboards/4411" target="_blank" rel="noopener">Stian Øvrevåge</a></li><li><a href="https://grafana.com/grafana/dashboards/8156" target="_blank" rel="noopener">cyaiox</a></li><li><a href="https://grafana.com/grafana/dashboards/10553" target="_blank" rel="noopener">smockvavelsky</a></li><li><a href="https://grafana.com/grafana/dashboards/10660" target="_blank" rel="noopener">K m</a></li></ul><p>Để sử dụng mình vào <a href="http://localhost:3000/dashboard/import" target="_blank" rel="noopener">http://localhost:3000/dashboard/import</a> để thêm id. Sau đó chọn InfluxDB data source</p><p><img src="https://images.viblo.asia/80a5b45d-2214-44f5-a2a4-e40f1d1117ea.gif" alt=""></p><p>Sau khi chạy test đây là thành quả</p><p><img src="https://images.viblo.asia/f73483a4-3c9c-460a-a9c2-30f3f97e0b90.png" alt=""></p><p>Vậy là chúng ta có thể visualize k6 metrics với giao diện trực quan và realtime rồi</p><h1 id="Ket-luan"><a href="#Ket-luan" class="headerlink" title="Kết luận"></a>Kết luận</h1><p>Cảm ơn các bạn đã đọc bài viết. nếu hay thì cho mình xin 1 upvote, chia sẻ nhé.</p><p>Tham khảo: <a href="https://k6.io/docs/results-visualization/influxdb-+-grafana" target="_blank" rel="noopener">https://k6.io/docs/results-visualization/influxdb-+-grafana</a></p><p>blog: <a href="https://phamtuananh1996.github.io">https://phamtuananh1996.github.io</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mo-dau&quot;&gt;&lt;a href=&quot;#Mo-dau&quot; class=&quot;headerlink&quot; title=&quot;Mở đầu&quot;&gt;&lt;/a&gt;Mở đầu&lt;/h1&gt;&lt;p&gt;Ở phần trước mình đã giới thiệu sơ qua về kiểm tra chị
      
    
    </summary>
    
    
    
      <category term="server" scheme="https://phamtuananh1996.github.io/tags/server/"/>
    
      <category term="performence" scheme="https://phamtuananh1996.github.io/tags/performence/"/>
    
      <category term="test" scheme="https://phamtuananh1996.github.io/tags/test/"/>
    
      <category term="k6.io" scheme="https://phamtuananh1996.github.io/tags/k6-io/"/>
    
  </entry>
  
  <entry>
    <title>Kiểm tra chịu tải của server với K6.io (Phần 1)</title>
    <link href="https://phamtuananh1996.github.io/2021/11/25/kiem-tra-chiu-tai-cua-server-voi-k6io-phan-1/"/>
    <id>https://phamtuananh1996.github.io/2021/11/25/kiem-tra-chiu-tai-cua-server-voi-k6io-phan-1/</id>
    <published>2021-11-25T09:35:33.000Z</published>
    <updated>2024-01-04T00:39:10.962Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Loi-mo-dau"><a href="#Loi-mo-dau" class="headerlink" title="Lời mở đầu"></a>Lời mở đầu</h1><p>Để có được một sản phẩm phần mềm tốt việc test performance là việc hết sức quan trọng để xác định độ ổn định của hệ thống, Để test được hắn một mình bạn không thể gửi request bằng cơm để test chịu tải của server được, vì vậy các công cụ hỗ trợ test chịu tải của server ra đời để giúp cho chúng ta đỡ vất vả hơn phần nào. Cũng có rẩt nhiều công cụ hỗ trợ cho việc test này như Artillery, Jmeter ….</p><p>Trong bài viết này chúng ta hãy cùng đi tìm hiểu về 1 công cụ mình mới được khai sáng, đó chính là K6.io</p><p><img src="https://images.viblo.asia/ec05af0d-2517-4f52-b340-4dd13ba15477.PNG" alt=""></p><h1 id="Cai-dat"><a href="#Cai-dat" class="headerlink" title="Cài đặt"></a>Cài đặt</h1><p>K6.io phát hành các gói cài đặt và sử dụng trên rất nhiều hệ điều hành, hệ thống như linux, mac, window, docker….</p><h2 id="Linux-Debian-Ubuntu"><a href="#Linux-Debian-Ubuntu" class="headerlink" title="Linux (Debian/Ubuntu)"></a>Linux (Debian/Ubuntu)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-key adv --keyserver hkp:&#x2F;&#x2F;keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69</span><br><span class="line">$ echo &quot;deb https:&#x2F;&#x2F;dl.k6.io&#x2F;deb stable main&quot; | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;k6.list</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install k6</span><br></pre></td></tr></table></figure><h2 id="Mac-brew"><a href="#Mac-brew" class="headerlink" title="Mac (brew)"></a>Mac (brew)</h2><p>Sử dụng <a href="https://brew.sh/" target="_blank" rel="noopener">brew</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install k6</span><br></pre></td></tr></table></figure><h2 id="Windows-MSI-installer"><a href="#Windows-MSI-installer" class="headerlink" title="Windows (MSI installer)"></a>Windows (MSI installer)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ Download the k6 installer: https:&#x2F;&#x2F;dl.bintray.com&#x2F;loadimpact&#x2F;windows&#x2F;k6-latest-amd64.msi</span><br></pre></td></tr></table></figure><p>Nếu bạn dùng <a href="https://chocolatey.org/" target="_blank" rel="noopener">Chocolatey package manager </a>. Bạn có thể cài đặt k6 bằng cách sau:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ choco install k6</span><br></pre></td></tr></table></figure><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull loadimpact&#x2F;k6</span><br></pre></td></tr></table></figure><p>Ở bài viết này mình sẽ dùng docker để cài đặt.</p><h2 id="Kiem-tra-version"><a href="#Kiem-tra-version" class="headerlink" title="Kiểm tra version"></a>Kiểm tra version</h2><p>Để xem cài đặt thành công k6 hay chưa dùng lệnh: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ k6 version</span><br><span class="line"># k6 v0.31.1 (2021-03-17T13:23:23+0000&#x2F;e9d8349, go1.15.8, linux&#x2F;amd64)</span><br></pre></td></tr></table></figure><p>Vậy là cài đặt thành công  !!!!</p><h1 id="Kiem-tra-do-chiu-tai-voi-k6"><a href="#Kiem-tra-do-chiu-tai-voi-k6" class="headerlink" title="Kiểm tra độ chịu tải với k6"></a>Kiểm tra độ chịu tải với k6</h1><h2 id="Running-k6"><a href="#Running-k6" class="headerlink" title="Running k6"></a>Running k6</h2><p>Vì k6 sử dụng file javascript để chạy test nên khá dễ dàng tiếp cận. Chúng ta tạo một file với tên homepage.js đơn giản với nội dung sau:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">'k6/http'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; sleep &#125; <span class="keyword">from</span> <span class="string">'k6'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> options = &#123;</span><br><span class="line">  VUs: <span class="number">10</span>,</span><br><span class="line">  duration: <span class="string">'30s'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   http.get(<span class="string">'https://phamtuananh1996.github.io'</span>);</span><br><span class="line">   sleep(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ở đây mình khai báo VUs = 10 và duration = 30 giây có nghĩa là quá trình test sẽ mô tả 10 user vào website <a href="https://phamtuananh1996.github.io">https://phamtuananh1996.github.io</a> trong vòng 30 giây (VUs viết tắt của  virtual user)</p><p>Tiến hành chạy test:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ k6 run homepage.js</span><br></pre></td></tr></table></figure><p>Hoặc chạy với docker:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -i loadimpact&#x2F;k6 run - &lt;homepage.js</span><br></pre></td></tr></table></figure><p>sau khi chạy xong k6 sẽ tổng hợp số liệu như sau:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">data_received..............: 148 MB 2.5 MB&#x2F;s</span><br><span class="line">data_sent..................: 1.0 MB 17 kB&#x2F;s</span><br><span class="line">http_req_blocked...........: avg&#x3D;1.92ms   min&#x3D;1µs      med&#x3D;5µs      max&#x3D;288.73ms p(90)&#x3D;11µs     p(95)&#x3D;17µs</span><br><span class="line">http_req_connecting........: avg&#x3D;1.01ms   min&#x3D;0s       med&#x3D;0s       max&#x3D;166.44ms p(90)&#x3D;0s       p(95)&#x3D;0s</span><br><span class="line">http_req_duration..........: avg&#x3D;143.14ms min&#x3D;112.87ms med&#x3D;136.03ms max&#x3D;1.18s    p(90)&#x3D;164.2ms  p(95)&#x3D;177.75ms</span><br><span class="line">http_req_receiving.........: avg&#x3D;5.53ms   min&#x3D;49µs     med&#x3D;2.11ms   max&#x3D;1.01s    p(90)&#x3D;9.25ms   p(95)&#x3D;11.8ms</span><br><span class="line">http_req_sending...........: avg&#x3D;30.01µs  min&#x3D;7µs      med&#x3D;24µs     max&#x3D;1.89ms   p(90)&#x3D;48µs     p(95)&#x3D;63µs</span><br><span class="line">http_req_tls_handshaking...: avg&#x3D;0s       min&#x3D;0s       med&#x3D;0s       max&#x3D;0s       p(90)&#x3D;0s       p(95)&#x3D;0s</span><br><span class="line">http_req_waiting...........: avg&#x3D;137.57ms min&#x3D;111.44ms med&#x3D;132.59ms max&#x3D;589.4ms  p(90)&#x3D;159.95ms p(95)&#x3D;169.41ms</span><br><span class="line">http_reqs..................: 13491  224.848869&#x2F;s</span><br><span class="line">iteration_duration.........: avg&#x3D;445.48ms min&#x3D;413.05ms med&#x3D;436.36ms max&#x3D;1.48s    p(90)&#x3D;464.94ms p(95)&#x3D;479.66ms</span><br><span class="line">iterations.................: 13410  223.498876&#x2F;s</span><br><span class="line">vus........................: 100    min&#x3D;100 max&#x3D;100</span><br><span class="line">vus_max....................: 100    min&#x3D;100 max&#x3D;100</span><br></pre></td></tr></table></figure><p>Vậy là đã chạy ok rồi. Các thông số mình sẽ giải thích ở phần dưới nhé.</p><p>Đây chỉ là 1 case đơn giản. Trên thực tế thì phức tạp hơn trong thực tế thì user thường tương tác với Server theo một kịch bản chứ không chỉ đơn thuần là gửi request, hay số lượng user sẽ tăng lên hay giảm đi.</p><h2 id="Stages-ramping-up-down-VUs"><a href="#Stages-ramping-up-down-VUs" class="headerlink" title="Stages: ramping up/down VUs"></a>Stages: ramping up/down VUs</h2><p>Bạn cũng có thể tăng và giảm số lượng VUs trong quá trình kiểm tra. Chúng ta có thể config ở <code>options.stages</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">'k6/http'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; sleep &#125; <span class="keyword">from</span> <span class="string">'k6'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> options = &#123;</span><br><span class="line">  stages: [</span><br><span class="line">    &#123; <span class="attr">duration</span>: <span class="string">'2m'</span>, <span class="attr">target</span>: <span class="number">100</span> &#125;, <span class="comment">// below normal load</span></span><br><span class="line">    &#123; <span class="attr">duration</span>: <span class="string">'5m'</span>, <span class="attr">target</span>: <span class="number">100</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">duration</span>: <span class="string">'2m'</span>, <span class="attr">target</span>: <span class="number">200</span> &#125;, <span class="comment">// normal load</span></span><br><span class="line">    &#123; <span class="attr">duration</span>: <span class="string">'5m'</span>, <span class="attr">target</span>: <span class="number">200</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">duration</span>: <span class="string">'2m'</span>, <span class="attr">target</span>: <span class="number">300</span> &#125;, <span class="comment">// around the breaking point</span></span><br><span class="line">    &#123; <span class="attr">duration</span>: <span class="string">'5m'</span>, <span class="attr">target</span>: <span class="number">300</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">duration</span>: <span class="string">'2m'</span>, <span class="attr">target</span>: <span class="number">400</span> &#125;, <span class="comment">// beyond the breaking point</span></span><br><span class="line">    &#123; <span class="attr">duration</span>: <span class="string">'5m'</span>, <span class="attr">target</span>: <span class="number">400</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">duration</span>: <span class="string">'10m'</span>, <span class="attr">target</span>: <span class="number">0</span> &#125;, <span class="comment">// scale down. Recovery stage.</span></span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   http.get(<span class="string">'https://phamtuananh1996.github.io'</span>);</span><br><span class="line">   sleep(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ở đây thì mình có tăng số lượng user (target) lên dần dần và thời gian (duration) cũng tăng dần dần và đột ngột giảm user về 0 nhắm kiểm tra độ chịu tải của server (Stress Test)</p><h1 id="Results-visualization-voi-Cloud-k6"><a href="#Results-visualization-voi-Cloud-k6" class="headerlink" title="Results visualization với Cloud k6"></a>Results visualization với Cloud k6</h1><p>k6.io cũng cung cấp cho chúng ta cloud để thực hiện việc test và kiểm tra kết quả bằng hình ảnh trực quan, hoặc bạn cũng có thể chạy test dưới local sau đó stream result lên k6 Cloud. </p><p>k6.io cho người dùng dùng thử chỉ bằng cách đăng ký tài khoản bằng gmail hoặc github. Với mỗi tài khoản, người dùng có thể thực hiện miễn phí 50 lượt test. Ngoài ra còn giới hạn những thông số cấu hình cho các loại test. Ở đây mình sử dụng gmail để đăng nhập.</p><p>Đây là giao diện dashboard khi đăng nhập xong.  Ở giao diện này, sẽ có 2 lựa chọn để tạo test là <strong>Test builder</strong> và <strong>Script editor</strong>.</p><p><img src="https://images.viblo.asia/aa6933ed-9203-459b-a083-1828c0265809.png" alt=""></p><p><strong>Test builder</strong> cho phép chúng ta tạo test bằng giao diện trực quan, còn <strong>Script editor</strong> cho phép chúng ta tạo các đoạn script bằng js và chạy trên nền cloud.</p><h2 id="Script-editor"><a href="#Script-editor" class="headerlink" title="Script editor"></a>Script editor</h2><p>K6 Cloud cũng cấp luôn cho chúng ta 1 trình soạn thảo và đoạn code mẫu việc của chúng ta là copy đoạn code bên trên và paste vào thôi. sau khi xong ấn vào run . vì Hiện tại mình đang là free user, nên tối đa có thể chạy với 50 VUs và 12 phút vì thế mình điều chỉnh đoạn code test của mình xuống như sau:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">'k6/http'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; sleep &#125; <span class="keyword">from</span> <span class="string">'k6'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> options = &#123;</span><br><span class="line">  stages: [</span><br><span class="line">    &#123; <span class="attr">duration</span>: <span class="string">'2s'</span>, <span class="attr">target</span>: <span class="number">10</span> &#125;, <span class="comment">// below normal load</span></span><br><span class="line">    &#123; <span class="attr">duration</span>: <span class="string">'5s'</span>, <span class="attr">target</span>: <span class="number">10</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">duration</span>: <span class="string">'2s'</span>, <span class="attr">target</span>: <span class="number">20</span> &#125;, <span class="comment">// normal load</span></span><br><span class="line">    &#123; <span class="attr">duration</span>: <span class="string">'5s'</span>, <span class="attr">target</span>: <span class="number">20</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">duration</span>: <span class="string">'2s'</span>, <span class="attr">target</span>: <span class="number">30</span> &#125;, <span class="comment">// around the breaking point</span></span><br><span class="line">    &#123; <span class="attr">duration</span>: <span class="string">'5s'</span>, <span class="attr">target</span>: <span class="number">30</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">duration</span>: <span class="string">'2s'</span>, <span class="attr">target</span>: <span class="number">40</span> &#125;, <span class="comment">// beyond the breaking point</span></span><br><span class="line">    &#123; <span class="attr">duration</span>: <span class="string">'5s'</span>, <span class="attr">target</span>: <span class="number">40</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">duration</span>: <span class="string">'10s'</span>, <span class="attr">target</span>: <span class="number">0</span> &#125;, <span class="comment">// scale down. Recovery stage.</span></span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  http.get(<span class="string">'https://phamtuananh1996.github.io'</span>);</span><br><span class="line">  sleep(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images.viblo.asia/0396af06-d719-499e-934a-2f0eae902789.gif" alt=""></p><p>Đợi sau khi chạy xong ta sẽ có giao diện sau, cũng là giao diện cuối khi hoàn thành test:<br><img src="https://images.viblo.asia/d5ece6ee-a026-4763-a10d-3ac35d18696f.png" alt=""></p><p>Ở giao diện này, ta có thể thấy được rất nhiều các thông số như các biểu đồ về VUs, request, hiển thị lỗi, metrics… Như ở đây mình thấy với 40 user hoạt động cùng lúc trong vòng 5s thì website vẫn không vấn đề gì và hoạt động bình thường .</p><h2 id="Cloud-tests-from-the-CLI"><a href="#Cloud-tests-from-the-CLI" class="headerlink" title="Cloud tests from the CLI"></a>Cloud tests from the CLI</h2><p>Chúng ta cũng có thể chạy test trên local thông qua CLI và upload kết quả đó lên cloud để có thể theo dõi trực quan hơn băng biểu đồ, hình ảnh do cloud cung cấp.</p><p>Đầu tiên phải đăng nhâp k6 cloud từ cli:</p><p>Đăng nhập bằng username và password:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ k6 login cloud</span><br></pre></td></tr></table></figure><p>Đăng nhập bằng API Token:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ k6 login cloud --token &lt;YOUR_K6_CLOUD_API_TOKEN&gt;</span><br></pre></td></tr></table></figure><p>Để lấy được API Token sau khi đăng nhập chúng ta có thể vào <a href="https://app.k6.io/account/api-token" target="_blank" rel="noopener">https://app.k6.io/account/api-token</a> để lấy.</p><p>Chạy kịch bản test trên local và stream lên cloud k6:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ k6 cloud script.js</span><br></pre></td></tr></table></figure><p>Sau khi chạy xong sẽ có 1 số thông tin và 1 đường dẫn url đến trang xem kết quả test trên cloud (output):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">        &#x2F;\      |‾‾|  &#x2F;‾‾&#x2F;  &#x2F;‾&#x2F;</span><br><span class="line">   &#x2F;\  &#x2F;  \     |  |_&#x2F;  &#x2F;  &#x2F; &#x2F;</span><br><span class="line">  &#x2F;  \&#x2F;    \    |      |  &#x2F;  ‾‾\</span><br><span class="line"> &#x2F;          \   |  |‾\  \ | (_) |</span><br><span class="line">&#x2F; __________ \  |__|  \__\ \___&#x2F; .io</span><br><span class="line"></span><br><span class="line">execution: cloud</span><br><span class="line">script: script.js</span><br><span class="line">output: https:&#x2F;&#x2F;app.k6.io&#x2F;runs&#x2F;TEST_RUN_ID</span><br></pre></td></tr></table></figure><p>Bạn có thể điều hướng đến url đó để xem kết quả test một cách trực quan:<br><img src="https://images.viblo.asia/a0c5f3b0-1b11-44e1-b787-a23154363019.png" alt=""></p><h1 id="Results-output"><a href="#Results-output" class="headerlink" title="Results output"></a>Results output</h1><p>Sau khi chay test local xong bạn sẽ thấy các thông số này:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">data_received..............: 148 MB 2.5 MB&#x2F;s</span><br><span class="line">data_sent..................: 1.0 MB 17 kB&#x2F;s</span><br><span class="line">http_req_blocked...........: avg&#x3D;1.92ms   min&#x3D;1µs      med&#x3D;5µs      max&#x3D;288.73ms p(90)&#x3D;11µs     p(95)&#x3D;17µs</span><br><span class="line">http_req_connecting........: avg&#x3D;1.01ms   min&#x3D;0s       med&#x3D;0s       max&#x3D;166.44ms p(90)&#x3D;0s       p(95)&#x3D;0s</span><br><span class="line">http_req_duration..........: avg&#x3D;143.14ms min&#x3D;112.87ms med&#x3D;136.03ms max&#x3D;1.18s    p(90)&#x3D;164.2ms  p(95)&#x3D;177.75ms</span><br><span class="line">http_req_receiving.........: avg&#x3D;5.53ms   min&#x3D;49µs     med&#x3D;2.11ms   max&#x3D;1.01s    p(90)&#x3D;9.25ms   p(95)&#x3D;11.8ms</span><br><span class="line">http_req_sending...........: avg&#x3D;30.01µs  min&#x3D;7µs      med&#x3D;24µs     max&#x3D;1.89ms   p(90)&#x3D;48µs     p(95)&#x3D;63µs</span><br><span class="line">http_req_tls_handshaking...: avg&#x3D;0s       min&#x3D;0s       med&#x3D;0s       max&#x3D;0s       p(90)&#x3D;0s       p(95)&#x3D;0s</span><br><span class="line">http_req_waiting...........: avg&#x3D;137.57ms min&#x3D;111.44ms med&#x3D;132.59ms max&#x3D;589.4ms  p(90)&#x3D;159.95ms p(95)&#x3D;169.41ms</span><br><span class="line">http_reqs..................: 13491  224.848869&#x2F;s</span><br><span class="line">iteration_duration.........: avg&#x3D;445.48ms min&#x3D;413.05ms med&#x3D;436.36ms max&#x3D;1.48s    p(90)&#x3D;464.94ms p(95)&#x3D;479.66ms</span><br><span class="line">iterations.................: 13410  223.498876&#x2F;s</span><br><span class="line">vus........................: 100    min&#x3D;100 max&#x3D;100</span><br><span class="line">vus_max....................: 100    min&#x3D;100 max&#x3D;100</span><br></pre></td></tr></table></figure><p> Mỗi thông số http_req đều có các thông số (avg, min. max, med, p(90), p(95))</p><p>http_req_blocked: Thời gian VU dành để chờ được phân bổ kết nối TCP từ nhóm kết nối.</p><p>http_req_connecting: Thời gian VU dành để thiết lập kết nối TCP đến máy chủ từ xa</p><p>http_req_duration: Thời gian thực hiện tra cứu DNS.</p><p>http_req_receiving: Thời gian nhận được trả lời từ máy chủ từ xa.</p><p>http_req_sending: Thời gian dành để truyền các yêu cầu HTTP đến máy chủ từ xa.</p><p>http_req_tls_handshaking: thời gian máy khách và máy chủ, xác nhận lẫn nhau và bắt đầu giao tiếp</p><p>http_req_waiting: Thời gian chờ đợi phản hồi trở lại từ máy chủ từ xa (sau khi đã gửi yêu cầu).</p><p>http_reqs: Tổng số yêu cầu HTTP được thực hiện trong toàn bộ thử nghiệm</p><p>iteration_duration: Tổng thời gian cho yêu cầu. (http_req_sending + http_req_waiting + http_req_receiving)</p><p>iterations: Tổng số lần tất cả các VU trong thử nghiệm được quản lý để chạy qua hàm default ().</p><p>vus: Có bao nhiêu VU thử nghiệm được cấu hình để mô phỏng.</p><p>vus_max: Số lượng vị trí VU được phân bổ trước mà thử nghiệm được định cấu hình (vus_max cho phép bạn mở rộng số lượng VU trong thử nghiệm để tối đa số lượng đó).</p><h1 id="Ket-luan"><a href="#Ket-luan" class="headerlink" title="Kết luận"></a>Kết luận</h1><p>Trên đây mình có giới thiệu sơ lược về kiểm trả perfomance bằng k6.io và sử dụng cloud k6 để test và visualization kết quả. Nhưng vì dùng bản miễn phí nên bị giới hạn khá nhiều. </p><p>Bài sau mình sẽ viết về việc dùng InfluxDB + Grafana để hiển thị kết qủa test miễn phí.</p><p>blog: <a href="https://phamtuananh1996.github.io/">https://phamtuananh1996.github.io/</a></p><p>Tham khảo: <a href="https://k6.io/docs/" target="_blank" rel="noopener">https://k6.io/docs/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Loi-mo-dau&quot;&gt;&lt;a href=&quot;#Loi-mo-dau&quot; class=&quot;headerlink&quot; title=&quot;Lời mở đầu&quot;&gt;&lt;/a&gt;Lời mở đầu&lt;/h1&gt;&lt;p&gt;Để có được một sản phẩm phần mềm tốt v
      
    
    </summary>
    
    
    
      <category term="server" scheme="https://phamtuananh1996.github.io/tags/server/"/>
    
      <category term="performence" scheme="https://phamtuananh1996.github.io/tags/performence/"/>
    
      <category term="test" scheme="https://phamtuananh1996.github.io/tags/test/"/>
    
      <category term="k6.io" scheme="https://phamtuananh1996.github.io/tags/k6-io/"/>
    
  </entry>
  
  <entry>
    <title>Hướng dẫn người dùng ngay trên chính website của bạn với vue-tour</title>
    <link href="https://phamtuananh1996.github.io/2021/11/25/huong-dan-nguoi-dung-ngay-tren-chinh-website-cua-ban-voi-vue-tour/"/>
    <id>https://phamtuananh1996.github.io/2021/11/25/huong-dan-nguoi-dung-ngay-tren-chinh-website-cua-ban-voi-vue-tour/</id>
    <published>2021-11-25T09:33:43.000Z</published>
    <updated>2024-01-04T00:39:10.962Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mo-dau"><a href="#Mo-dau" class="headerlink" title="Mở đầu"></a>Mở đầu</h1><p>Khi phát triển một ứng dụng website thì có rất nhiều thứ chúng ta cần quan tâm tới như ngôn ngữ, công nghệ, logic, performance, …. rất dễ bị cuốn vào các thứ đó mà lại quên đi một vài thứ nhỏ nhặt nhưng cũng quan trọng không kém là viết Guide thứ mà giúp cho người dùng biết cách sử dụng ứng dụng. Cách thường thấy để viết hướng dẫn sự dụng phần mềm là dùng file doc, pdf,  hoặc đến tận nơi cầm tay chỉ chuột.</p><p>Nay mình sẽ giới thiệu một super-simple library có thể thực hiện điều đó một cách đơn giản với vue-tour</p><p><img src="https://raw.githubusercontent.com/pulsardev/vue-tour/master/screenshot.gif" alt=""></p><h1 id="Dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h1><p>Vì là library của vue nên nếu chưa có project vue thì bạn có thể dùng vue-cli để init project vue nhanh chóng với lệnh: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vue create my-new-project</span><br></pre></td></tr></table></figure><p>Sau đó có thể install vue-tour băng cách sử sụng npm hoặc yarn</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install vue-tour</span><br><span class="line"></span><br><span class="line"># or with Yarn:</span><br><span class="line">$ yarn add vue-tour</span><br></pre></td></tr></table></figure><h1 id="Set-Up"><a href="#Set-Up" class="headerlink" title="Set Up"></a>Set Up</h1><p>Thêm plugin và load css ở file main.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import App from &#39;.&#x2F;App.vue&#39;</span><br><span class="line">import VueTour from &#39;vue-tour&#39;</span><br><span class="line"></span><br><span class="line">require(&#39;vue-tour&#x2F;dist&#x2F;vue-tour.css&#39;)</span><br><span class="line"></span><br><span class="line">Vue.use(VueTour)</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  render: h &#x3D;&gt; h(App)</span><br><span class="line">&#125;).$mount(&#39;#app&#39;)</span><br></pre></td></tr></table></figure><p>Cuối cùng thì chúng ta có thể dùng component <code>&lt;vue-tour :steps=&quot;steps&quot; /&gt;</code> ở bất kỳ đâu trong ứng dụng với prop của nó là một mảng các bước hướng dẫn step by step</p><h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><p>Có bốn bước để sử dụng vue-tour</p><p><strong>Đầu tiên</strong>: Thêm unique class hoặc thuộc tính properties vào element mà bạn muốn target tới để hướng dẫn.</p><p><strong>Bước hai</strong>: Khai báo các bước dùng mà bạn muốn hướng dẫn ngưới dùng thông qua một array các object mỗi object là một bước, và bao gồm: </p><table><thead><tr><th>Thuộc tính</th><th>Mô tả</th></tr></thead><tbody><tr><td>target</td><td>là một CSS selector cho element mà đã khai báo ở bước đầu</td></tr><tr><td>content</td><td>Nội dung mô tả cho element đó</td></tr><tr><td>params</td><td>có thể khai báo 1 số thông tin config khác</td></tr></tbody></table><p><strong>Bước 3</strong>. Thêm component <code>&lt;vue-tour name=&quot;whateverMyTourNameIs&quot; :steps=&quot;mySteps&quot;&gt;&lt;/vue-tour&gt;</code>  vào dự án</p><p><strong>Cuối cùng</strong>: Thêm lệnh <code>this.$tours[&#39;whateverMyTourNameIs&#39;].start()</code> vào mounted hook hoặc thêm vào sự kiện nào đó khi bạn muốn bắt đầu tour hướng dẫn</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container mx-auto my-5 flex justify-between"</span>&gt;</span><br><span class="line">    &lt;div id=<span class="string">"v-step-0"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"bg-green-500 p-5"</span>&gt;Step <span class="number">1</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="v-step-1 bg-blue-500 p-5"&gt;Step 2&lt;/</span>div&gt;</span><br><span class="line">    &lt;div data-v-step=<span class="string">"2"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"bg-indigo-500 p-5"</span>&gt;Step <span class="number">3</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &lt;v-tour name="myTour" :steps="steps"&gt;&lt;/</span>v-tour&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">'my-tour'</span>,</span><br><span class="line">    data () &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        steps: [</span><br><span class="line">          &#123;</span><br><span class="line">            target: <span class="string">'#v-step-0'</span>,  <span class="comment">// We're using document.querySelector() under the hood</span></span><br><span class="line">            header: &#123;</span><br><span class="line">              title: <span class="string">'Get Started'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            content: <span class="string">`Discover &lt;strong&gt;Vue Tour&lt;/strong&gt;!`</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            target: <span class="string">'.v-step-1'</span>,</span><br><span class="line">            content: <span class="string">'An awesome plugin made with Vue.js!'</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            target: <span class="string">'[data-v-step="2"]'</span>,</span><br><span class="line">            content: <span class="string">'Try it, you\'ll love it!&lt;br&gt;You can put HTML in the steps and completely customize the DOM to suit your needs.'</span>,</span><br><span class="line">            params: &#123;</span><br><span class="line">              placement: <span class="string">'top'</span> <span class="comment">// Any valid Popper.js placement. See https://popper.js.org/popper-documentation.html#Popper.placements</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.$tours[<span class="string">'myTour'</span>].start()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p><img src="https://images.viblo.asia/008baec0-e65f-4c15-a26c-0fe2a6549676.gif" alt=""></p><h1 id="Ket-luan"><a href="#Ket-luan" class="headerlink" title="Kết luận"></a>Kết luận</h1><p>Hy vọng qua bài viết này các bạn có thêm 1 lựa chọn để làm website của mình trở lên awesome hơn.<br>Cảm ơn các bạn đã theo dõi bài viết. hẹn gặp các bạn ở các bài viết sau !! :heart_eyes::heart_eyes::heart_eyes::heart_eyes:</p><p>Blog: <a href="https://phamtuananh1996.github.io">https://phamtuananh1996.github.io</a></p><p>Tham khảo : <a href="https://github.com/pulsardev/vue-tour" target="_blank" rel="noopener">https://github.com/pulsardev/vue-tour</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mo-dau&quot;&gt;&lt;a href=&quot;#Mo-dau&quot; class=&quot;headerlink&quot; title=&quot;Mở đầu&quot;&gt;&lt;/a&gt;Mở đầu&lt;/h1&gt;&lt;p&gt;Khi phát triển một ứng dụng website thì có rất nhiều t
      
    
    </summary>
    
    
    
      <category term="javascript" scheme="https://phamtuananh1996.github.io/tags/javascript/"/>
    
      <category term="vuejs" scheme="https://phamtuananh1996.github.io/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>5 Good Practices mình đang sử dụng trong Vuejs</title>
    <link href="https://phamtuananh1996.github.io/2021/11/25/5-good-practices-minh-dang-su-dung-trong-vuejs/"/>
    <id>https://phamtuananh1996.github.io/2021/11/25/5-good-practices-minh-dang-su-dung-trong-vuejs/</id>
    <published>2021-11-25T09:13:41.000Z</published>
    <updated>2024-01-04T00:39:10.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mo-dau"><a href="#Mo-dau" class="headerlink" title="Mở đầu"></a>Mở đầu</h1><p>Mình đã sử dụng vuejs được cũng được 1 năm trở lại đây. Khi mới bắt đầu học code thì chỉ code sao cho code chạy được đúng convention. Còn việc sau này có ai đó đọc code hay chính mình của 1 tháng sau đọc lại thì có còn hiểu và dễ dàng phát triển về sau không thì mình không để ý đến lắm. Chỉ khi đến khi đọc lại code của mình thì <strong>“wtf code này ai viết đây</strong>“. Chỉ muốn quay lại tát vào mặt thằng đã viết ra đống lộn xộn này thôi. Sau đây là một số ít kinh nghiệm mình có khi bắt đầu một dự án với vuejs</p><blockquote><p>Cũng có thế sau khi gặp dự án lớn thì nhưng kinh nghiệm này sẽ không còn đúng nữa. Nhưng bản thân mình ở tương lại tốt hơn ở hiện tại là cũng mừng lắm rồi :heart_eyes::heart_eyes:</p></blockquote><p><img src="https://images.viblo.asia/69cdee18-8d09-4ad7-93c0-47986054c791.jpg" alt=""></p><h1 id="1-Su-dung-slot-cho-component"><a href="#1-Su-dung-slot-cho-component" class="headerlink" title="1, Sử dụng slot cho component"></a>1, Sử dụng slot cho component</h1><p>Đa số mọi người khi tao ra component thường sẽ để ý đến prop, state, event của component đó. vì những thứ đó cơ bản đã đáp ứng yêu cầu tối thiểu của 1 component. Và những chức năng nhỏ, ít thay đổi thì cần nhưng thứ đó là component chạy ngon rồi. Nhưng đời không như mơ chức năng nhỏ nào cũng phải to thôi. ít thay đổi cũng phải thay đổi thôi.</p><p>*Hồi tưởng *</p><p>Trước đây mình có code tạo popup, Ngày từ đầu nó cũng không có gì phức tạp nó chỉ bao gồm tiêu đề, nội dung và một số button. Vì vậy mình đã dùng  3 prop tương ứng và emit event khi người dùng ấn vào button. Vậy là xong. Chạy ổn !</p><p>Tuy nhiên dự án phát triên theo thời gian . popup dễ thương của mình hôm nào đã không đáp ứng đủ yêu cầu. Khách hàng muốn hiển thị nhiều thứ khác trong đó như thêm header, footer, các trường khác nữa lại còn tùy thuộc vào mỗi trang mà popup sẽ hiện thị khác nhau. Mình nghĩ là cho thêm vài cái prop nữa là giải quyết được vấn đề. Nhưng component ngày càng trở lên phức tạp khó hiểu. emit quá nhiều sự kiện, Chưa kể đến là sửa ở trang này thì ảnh hưởng đến trang khác. <strong>Vậy là component của tôi coi như bỏ</strong> :joy::joy::joy::joy:</p><p>Mọi thứ có thể tốt hơn nếu ngay từ đầu mình nghĩ là vuejs còn có slot. Và mình đã refactor lại component . để ngắn ngọn , dễ hiểu và dễ mở rộng hơn.</p><p>Ví dụ:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"c-base-popup"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"$slots.header"</span> <span class="attr">class</span>=<span class="string">"c-base-popup__header"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"$slots.subheader"</span> <span class="attr">class</span>=<span class="string">"c-base-popup__subheader"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"subheader"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"c-base-popup__body"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"description"</span>&gt;</span>&#123;&#123; description &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"$slots.actions"</span> <span class="attr">class</span>=<span class="string">"c-base-popup__actions"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"actions"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"$slots.footer"</span> <span class="attr">class</span>=<span class="string">"c-base-popup__footer"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    description: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">default</span>: <span class="literal">null</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    title: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="actionscript">      required: <span class="literal">true</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Đọc thêm về slot ở đây <a href="https://vuejs.org/v2/guide/components-slots.html" target="_blank" rel="noopener">https://vuejs.org/v2/guide/components-slots.html</a></p><p>Hãy nhớ khi viết component thì đừng quên dùng slot nhé. Các dự án được xây dựng bởi các lập trình viên có kinh nghiệm, những người biết khi nào sử dụng vị trí sẽ tạo ra sự khác biệt lớn về khả năng bảo trì trong tương lai.</p><h1 id="2-Dat-ten-module-trong-Vuex-Store"><a href="#2-Dat-ten-module-trong-Vuex-Store" class="headerlink" title="2, Đặt tên module trong Vuex Store"></a>2, Đặt tên module trong Vuex Store</h1><p>Khi mình mới khi tìm hiểu về vue thì mình gặp 2 vấn đề trong dự án:</p><ul><li>Khi mình cần dự liệu ở component khác nhưng phải truy cập rất nhiều component khác để lấy được chúng.</li><li>Mình muốn dự liệu vẫn tồn tại khi component bị hủy</li></ul><p>Vậy là mình tìm hiểu về vuex. Sau khi tìm hiểu về module thì mình bắt đầu xây dựng store. Vấn đề là không có một khuôn mẫu nào chuẩn để mình làm theo nên mình thường đặt tên module theo tính năng. Ví dụ:</p><ul><li>Auth.</li><li>Blog</li><li>Inbox</li><li>Settings</li></ul><p>Sau khi làm một thời gian thì mình thấy đặt tên theo data model mà mình gọi <strong>API</strong> khá dễ hiểu ví dụ: </p><ul><li>Users</li><li>Teams</li><li>Messages</li><li>Widgets</li><li>Articles</li></ul><p>Bạn có thể đặt tên như nào cũng được vì không có một quy chuẩn nào cả. Nhưng đặt tên như kia sẽ giúp team của bạn dễ phảt triển hơn. Và các người mới vào dự án cũng tập trung vào base code hơn.</p><h1 id="3-Call-API-trong-action-va-commit-data-Vuex"><a href="#3-Call-API-trong-action-va-commit-data-Vuex" class="headerlink" title="3, Call API trong action và commit data (Vuex)"></a>3, Call API trong action và commit data (Vuex)</h1><p>Mình thường xuyên call API ở action của vuex (không phải tất cả các api) và commit data xuống state. Tại sao mình làm vậy: </p><ul><li>Nếu ở 2 trang mà call cùng 1 Api thì chúng ta phải gọi lại API đó ở 2 page, co vẻ bị trùng lặp code ở đây. Nếu bạn đã call api đó ở action thì chúng ta chỉ cần dispatch action đó là xong</li><li>Quan trọng hơn là code của chúng ta sẽ logic, clear hơn khi chúng ta biết api chúng ta gọi ở đâu.</li></ul><h1 id="4-Dung-quen-dung-mapState-mapGetters-mapMutations-and-mapActions"><a href="#4-Dung-quen-dung-mapState-mapGetters-mapMutations-and-mapActions" class="headerlink" title="4, Đừng quên dùng mapState, mapGetters, mapMutations and mapActions"></a>4, Đừng quên dùng mapState, mapGetters, mapMutations and mapActions</h1><p>Khi mới tìm hiểu vuex. Khi muốn truy cập vào state, getters, hay dispatch action thì mình hay dùng như thế này: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  computed: &#123;</span><br><span class="line">     myGetter() &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>.$store.getters[<span class="string">'myModule/myGetter'</span>];</span><br><span class="line">     &#125;,</span><br><span class="line">     myGetter2() &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>.$store.getters[<span class="string">'myModule/myGetter2'</span>];</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    myAction() &#123;</span><br><span class="line">        <span class="keyword">this</span>.$store.dispatch(<span class="string">'myModule/myAction'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">     myAction2() &#123;</span><br><span class="line">        <span class="keyword">this</span>.$store.dispatch(<span class="string">'myModule/myAction2'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Bạn thấy code chạy ổn nhưng hơi dài dòng. Thay vào đó hãy dùng mapState, mapGetters, mapMutations and mapActions</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapGetters, mapActions &#125; <span class="keyword">from</span> <span class="string">"vuex"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapGetters([<span class="string">'myModule/myGetter'</span>,<span class="string">'myModule/myGetter2'</span>])</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapAction([<span class="string">'myModule/myAction'</span>,<span class="string">'myModule/myAction2'</span>])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Code đã ngắn gọn hơn khá nhiều rồi. Các bạn tìm hiểu thêm về mapState, mapGetters, mapMutations and mapActions ở đây <a href="https://vuex.vuejs.org/" target="_blank" rel="noopener">https://vuex.vuejs.org/</a></p><h1 id="5-Su-dung-API-Factories"><a href="#5-Su-dung-API-Factories" class="headerlink" title="5, Sử dụng API Factories"></a>5, Sử dụng API Factories</h1><p>Mình thường tạo một this.$api helper để có thể call API ở bất cứ đâu. Ở thư mục gốc mình tạo 1 api folder. Folder này gồm tất cả các file chứa endpoint API Ví dụ:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">api</span><br><span class="line">├── auth.js</span><br><span class="line">├── notifications.js</span><br><span class="line">└── teams.js</span><br></pre></td></tr></table></figure><p>Mỗi file sẽ chứa endpoint có liên quan đến nó ví dụ:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">export default $axios &#x3D;&gt; (&#123;</span><br><span class="line">  forgotPassword(email) &#123;</span><br><span class="line">    return $axios.$post(&quot;&#x2F;auth&#x2F;password&#x2F;forgot&quot;, &#123; email &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  login(email, password) &#123;</span><br><span class="line">    return $axios.$post(&quot;&#x2F;auth&#x2F;login&quot;, &#123; email, password &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  logout() &#123;</span><br><span class="line">    return $axios.$get(&quot;&#x2F;auth&#x2F;logout&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  register(payload) &#123;</span><br><span class="line">    return $axios.$post(&quot;&#x2F;auth&#x2F;register&quot;, payload);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Để sử dụng được  this.$api helper mình thêm: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Auth <span class="keyword">from</span> <span class="string">"@/api/auth"</span>;</span><br><span class="line"><span class="keyword">import</span> Teams <span class="keyword">from</span> <span class="string">"@/api/teams"</span>;</span><br><span class="line"><span class="keyword">import</span> Notifications <span class="keyword">from</span> <span class="string">"@/api/notifications"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (context, inject) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.client) &#123;</span><br><span class="line">    <span class="keyword">const</span> token = localStorage.getItem(<span class="string">"token"</span>);</span><br><span class="line">    <span class="comment">// Set token when defined</span></span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">      context.$axios.setToken(token, <span class="string">"Bearer"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Initialize API repositories</span></span><br><span class="line">  <span class="keyword">const</span> repositories = &#123;</span><br><span class="line">    auth: Auth(context.$axios),</span><br><span class="line">    teams: Teams(context.$axios),</span><br><span class="line">    notifications: Notifications(context.$axios)</span><br><span class="line">  &#125;;</span><br><span class="line">  inject(<span class="string">"api"</span>, repositories);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Giờ mình chỉ cần gọi chúng trong component hay action trong vuex như này:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    onSubmit() &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.$api.auth.login(<span class="keyword">this</span>.email, <span class="keyword">this</span>.password);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(error);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Ket-luan"><a href="#Ket-luan" class="headerlink" title="Kết luận"></a>Kết luận</h1><p>Trên đây là số ít kinh nghiệm làm việc với vue của mình trong năm qua. Mọi người có thể đọc với mục đính tham khảo. Cảm ơn bạn đã đọc đến đây. :100::100:. Có gì các bạn cứ gạch đá nhé.</p><p>Xin chào thân ái và quyết thắng !!!</p><p>Blog: <a href="https://phamtuananh1996.github.io/">https://phamtuananh1996.github.io/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mo-dau&quot;&gt;&lt;a href=&quot;#Mo-dau&quot; class=&quot;headerlink&quot; title=&quot;Mở đầu&quot;&gt;&lt;/a&gt;Mở đầu&lt;/h1&gt;&lt;p&gt;Mình đã sử dụng vuejs được cũng được 1 năm trở lại đây
      
    
    </summary>
    
    
    
      <category term="javascript" scheme="https://phamtuananh1996.github.io/tags/javascript/"/>
    
      <category term="vuejs" scheme="https://phamtuananh1996.github.io/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>Tạo vue component library và publish nó lên npm trong 5 phút</title>
    <link href="https://phamtuananh1996.github.io/2020/12/21/tao-vue-component-library-va-publish-no-len-npm-trong-5-phut/"/>
    <id>https://phamtuananh1996.github.io/2020/12/21/tao-vue-component-library-va-publish-no-len-npm-trong-5-phut/</id>
    <published>2020-12-21T11:22:12.000Z</published>
    <updated>2024-01-04T00:39:10.962Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mo-dau"><a href="#Mo-dau" class="headerlink" title="Mở đầu"></a>Mở đầu</h1><p>Chào các bạn, từ trước đến giờ mỗi khi code chức năng gì đó chắc hẳn việc đầu tiên mình đều nghĩ đến có thư viện nào hỗ trợ việc đó không và lao ngay lên <a href="https://www.npmjs.com" target="_blank" rel="noopener">https://www.npmjs.com</a> search thử. Việc sử dụng thư viện có sẵn giúp mình tiết kiệm được rất nhiều thời gian và công sức khi code. Vừa dùng thư viện mình vừa nghĩ cảm ơn công động đã tạo ra thư viện awesome này giúp mình khá nhiều trong công việc.</p><p><img src="https://images.viblo.asia/189e21c8-432c-4777-8321-45f409855f3f.jpg" alt=""></p><p>Rồi mình cũng muốn viết ra 1 cái gì đó đơn giản để dùng được về sau. Và giới thiệu cho bạn bè cùng contribute hay đơn giản là cho bạn bè dùng thử và ném đá thư viện của mình cũng được. Cảm giác được thấy ai đó npm install thư viện của mình chắc phê phải biết.  Mơ mộng thế thôi chứ giờ mình mới tìm hiểu để viết 1 component library</p><h1 id="Tao-component-library"><a href="#Tao-component-library" class="headerlink" title="Tạo component library"></a>Tạo component library</h1><p>Để tạo 1 component library mình dùng package <code>vue-sfc-rollup</code> . Package giúp  tạo ra Vue Single File Component (SFC) hoặc library of multiple SFCs 1 cách nhanh chóng</p><p>Chi tiết các bạn có thể xem qua tại đây <a href="https://github.com/team-innovation/vue-sfc-rollup" target="_blank" rel="noopener">https://github.com/team-innovation/vue-sfc-rollup</a></p><p>Đầu tiên install package về:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g vue-sfc-rollup</span><br></pre></td></tr></table></figure><p>Tiếp theo chạy lệnh:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sfc-init</span><br></pre></td></tr></table></figure><p>Để tạo ra 1 Single File Component (SFC). Đừng quên chọn các tùy chọn</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Is this a single component or a library? Library</span><br><span class="line">What is the npm name of your library? sprite-to-gif (Đây là tiên thư viện)</span><br><span class="line">Will this library be written in JavaScript or TypeScript? JavaScript (Chọn dùng JavaScript hay TypeScript)</span><br><span class="line">Enter a location to save the library files (Đường dẫn đến thư mục bạn muốn lưu)</span><br></pre></td></tr></table></figure><p>Sau setup xong mình sẽ có file package.json như thế này</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"sprite-to-gif"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"dist/sprite-to-gif.ssr.js"</span>,</span><br><span class="line">  <span class="attr">"browser"</span>: <span class="string">"dist/sprite-to-gif.esm.js"</span>,</span><br><span class="line">  <span class="attr">"module"</span>: <span class="string">"dist/sprite-to-gif.esm.js"</span>,</span><br><span class="line">  <span class="attr">"unpkg"</span>: <span class="string">"dist/sprite-to-gif.min.js"</span>,</span><br><span class="line">  <span class="attr">"files"</span>: [</span><br><span class="line">    <span class="string">"dist/*"</span>,</span><br><span class="line">    <span class="string">"src/**/*.vue"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"serve"</span>: <span class="string">"vue-cli-service serve dev/serve.js"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"cross-env NODE_ENV=production rollup --config build/rollup.config.js"</span>,</span><br><span class="line">    <span class="attr">"build:ssr"</span>: <span class="string">"cross-env NODE_ENV=production rollup --config build/rollup.config.js --format cjs"</span>,</span><br><span class="line">    <span class="attr">"build:es"</span>: <span class="string">"cross-env NODE_ENV=production rollup --config build/rollup.config.js --format es"</span>,</span><br><span class="line">    <span class="attr">"build:unpkg"</span>: <span class="string">"cross-env NODE_ENV=production rollup --config build/rollup.config.js --format iife"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"@babel/core"</span>: <span class="string">"^7.9.0"</span>,</span><br><span class="line">    <span class="attr">"@babel/preset-env"</span>: <span class="string">"^7.9.5"</span>,</span><br><span class="line">    <span class="attr">"@rollup/plugin-alias"</span>: <span class="string">"^2.2.0"</span>,</span><br><span class="line">    <span class="attr">"@rollup/plugin-commonjs"</span>: <span class="string">"^11.1.0"</span>,</span><br><span class="line">    <span class="attr">"@rollup/plugin-replace"</span>: <span class="string">"^2.3.2"</span>,</span><br><span class="line">    <span class="attr">"@vue/cli-plugin-babel"</span>: <span class="string">"^4.3.1"</span>,</span><br><span class="line">    <span class="attr">"@vue/cli-service"</span>: <span class="string">"^4.3.1"</span>,</span><br><span class="line">    <span class="attr">"cross-env"</span>: <span class="string">"^7.0.2"</span>,</span><br><span class="line">    <span class="attr">"minimist"</span>: <span class="string">"^1.2.5"</span>,</span><br><span class="line">    <span class="attr">"rollup"</span>: <span class="string">"^2.7.3"</span>,</span><br><span class="line">    <span class="attr">"rollup-plugin-babel"</span>: <span class="string">"^4.4.0"</span>,</span><br><span class="line">    <span class="attr">"rollup-plugin-terser"</span>: <span class="string">"^5.3.0"</span>,</span><br><span class="line">    <span class="attr">"rollup-plugin-vue"</span>: <span class="string">"^5.1.6"</span>,</span><br><span class="line">    <span class="attr">"vue"</span>: <span class="string">"^2.6.11"</span>,</span><br><span class="line">    <span class="attr">"vue-template-compiler"</span>: <span class="string">"^2.6.11"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"peerDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"vue"</span>: <span class="string">"^2.6.11"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"engines"</span>: &#123;</span><br><span class="line">    <span class="attr">"node"</span>: <span class="string">"&gt;=10"</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>Cd vào forder và chạy lệnh npm install để cài đặt các package cần thiết</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd path/to/my-component-or-lib</span><br><span class="line"></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>Tiếp theo chạy lệnh <code>npm run serve</code>. Và truy cập vào  <a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> để xem component của mình.</p><p><img src="https://images.viblo.asia/85df85cd-6752-4c31-847b-d2051786d458.png" alt=""></p><p>Vậy là đã setup thành công. đây là component mẫu của package</p><p>Tiếp theo là nghĩ ý tưởng xem component của mình phục vụ cho mục đích gì và code nó thôi.Thì trước mình có viết 1 bài viblo về việc <a href="https://viblo.asia/p/bien-anh-sprites-thanh-anh-dong-voi-vuejs-ByEZkGQWZQ0" target="_blank" rel="noopener">biến ảnh sprites thành ảnh động với vue</a>  Các bạn có thể xem qua. Bài đó đã có code component rồi. nên mình chỉ đem bỏ vào file trong thư mục Src/lib-components là được. Và mình đặt tên component của mình là <code>sprite-to-gif</code> nhé</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div :style&#x3D;&quot;style&quot;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    image: String,</span><br><span class="line">    height: Number,</span><br><span class="line">    width: Number,</span><br><span class="line">    loop: Number,</span><br><span class="line">    frame: Number,</span><br><span class="line">    max: Number,</span><br><span class="line">    column: Number,</span><br><span class="line">    row: Number,</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.play()</span><br><span class="line">  &#125;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      style: &#123;</span><br><span class="line">        width: this.width + &#39;px&#39;,</span><br><span class="line">        height: this.height + &#39;px&#39;,</span><br><span class="line">        background: &#96;url($&#123;this.image&#125;)&#96;,</span><br><span class="line">        backgroundSize: &#96;$&#123;this.width * this.column&#125;px $&#123;this.height * this.row&#125;px&#96;,</span><br><span class="line">        backgroundPosition: &#39;0px 0px&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    play() &#123;</span><br><span class="line">      let i &#x3D; 0</span><br><span class="line">      let position &#x3D; &#123;</span><br><span class="line">        x: 0,</span><br><span class="line">        y: 0,</span><br><span class="line">        loop: 0,</span><br><span class="line">      &#125;</span><br><span class="line">      const playTimer &#x3D; setInterval(() &#x3D;&gt; &#123;</span><br><span class="line">        i++;</span><br><span class="line">        if(i % this.column) &#123;</span><br><span class="line">          position.x -&#x3D; this.width; </span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          position.y -&#x3D; this.height; </span><br><span class="line">          position.x &#x3D; 0;</span><br><span class="line">        &#125;</span><br><span class="line">        if (i &#x3D;&#x3D; this.max) &#123;</span><br><span class="line">          i &#x3D; 0</span><br><span class="line">          position.y &#x3D; 0; </span><br><span class="line">          position.x &#x3D; 0;</span><br><span class="line">          position.loop++;</span><br><span class="line">          if(position.loop &gt;&#x3D; this.loop) &#123;</span><br><span class="line">            clearInterval(playTimer)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        this.$set(this.style, &#39;backgroundPosition&#39;, &#96;$&#123;position.x&#125;px $&#123;position.y&#125;px&#96;)</span><br><span class="line">      &#125;, 1000&#x2F;this.frame);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>Vậy là xong. Để test component của mình thì mình tìm đến file <code>sprite-to-gif/dev/serve.vue</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import Vue from &#39;vue&#39;;</span><br><span class="line">import &#123; SpriteToGif &#125; from &#39;@&#x2F;entry&#39;;</span><br><span class="line"></span><br><span class="line">export default Vue.extend(&#123;</span><br><span class="line">  name: &#39;ServeDev&#39;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    SpriteToGif,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;sprite-to-gif </span><br><span class="line">      image&#x3D;&quot;https:&#x2F;&#x2F;images.viblo.asia&#x2F;a28b8126-1298-4ca7-a507-53865b32238d.png&quot;</span><br><span class="line">      :width&#x3D;&quot;100&quot;</span><br><span class="line">      :height&#x3D;&quot;100&quot;</span><br><span class="line">      :column&#x3D;&quot;7&quot;</span><br><span class="line">      :row&#x3D;&quot;4&quot;</span><br><span class="line">      :max&#x3D;&quot;27&quot;</span><br><span class="line">      :frame&#x3D;&quot;20&quot;</span><br><span class="line">      :loop&#x3D;&quot;10&quot;</span><br><span class="line">    &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p>Truy cập <a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> để xem thành quả</p><p><img src="https://images.viblo.asia/69d02ea2-183a-4094-aed3-fd6eee778ac0.gif" alt=""></p><p>Vậy là từ ảnh này mình đã biến nó thành động như kia rồi <img src="https://images.viblo.asia/a28b8126-1298-4ca7-a507-53865b32238d.png" alt=""></p><p>Giờ publish lên npm để mọi người trên toàn thế giới có thể dùng component của mình thôi :)</p><h1 id="Publish-len-npm"><a href="#Publish-len-npm" class="headerlink" title="Publish lên npm"></a>Publish lên npm</h1><p>Đầu tiên chạy lệnh build</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>Tiếp theo mình sẽ chạy lệnh để thêm tài khoản npm của mình vào. Các bạn có thể đăng ký tài khoản của mình ở <a href="https://www.npmjs.com/signup" target="_blank" rel="noopener">https://www.npmjs.com/signup</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm adduser</span><br></pre></td></tr></table></figure><p>Cuối cùng chạy lệnh để publish thư viện của mình</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure><p>Vậy là component của mình đã được publish tại đây : <a href="https://www.npmjs.com/package/sprite-to-gif" target="_blank" rel="noopener">https://www.npmjs.com/package/sprite-to-gif</a></p><p>Giờ chỉ cần 1 lệnh đơn giản là bạn có thể có component của mình rồi:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i sprite-to-gif</span><br></pre></td></tr></table></figure><p><img src="https://images.viblo.asia/444454dc-85ee-4e55-9f0a-4310d97e7f2d.gif" alt=""></p><p> Mà chưa xong. Mình phải viết doc cho component nữa (Cái này để sau vậy) </p><p> Push thư viện mình vừa viết lên github: <a href="https://github.com/phamtuananh1996/sprite-to-gif" target="_blank" rel="noopener">https://github.com/phamtuananh1996/sprite-to-gif</a></p><h1 id="Tong-ket"><a href="#Tong-ket" class="headerlink" title="Tổng kết"></a>Tổng kết</h1><p>Vậy là mình đã viết và publish component thành công lên npm 1 cách nhanh chóng và đơn giản.<br>Hy vọng sau bài này nếu bạn có 1 chức năng gì đó hay. Đừng để nó dưới máy rồi lẵng quên nó mà hãy push nó lên npm để mọi người cùng sử dụng Và github để lưu trữ cũng như để mọi người cùng contribute</p><p>Hẹn các bạn vào các bài viết tiếp theo, nếu hay các upvote và comment gạch đá nhiệt tình nhé.</p><p>Đọc thêm nhiều bài viết của mình ở đây <a href="https://phamtuananh1996.github.io">https://phamtuananh1996.github.io</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mo-dau&quot;&gt;&lt;a href=&quot;#Mo-dau&quot; class=&quot;headerlink&quot; title=&quot;Mở đầu&quot;&gt;&lt;/a&gt;Mở đầu&lt;/h1&gt;&lt;p&gt;Chào các bạn, từ trước đến giờ mỗi khi code chức năng 
      
    
    </summary>
    
    
    
      <category term="vuejs" scheme="https://phamtuananh1996.github.io/tags/vuejs/"/>
    
      <category term="npm" scheme="https://phamtuananh1996.github.io/tags/npm/"/>
    
      <category term="package" scheme="https://phamtuananh1996.github.io/tags/package/"/>
    
  </entry>
  
  <entry>
    <title>Xây dựng ứng dụng &quot;chat với người lạ&quot; với socketio cùng sự tham gia của vuejs</title>
    <link href="https://phamtuananh1996.github.io/2020/09/16/xay-dung-ung-dung-chat-voi-nguoi-la-voi-socketio-cung-su-tham-gia-cua-vuejs/"/>
    <id>https://phamtuananh1996.github.io/2020/09/16/xay-dung-ung-dung-chat-voi-nguoi-la-voi-socketio-cung-su-tham-gia-cua-vuejs/</id>
    <published>2020-09-15T18:36:41.000Z</published>
    <updated>2024-01-04T00:39:10.962Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mo-dau"><a href="#Mo-dau" class="headerlink" title="Mở đầu"></a>Mở đầu</h1><p>Chắc hẳn các bạn không còn xa lạ gì với kiểu ứng dụng chat với người lạ trên facebook hay trên các ứng dụng web. Kiểu như mình có thể nc tâm sự với một cú có gai nào đó trên mạng mà cả 2 người cùng không có thông tin gì về nhau. và khi kết thúc cuộc nói chuyện cũng chẳng có tin nhắn nào được lưu lại cả. Thích hợp với các FA như các bạn :)</p><p>Ở bài viết này mình sẽ thử làm 1 app chat như vậy và cũng để tìm hiểu về thằng socketio này.</p><h1 id="Socket-io-la-gi"><a href="#Socket-io-la-gi" class="headerlink" title="Socket io là gì ?"></a>Socket io là gì ?</h1><ul><li>Là một module của Nodejs</li><li>Được sử dụng trong các ứng dụng web thời gian thực.</li><li>Tạo ra một cơ chế liên lạc giữa client và server</li><li>Có thể cài đặt các module của Nodejs bằng NPM.</li></ul><p>Các bạn có thể tìm hiểu thêm ở đây: <a href="https://socket.io/docs/" target="_blank" rel="noopener">https://socket.io/docs/</a></p><h1 id="Cau-truc-thu-muc"><a href="#Cau-truc-thu-muc" class="headerlink" title="Cấu trúc thư mục"></a>Cấu trúc thư mục</h1><p>Mình sẽ tạo ra 2 thư mục là : server và client</p><p><img src="https://images.viblo.asia/57437156-7317-41a6-980e-ed3794e975b6.png" alt=""></p><ul><li>Thư mục <code>client</code> là nơi chưa code phần giao diện chát ở đây mình dùng vue-cli để tạo nhanh 1 project vuejs</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create client</span><br></pre></td></tr></table></figure><ul><li>Thư mục <code>server</code> sẽ là nơi cài đặt thư viện socket io trên môi trường nodejs</li></ul><p>Trong thư mục server mình tạo ra file package.json với nội dung sau:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"chat"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"nodemon index"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"phamtuananh760"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"nodemon"</span>: <span class="string">"^2.0.4"</span>,</span><br><span class="line">    <span class="attr">"socket.io"</span>: <span class="string">"^2.3.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Chạy lệnh: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>Để install  package nodemon và  socket.io</p><p>Và tạo ra 1 file index.js đây là nơi xử lý logic của mình</p><p>Cấu trúc thư mục cuối cùng sẽ như thế này:</p><p><img src="https://images.viblo.asia/96789d45-1b56-4079-b3aa-620600769000.png" alt=""></p><p>Cd vào thư mục server và chạy lệnh để khởi động server:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>Cd vào client và chạy lệnh :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p>Giờ thì vào đường dẫn localhost:8080 xem đã cài đặt thành công chưa:</p><p><img src="https://images.viblo.asia/463361ca-d6c4-4bc6-9b3b-615412d0be53.png" alt=""></p><p>Vậy là ok rồi !!!</p><h1 id="Lac-nao-va-Code"><a href="#Lac-nao-va-Code" class="headerlink" title="Lắc não và Code"></a>Lắc não và Code</h1><p>Về phần server, Vì ứng dụng không lưu lại thông tin người dùng cũng như lịch sử tin nhắn nên sẽ không cần đến cơ sở dữ liệu. Server chỉ nhận các even từ người này và emit tới người kia trong cùng 1 room. Và đảm bảo mỗi room chỉ có 2 client.</p><p>Về phần client sẽ kết nối đến server socket và sẽ nhận và hiển thị tin nhắn nếu nhận được tn đến room của mình. Thông báo có ng vào phòng hoặc rời phòng.</p><p>Đầu tiên mình dựng server socket ở cổng 3000 như sau:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const io &#x3D; require(&#39;socket.io&#39;)(3000);</span><br><span class="line"></span><br><span class="line">io.on(&#39;connect&#39;, socket &#x3D;&gt; &#123;</span><br><span class="line">  console.log(&#39;có người kết nối này&#39;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Khi có client kết nối đến thì mình sẽ log ra “có người kết nối này” để test việc kết nối giữa client với server.</p><p>Để client vue kết nối được đến server mình dùng thêm 1 package vue-socket.io:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-socket.io --save</span><br></pre></td></tr></table></figure><p>Sau khi cài đặt xong mình thêm đoạn code này vào file client/src/main.js:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import App from &#39;.&#x2F;App.vue&#39;</span><br><span class="line">import VueSocketIO from &#39;vue-socket.io&#39;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip &#x3D; false</span><br><span class="line"></span><br><span class="line">Vue.use(new VueSocketIO(&#123;</span><br><span class="line">  debug: true,</span><br><span class="line">  connection: &#39;http:&#x2F;&#x2F;localhost:3000&#39;,</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  render: h &#x3D;&gt; h(App),</span><br><span class="line">&#125;).$mount(&#39;#app&#39;)</span><br></pre></td></tr></table></figure><p>F5 lại trình duyệt. Và thấy server log như này là kết nối thành công rồi :</p><p><img src="https://images.viblo.asia/f677335e-ea35-48c3-9d41-c5ec0f3b82c7.png" alt=""></p><p>Tiếp theo khi client kết nối đến thì mình sẽ phải join client vào 1 room sao cho room đó đang có dưới 2 client đang join. và nếu không tìm được room nào như thế thì mình sẽ tạo 1 room mới vào join client đó vào. Mình sẽ đặt các room theo thứ tự từ 0 đến vân vân :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">const io &#x3D; require(&#39;socket.io&#39;)(3000);</span><br><span class="line"></span><br><span class="line">const getClientRoom &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    let index &#x3D; 0;</span><br><span class="line">    while (true) &#123;</span><br><span class="line">      if(!io.sockets.adapter.rooms[index] || io.sockets.adapter.rooms[index].length &lt; 2) &#123;</span><br><span class="line">        return index;</span><br><span class="line">      &#125;</span><br><span class="line">      index ++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">io.on(&#39;connect&#39;, socket &#x3D;&gt; &#123;</span><br><span class="line">    const clientRoom &#x3D; getClientRoom(); &#x2F;&#x2F; Lấy room thỏa mãn điều kiện</span><br><span class="line"></span><br><span class="line">    socket.join(clientRoom);</span><br><span class="line"></span><br><span class="line">    if(io.sockets.adapter.rooms[myRoom].length &lt; 2) &#123; &#x2F;&#x2F;kiểm tra xem phòng có dưới 2 ng trong phòng không </span><br><span class="line">        io.in(myRoom).emit(&#39;statusRoom&#39;, &#39;Đang chờ người lạ ...&#39;); &#x2F;&#x2F; emit cho tất cả client trong phòng</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        io.in(myRoom).emit(&#39;statusRoom&#39;, &#39;Người lạ đã vào phòng&#39;); &#x2F;&#x2F; emit cho tất cả client trong phòng</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    socket.on(&#39;disconnect&#39;, (reason) &#x3D;&gt; &#123; &#x2F;&#x2F; Khi client thoát thì emit cho người cùng phòng biết</span><br><span class="line">      socket.to(clientRoom).emit(&#39;statusRoom&#39;, &#39;Người lạ đã thoát. Đang chờ người tiếp theo ....&#39;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Hàm getClientRoom() mình sẽ duyệt qua các phòng nhằm tìm ra phòng đang có 1 client, hoặc tất cả các phòng đã có 2 ng rồi thì sẽ tạo phòng mới và join client đó vào.</p><p>Sau khi join xong mình sẽ emit tình trạng phòng đó cho client. Nếu phòng hiện tại đang có 1 người thì emit với message ‘<code>Đang chờ người lạ ...</code>‘. Nếu đủ 2 người sẽ emit với mesage ‘<code>Người lạ đã vào phòng</code>‘ cho client , Khi người dùng thoát cũng emit về thông báo ng dùng đã thoát.</p><p>Các bạn có thể tham khảo các lệnh emit của socket io tại bài viết này : <a href="https://viblo.asia/p/tat-tan-tat-nhung-lenh-emit-trong-socketio-Qbq5Qj8wKD8" target="_blank" rel="noopener">https://viblo.asia/p/tat-tan-tat-nhung-lenh-emit-trong-socketio-Qbq5Qj8wKD8</a></p><p>Để client có thể nhận được tình trạng phòng mình sẽ code thêm trong file <code>client/src/App.vue</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;div v-<span class="keyword">for</span>=<span class="string">"(message, index) in messages"</span> :key=<span class="string">"index"</span>&gt;</span><br><span class="line">      &#123;&#123; message.type &#125;&#125; : &#123;&#123; message.message &#125;&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;input type="text" v-model="text"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button&gt;Send&lt;/</span>button&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'App'</span>,</span><br><span class="line"></span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      text: <span class="string">''</span>,</span><br><span class="line">      messages: [],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  sockets: &#123;</span><br><span class="line">    initRoom: <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123; <span class="comment">// Đây là nơi nhận cái even initRoom với param là message mà server emit về</span></span><br><span class="line">      <span class="keyword">this</span>.messages.push(&#123;</span><br><span class="line">        message,</span><br><span class="line">        type: <span class="string">'status'</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>Vậy là đã lấy được tình trạng phòng. giờ thì mở 2 tab trình duyệt test thôi :</p><p><img src="https://images.viblo.asia/fc6dea48-87b1-4262-be39-9fab9aa5bd91.gif" alt=""></p><p>Vậy là ok rồi. Có thể thấy nếu mở 2 tab mà đã cùng 1 room rồi. thì khi mở tab thứ 3 thì tab này sẽ join vào room khác.</p><p>Tiếp theo là sự kiện gửi và nhận tin nhắn giữa 2 client:</p><p>Dưới client khi ấn nút gửi thì sẽ emit 1 event lên server:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    sendMessage() &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.text !== <span class="string">''</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$socket.emit(<span class="string">'sendMessage'</span>, <span class="keyword">this</span>.text) <span class="comment">// emit lên server</span></span><br><span class="line">        <span class="keyword">this</span>.messages.push(&#123;</span><br><span class="line">          message: <span class="keyword">this</span>.text,</span><br><span class="line">          type: <span class="string">'send'</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.text = <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Đồng thời mình push luôn message ấy vào mảng đã có.</p><p>Trên server để nhận event mình dùng </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">socket.on(<span class="string">'sendMessage'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123; <span class="comment">// nhận message từ client </span></span><br><span class="line">    socket.to(clientRoom).emit(<span class="string">'receiveMessage'</span>, message); <span class="comment">// emit message ấy cho người trong room ngoại trừ người gửi</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Tương tự dưới client để nhận tin nhắn của người khác mình dùng: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sockets: &#123;</span><br><span class="line">    statusRoom: <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.messages.push(&#123;</span><br><span class="line">        message,</span><br><span class="line">        type: <span class="string">'status'</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    receiveMessage: <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123; <span class="comment">//nhận tín nhắn từ ng khác trong phòng, push tin nhắn vào mảng ban đầu</span></span><br><span class="line">      <span class="keyword">this</span>.messages.push(&#123;</span><br><span class="line">        message,</span><br><span class="line">        type: <span class="string">'receive'</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>Vậy là hoàn thành sương sương chức năng rồi. chạy lên xem ok chưa.</p><p><img src="https://images.viblo.asia/10238e94-31fa-4837-adfc-852b0119cefe.gif" alt=""></p><p>Vậy là xong rồi. lên mạng kiếm cái template chat nào xịn xò tý là ok.</p><p><img src="https://images.viblo.asia/f469661c-49ae-4819-a36c-fb38d57f5a5d.gif" alt=""></p><h1 id="Dockerize-ung-dung"><a href="#Dockerize-ung-dung" class="headerlink" title="Dockerize ứng dụng"></a>Dockerize ứng dụng</h1><p>Để chạy project mà không phụ thuộc vào môi trường trên máy thì mình thêm file docker-compose.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">server:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">node:10-alpine</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./server:/server</span></span><br><span class="line">        <span class="attr">working_dir:</span> <span class="string">/server</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">"3000:3000"</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">        <span class="attr">command:</span> <span class="string">&gt;</span></span><br><span class="line">            <span class="string">sh</span> <span class="string">-c</span> <span class="string">"npm i &amp;&amp; npm run dev"</span></span><br><span class="line">    <span class="attr">client:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">node:10-alpine</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./client:/client</span></span><br><span class="line">        <span class="attr">working_dir:</span> <span class="string">/client</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">"8080:8080"</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">        <span class="attr">command:</span> <span class="string">&gt;</span></span><br><span class="line">            <span class="string">sh</span> <span class="string">-c</span> <span class="string">"npm i &amp;&amp; npm run serve"</span></span><br></pre></td></tr></table></figure><p>Giờ thì cần chạy lệnh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><h1 id="Source-code-demo"><a href="#Source-code-demo" class="headerlink" title="Source code, demo"></a>Source code, demo</h1><p>Các bạn có thể tham khảo code ở đây : <a href="https://github.com/phamtuananh1996/chat" target="_blank" rel="noopener">https://github.com/phamtuananh1996/chat</a></p><p>Demo: <a href="https://chatvnl.herokuapp.com" target="_blank" rel="noopener">https://chatvnl.herokuapp.com</a></p><p>Các bạn có thể mở 2 tab để test</p><h1 id="Tong-ket"><a href="#Tong-ket" class="headerlink" title="Tổng kết"></a>Tổng kết</h1><p>Vậy là mình đã hoàn thành 1 ứng dụng nhỏ nhỏ vui vui để hiểu cách dùng socketio rồi. Hẹn các bạn vào các bài viết tiếp theo, nếu hay các upvote và comment gạch đá nhiệt tình nhé.</p><p>Đọc thêm nhiều bài viết của mình ở đây  <a href="https://phamtuananh1996.github.io">https://phamtuananh1996.github.io</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mo-dau&quot;&gt;&lt;a href=&quot;#Mo-dau&quot; class=&quot;headerlink&quot; title=&quot;Mở đầu&quot;&gt;&lt;/a&gt;Mở đầu&lt;/h1&gt;&lt;p&gt;Chắc hẳn các bạn không còn xa lạ gì với kiểu ứng dụng 
      
    
    </summary>
    
    
    
      <category term="javascript" scheme="https://phamtuananh1996.github.io/tags/javascript/"/>
    
      <category term="vuejs" scheme="https://phamtuananh1996.github.io/tags/vuejs/"/>
    
      <category term="socket.io" scheme="https://phamtuananh1996.github.io/tags/socket-io/"/>
    
  </entry>
  
  <entry>
    <title>&#39;2&#39; + &#39;2&#39; - &#39;2&#39; = 20. Tại sao vậy? Quy tắc khi cộng trừ chuỗi và số với javascript</title>
    <link href="https://phamtuananh1996.github.io/2020/08/17/2-2-2-20-tai-sao-vay-quy-tac-khi-cong-tru-chuoi-va-so-voi-javascript/"/>
    <id>https://phamtuananh1996.github.io/2020/08/17/2-2-2-20-tai-sao-vay-quy-tac-khi-cong-tru-chuoi-va-so-voi-javascript/</id>
    <published>2020-08-17T06:01:26.000Z</published>
    <updated>2024-01-04T00:39:10.946Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ij_hqKUb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/damiancipolat/js_vs_memes/blob/master/doc/mind_js.jpg%3Fraw%3Dtrue" alt=""></p><h1 id="Mo-dau"><a href="#Mo-dau" class="headerlink" title="Mở đầu"></a>Mở đầu</h1><p>Các phép cộng trự nhân chia trong lập trình khá quan trọng, ngoài nhưng cái phép cộng trự basic thì nó còn có những phép tính rất khó như các chuỗi + với number. Cùng tìm hiểu một lần cho cuộc sống đỡ bế tắc nhé!.</p><p>Nếu đọc tiêu đề của bài này mà trong đầu các bạn nghĩ ngay là phép tình này bình thường mà có gì đâu mà lạ thì bạn có thể bỏ qua bài viết này . Còn nếu ngược lại thì cùng mình tìm hiểu xem tại sao lại như thế nhé!</p><p>Ở bài này mình chỉ thực hiện với các số nguyên thôi nhé. Tính toán với các số thực mình xin phép để phần sau.</p><p>Các bạn có thể Ctrl + Shift + i ngay tại bài viết này để thực hiện phép tình cộng trừ vời mình nhé !</p><h1 id="Phep-cong"><a href="#Phep-cong" class="headerlink" title="Phép cộng"></a>Phép cộng</h1><h2 id="Number-Number-Number"><a href="#Number-Number-Number" class="headerlink" title="Number + Number = Number"></a>Number + Number = Number</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="number">1</span> + <span class="number">1</span> ) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>Chắc cái này ai cũng biết rồi. Đơn giản là cộng 2 số vào nhau thôi.</p><h2 id="String-String-String"><a href="#String-String-String" class="headerlink" title="String + String = String"></a>String + String = String</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="string">'1'</span> + <span class="string">'1'</span> ) <span class="comment">// '11'</span></span><br></pre></td></tr></table></figure><p>Đây là phép nối chuỗi thông thường. Không có gì đặc biệt cả.</p><h2 id="String-Number-String"><a href="#String-Number-String" class="headerlink" title="String + Number = String"></a>String + Number = String</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="string">'10'</span> + <span class="number">10</span> ) <span class="comment">// '1010'</span></span><br></pre></td></tr></table></figure><p>Trong js nếu bạn cộng chuỗi với số thì js sẽ chuyển số thành chuỗi và thực hiện phép nỗi chuỗi như bình thường vì vậy kết quả sẽ ra 1 chuỗi.</p><h2 id="Number-Number-String-String"><a href="#Number-Number-String-String" class="headerlink" title="Number  + Number + String = String"></a>Number  + Number + String = String</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="number">10</span> + <span class="number">10</span> + <span class="string">'10'</span> ) <span class="comment">// '2010'</span></span><br></pre></td></tr></table></figure><p>Bạn có thắc mắc là sao kết quả là chuỗi ‘2010’ . Do js sẽ thực hiện tính toán từ trái qua phải . và áp dụng các quy tắc trên. Lấy 10 + 10 = 20 . Rồi lấy 20 cộng chuỗi với ‘10’ nên kq là 2010</p><p>Đối với trường hợp:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="number">10</span> + (<span class="number">10</span> + <span class="string">'10'</span>) ) <span class="comment">// '101010'</span></span><br></pre></td></tr></table></figure><p>Do js sẽ thực hiện phép tính trong ngoặc trước. và cũng áp dụng các quy tắc trên</p><blockquote><p>Như vậy mình có thể thấy nếu cộng chuỗi cho số. thì js sẽ biến đổi số của mình thành chuỗi rồi sau đó cộng chuỗi như bình thường. Và cũng thực hiện từ trái qua phải trong ngoặc trước ngoài ngoặc sau.</p></blockquote><h1 id="Phep-tru"><a href="#Phep-tru" class="headerlink" title="Phép trừ"></a>Phép trừ</h1><h2 id="Number-Number-Number-1"><a href="#Number-Number-Number-1" class="headerlink" title="Number - Number = Number"></a>Number - Number = Number</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="number">1</span> - <span class="number">1</span> ) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>Cái này thì bình thường rồi.</p><h2 id="String-String"><a href="#String-String" class="headerlink" title="String - String = ???"></a>String - String = ???</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="string">'viblo'</span> - <span class="string">'asia'</span> ) <span class="comment">// NaN (Not a Number)</span></span><br></pre></td></tr></table></figure><p>Với ví dụ này thì js đã cố gắng chuyển chuỗi ‘viblo’ về số nhưng không thể chuyển được nên kq sẽ là NaN.</p><p>Tiếp đến ta xét 1 trường hợp nữa:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="string">'123'</span> - <span class="string">'12'</span> ) <span class="comment">// 111</span></span><br></pre></td></tr></table></figure><p>Js đã chuyển 2 chuỗi kia về số và tiến hành trừ cho nhau nên kq ra 1 số.</p><h2 id="String-Number"><a href="#String-Number" class="headerlink" title="String - Number = ???"></a>String - Number = ???</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="number">123</span> - <span class="string">'12'</span> ) <span class="comment">// 111</span></span><br></pre></td></tr></table></figure><p>Tương tự như vậy Js đã chuyển chuỗi ‘12’ thành số 12 và tiến hành thực hiện phép tính 123 - 12 = 111.</p><blockquote><p>Trong js nếu trong phép trừ mà có xuất hiện chuỗi thì nó sẽ cố gắng chuyển chuỗi đó thành số và thực hiện phép tính như bình thường còn nếu không chuyển được thì kết quả sẽ là NaN</p></blockquote><h1 id="Mix-cong-tru"><a href="#Mix-cong-tru" class="headerlink" title="Mix cộng trừ"></a>Mix cộng trừ</h1><p>Nếu các bạn đã nắm dõ các quy tắc trên thì đến đây phép tính ở tiêu đề sẽ không là khó được bạn:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'2'</span> + <span class="string">'2'</span> - <span class="string">'2'</span>) <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><p>Áp dụng các quy tắc nói ở trên thì js sẽ lần lượt thực hiện phép tình từ trái qua phải. </p><p>Đầu tiên sẽ lấy ‘2’ + ‘2’  = ‘22’ // Đây là phép cộng chuỗi<br>Tiếp theo sẽ lấy ‘22’ - ‘2’ = 20 // Như đã nói ở trên thì js sẽ cố gắng chuyển ‘22’  và ‘2’ thành số 22  và 2 rồi từ đi nhau và kết quả sẽ là số 20. Đơn giản phải không nào</p><h1 id="Ket-luan"><a href="#Ket-luan" class="headerlink" title="Kết luận"></a>Kết luận</h1><p>Qua bài này các bạn chỉ cần nhớ:</p><blockquote><p>Nếu cộng chuỗi cho số. thì js sẽ biến đổi số của mình thành chuỗi rồi sau đó cộng chuỗi như bình thường. Và cũng thực hiện từ trái qua phải trong ngoặc trước ngoài ngoặc sau.</p><p>Trong js nếu trong phép trừ mà có xuất hiện chuỗi thì nó sẽ cố gắng chuyển chuỗi đó thành số và thực hiện phép tính như bình thường còn nếu không chuyển được thì kết quả sẽ là NaN</p></blockquote><p>Ở bài sau mình sẽ tìm hiểu về cộng trừ nhân chia số thực nhé! </p><p>Blog: <a href="https://phamtuananh1996.github.io/">https://phamtuananh1996.github.io/</a></p><p>Đừng quên để lại 1 like, comment và sub kênh, ấn thông báo để nhận được các bài viết từ mình nhé.</p><p>Chào thân ái và quyết thắng !</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--ij_hqKUb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gi
      
    
    </summary>
    
    
    
      <category term="javascript" scheme="https://phamtuananh1996.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Cài đặt và cấu hình Caddy Server</title>
    <link href="https://phamtuananh1996.github.io/2020/07/27/cai-dat-va-cau-hinh-caddy-server/"/>
    <id>https://phamtuananh1996.github.io/2020/07/27/cai-dat-va-cau-hinh-caddy-server/</id>
    <published>2020-07-27T09:34:39.000Z</published>
    <updated>2024-01-04T00:39:10.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mo-dau"><a href="#Mo-dau" class="headerlink" title="Mở đầu"></a>Mở đầu</h1><p>Bạn đã quá quen thuộc với các web server truyền thống như: Nginx, Apache, … Mình nghĩ bạn nên thử qua  caddyserver. Bạn sẽ không còn lo lắng, mệt mỏi khi phải đi tìm đọc tài liệu, tìm kiếm thông cài đặt cấu hình để hệ thống hoạt động một cách trơn tru. Mà thay vào đó, bạn chỉ việc dành 1 phút để tạo và config server chỉ với một vài dòng code để hệ thống server bắt đầu chạy. Nó cực kỳ đơn giản, và các tài liệu sáng sủa dễ hiểu thì có thể trong tương lai gần nó sẽ là đối thủ của nginx.</p><p><img src="https://caddyserver.com/resources/images/moving-parts.svg" alt=""></p><h1 id="Gioi-thieu"><a href="#Gioi-thieu" class="headerlink" title="Giới thiệu"></a>Giới thiệu</h1><p>Caddy là một nền tảng web server mạnh mẽ, được viết bằng Go  là 1 open-source và đang được cộng đồng phát triển rất mạnh mẽ.  Nó hướng tới HTTP/2.0 và mặc định sử dụng HTTPS. Ngoài ra còn là một lựa chọn tuyệt vời cho: load balancing, cổng api, ingress controller, process supervisor, task scheduler.</p><h1 id="Cai-dat"><a href="#Cai-dat" class="headerlink" title="Cài đặt"></a>Cài đặt</h1><p>Bạn có thể tải trực tiếp từ github sử dụng curl:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -OL &quot;https:&#x2F;&#x2F;github.com&#x2F;caddyserver&#x2F;caddy&#x2F;releases&#x2F;latest&#x2F;download&#x2F;ASSET&quot;</span><br></pre></td></tr></table></figure><p>Sử dụng wget: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget &quot;https:&#x2F;&#x2F;github.com&#x2F;caddyserver&#x2F;caddy&#x2F;releases&#x2F;latest&#x2F;download&#x2F;ASSET&quot;</span><br></pre></td></tr></table></figure><h3 id="Cai-dat-cho-Debian-Ubuntu-Raspbian"><a href="#Cai-dat-cho-Debian-Ubuntu-Raspbian" class="headerlink" title="Cài đặt cho Debian, Ubuntu, Raspbian"></a>Cài đặt cho Debian, Ubuntu, Raspbian</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;deb [trusted&#x3D;yes] https:&#x2F;&#x2F;apt.fury.io&#x2F;caddy&#x2F; &#x2F;&quot; \</span><br><span class="line">    | sudo tee -a &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;caddy-fury.list</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install caddy</span><br></pre></td></tr></table></figure><h3 id="Cai-dat-cho-Fedora-RedHat-CentOS"><a href="#Cai-dat-cho-Fedora-RedHat-CentOS" class="headerlink" title="Cài đặt cho Fedora, RedHat, CentOS"></a>Cài đặt cho Fedora, RedHat, CentOS</h3><p>Fedora or RHEL/CentOS 8:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dnf install &#39;dnf-command(copr)&#39;</span><br><span class="line">dnf copr enable @caddy&#x2F;caddy</span><br><span class="line">dnf install caddy</span><br></pre></td></tr></table></figure><p>RHEL/CentOS 7:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install yum-plugin-copr</span><br><span class="line">yum copr enable @caddy&#x2F;caddy</span><br><span class="line">yum install caddy</span><br></pre></td></tr></table></figure><h3 id="Cai-dat-cho-macOS"><a href="#Cai-dat-cho-macOS" class="headerlink" title="Cài đặt cho macOS"></a>Cài đặt cho macOS</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install caddy</span><br></pre></td></tr></table></figure><p>Sau khi cài đặt xong bạn có thể kiểm tra xem caddy đã hoạt động chưa bằng lệnh: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">caddy version</span><br></pre></td></tr></table></figure><p>Kiểm tra trạng thái của caddy:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status caddy</span><br></pre></td></tr></table></figure><p>Bạn có thể dừng caddy với lệnh :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop caddy</span><br></pre></td></tr></table></figure><p>Để nhận các thay đổi trong file config bạn có thể chạy lệnh: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl reload caddy</span><br></pre></td></tr></table></figure><blockquote><p>Lưu ý : Không dừng service khi thay đổi config. Dừng service sẽ dẫn đến  downtime hệ thông.  thay vào đó hãy sử dụng lệnh reload để thay thế.</p></blockquote><h1 id="Cau-hinh"><a href="#Cau-hinh" class="headerlink" title="Cấu hình"></a>Cấu hình</h1><p>Caddy cung cấp cho chúng ta 2 cách cấu hình với JSON file và Caddyfile:</p><h2 id="Voi-Jsonfile"><a href="#Voi-Jsonfile" class="headerlink" title="Với Jsonfile"></a>Với Jsonfile</h2><p>Đầu tiên chúng ta tạo 1 file json với nội dung sau: </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"apps"</span>: &#123;</span><br><span class="line"><span class="attr">"http"</span>: &#123;</span><br><span class="line"><span class="attr">"servers"</span>: &#123;</span><br><span class="line"><span class="attr">"example"</span>: &#123;</span><br><span class="line"><span class="attr">"listen"</span>: [<span class="string">":2015"</span>],</span><br><span class="line"><span class="attr">"routes"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"handle"</span>: [&#123;</span><br><span class="line"><span class="attr">"handler"</span>: <span class="string">"static_response"</span>,</span><br><span class="line"><span class="attr">"body"</span>: <span class="string">"Hello, world!"</span></span><br><span class="line">&#125;]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Để apply file này chúng ta cần sử dụng 1 api của candy:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:2019&#x2F;load \</span><br><span class="line">-X POST \</span><br><span class="line">-H &quot;Content-Type: application&#x2F;json&quot; \</span><br><span class="line">-d @caddy.json</span><br></pre></td></tr></table></figure><p>Để kiểm tra xem chúng ta đã cấu hình thành công hay chưa hãy dùng lệnh: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:2015</span><br><span class="line">Hello, world!</span><br></pre></td></tr></table></figure><p>nếu xuất hiện “Hello, world!” thì chúc mừng bạn đã cấu hình thành công. bạn có thể tham khảo qua JSON document. tại đây. <a href="https://caddyserver.com/docs/json/" target="_blank" rel="noopener">https://caddyserver.com/docs/json/</a></p><h3 id="voi-Caddyfile"><a href="#voi-Caddyfile" class="headerlink" title="với Caddyfile"></a>với Caddyfile</h3><p>Để cấu hình với caddyfile bạn cần tạo một file với tên là Caddyfile<br>Để chạy được ứng dụng “Helllo world” như trên thì với Caddyfile thì hoàn toàn đơn giản như sau: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">localhost</span><br><span class="line">tls internal</span><br><span class="line">respond &quot;Hello, world!&quot;</span><br></pre></td></tr></table></figure><p>Như file cấu hình trên có dòng localhost đây là tên domain bạn cần cấu hình. Ngoài ra, để cấu hình https cho Caddy Server bạn có thể cấu hình nhanh chóng bằng cách sử dụng config tls internal, Caddy sẽ sử dụng tệp chứng chỉ cục bộ cho trang web này.</p><h1 id="Ung-dung"><a href="#Ung-dung" class="headerlink" title="Ứng dụng"></a>Ứng dụng</h1><p>Giả sử một ứng dụng web của chúng ta có frontend được xây dựng với nuxtjs và được chạy ở cổng 3000. và api backend laravel chạy ở cổng 8000. vậy  làm thế nào để forward vào ứng dụng này với Caddy. Rất đơn giản các bạn tạo 1 file Caddyfile với lệnh sau:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">localhost</span><br><span class="line">tls internal</span><br><span class="line">reverse_proxy localhost:3000</span><br><span class="line">route &#x2F;api&#x2F;* &#123;</span><br><span class="line">    uri strip_prefix &#x2F;api</span><br><span class="line">    reverse_proxy localhost:9000</span><br></pre></td></tr></table></figure><p>vậu là chúng ta đã cấu hình xong ứng dụng rồi với:<br>Client: localhost<br>Server API: localhost/api/</p><p>Trên đây là 2 cách cấu hình phổ biến của caddy. Thử so sánh qua 2 cách cấu hình này nhé. bạn có thể tham khảo trên trang chủ tại đây <a href="https://caddyserver.com/docs/getting-started" target="_blank" rel="noopener">https://caddyserver.com/docs/getting-started</a></p><h1 id="So-sanh-JSON-va-Caddyfile"><a href="#So-sanh-JSON-va-Caddyfile" class="headerlink" title="So sánh JSON và Caddyfile"></a>So sánh JSON và Caddyfile</h1><p>So sánh ưu và nhược điểm của json và caddyfile: </p><p><img src="https://images.viblo.asia/ed7e0fe9-fb47-494a-81e1-3263580379e3.png" alt=""></p><h1 id="Ket-luan"><a href="#Ket-luan" class="headerlink" title="Kết luận"></a>Kết luận</h1><p>Caddy vẫn còn khá mới mẻ. và đang được cộng đồng phát triển tích cực. Có lẽ một ngày không xa nó sẽ trở lên phổ biến. vậy hãy tìm kiểu nó ngay ngày hôm nay nhé các pro.<br>Chào, Thân ái và quết thắng !!!</p><p>Tham khảo : </p><p><a href="https://caddyserver.com/" target="_blank" rel="noopener">https://caddyserver.com/</a></p><p><a href="https://www.marketenterprise.vn/" target="_blank" rel="noopener">https://www.marketenterprise.vn/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mo-dau&quot;&gt;&lt;a href=&quot;#Mo-dau&quot; class=&quot;headerlink&quot; title=&quot;Mở đầu&quot;&gt;&lt;/a&gt;Mở đầu&lt;/h1&gt;&lt;p&gt;Bạn đã quá quen thuộc với các web server truyền thống 
      
    
    </summary>
    
    
    
      <category term="Caddy Server" scheme="https://phamtuananh1996.github.io/tags/Caddy-Server/"/>
    
  </entry>
  
  <entry>
    <title>Xây dựng một website cực nhanh với Hexo và github pages</title>
    <link href="https://phamtuananh1996.github.io/2020/06/01/xay-dung-mot-website-cuc-nhanh-voi-hexo-va-github-pages/"/>
    <id>https://phamtuananh1996.github.io/2020/06/01/xay-dung-mot-website-cuc-nhanh-voi-hexo-va-github-pages/</id>
    <published>2020-06-01T08:26:57.000Z</published>
    <updated>2024-01-04T00:39:10.962Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mo-dau"><a href="#Mo-dau" class="headerlink" title="Mở đầu"></a>Mở đầu</h1><p>Bạn nghĩ sao về việc có 1 blog các nhân cho riêng mình. Vừa là nơi chia sẻ kiến thức của bản thân đồng thời cũng là 1 kênh để PR cho bản thân. Nhưng bạn lại không muốn mất quá nhiều thời gian để build lại blog từ đầu rồi là chọn công nghệ backend dùng gì fronend dùng gì. Rồi phải bỏ 1 số tiền cũng kha khá để thuê hosting với tên miền. Chưa kể đến là bạn không phải dân dev web thì sao?</p><p>Với hexo và github pages sẽ giải quyết các vấn đề trên giúp bạn !</p><h1 id="Hexo-la-gi"><a href="#Hexo-la-gi" class="headerlink" title="Hexo là gì"></a>Hexo là gì</h1><p><strong>Hexo</strong> là một blog framework mạnh mẽ, nó tạo static web một cách đơn giản và nhanh chóng hoàn toàn bằng NodeJS. Bạn có thể viết bài bằng Markdown hoặc các markup languages khác.</p><h1 id="Bat-dau-ngay-thoi-nao"><a href="#Bat-dau-ngay-thoi-nao" class="headerlink" title="Bắt đầu ngay thôi nào"></a>Bắt đầu ngay thôi nào</h1><p>Với hexo thì rất đơn giản để có ngay 1 website tĩnh với các câu lệnh sau: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init blog</span><br><span class="line">$ cd blog</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>Vậy là xong tiếp theo là truy cập vào đường dẫn <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>  và xem kết quả:</p><p><img src="https://images.viblo.asia/c6fd18d0-b7f2-4ab0-bd42-1cfd6c882e2b.png" alt=""></p><p>Và done . Rất đơn giản  phải không nào </p><p>Tiếp theo là lên chọn 1 cái template thật lung linh , hexo cung cấp sẵn cho chúng khoảng 311 Themes tha hồ lựa chọn các bạn có thể xem qua ở đây: <a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a></p><p>Mình chọn đại 1 theme và add vào website của mình: <a href="https://github.com/cofess/hexo-theme-pure" target="_blank" rel="noopener">https://github.com/cofess/hexo-theme-pure</a></p><p><img src="https://raw.githubusercontent.com/cofess/hexo-theme-pure/master/screenshot/pure.png" alt=""></p><p>Tiếp theo là clone về và để ở thư mục blog/themes/pure :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;cofess&#x2F;hexo-theme-pure.git themes&#x2F;pure</span><br></pre></td></tr></table></figure><p>và sửa file config blog/_config.yml :</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">pure</span></span><br></pre></td></tr></table></figure><p>Vậy là đã apply thành công theme mới rồi. thử xem kết quả xem sao: </p><p><img src="https://images.viblo.asia/78655537-3bc9-489a-a0df-c777790870d9.png" alt=""></p><p>Vậy là thành công rồi! </p><p>Để thêm 1 page hoặc 1 post chúng ta chạy câu lệnh sau :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>Layout sẽ có dạng sau: </p><table><thead><tr><th>Layout</th><th>Path</th></tr></thead><tbody><tr><td>post</td><td>source/_posts</td></tr><tr><td>page</td><td>source</td></tr><tr><td>draft</td><td>source/_drafts</td></tr></tbody></table><p>Mình sẽ thêm 1 bài post vào website với câu lệnh: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post first_post</span><br></pre></td></tr></table></figure><p>Sau khi chạy lênh xong thì nó có tạo ra cho chúng ta 1 file ở đường dẫn \blog\source_posts\first-post.md</p><p>mở file này lên và viết nội dung thôi:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: First post</span><br><span class="line">date: 2020-05-31 00:51:14</span><br><span class="line">tags: [&#39;post&#39;]</span><br><span class="line">---</span><br><span class="line">this is first post</span><br></pre></td></tr></table></figure><p>Lưu lại và run và kết quả :</p><p><img src="https://images.viblo.asia/1bb55d60-0ac2-4323-97bd-ba82ba05815b.png" alt=""></p><p>Có 1 bài xuất hiện rồi. giờ thì copy các bài đã viết từ viblo sang thôi và chỉnh sửa 1 số nội dung về profile ở trong file \blog\themes\pure_config.yml</p><p><img src="https://images.viblo.asia/e54eab8e-b19e-4a3b-b5f4-e37c148be58f.png" alt=""></p><p>Vậy là cũng có cái blog sương sương rồi.</p><p>Các bạn hoàn toàn có thể tạo ra cá page khác nữa như page about …..</p><h1 id="Deploy-website-len-github-pages"><a href="#Deploy-website-len-github-pages" class="headerlink" title="Deploy website lên github pages"></a>Deploy website lên github pages</h1><p>Việc tạo Github Pages khá đơn giản, trước tiên bạn phải có một tại khoản Github,  tạo mới một repo với name theo định dạng <github-username>.github.io , vì username account github của mình là phamtuananh1996 nên mình sẽ tạo một repo với name là phamtuananh1996.github.io</p><p>Khi đã tạo thành công Github Pages việc tiếp theo của chúng ta là sinh ra static web và deploy lên Github Pages để host. Khi đã deploy thì địa chỉ truy cập vào blog của bạn sẽ là: <github-username>.github.io .</p><p>Việc sinh ra static web và deploy trở nên khá đơn giản với Hexo chúng ta chỉ cần sửa file blog/_config.yml với nội dung như sau:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repo: https:&#x2F;&#x2F;github.com&#x2F;phamtuananh1996&#x2F;phamtuananh1996.github.io.git</span><br></pre></td></tr></table></figure><blockquote><p>Thay username thành username của các bạn.</p></blockquote><p>Tiến hành cài thêm plugin <strong>hexo-deployer-git</strong> : </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git -save</span><br></pre></td></tr></table></figure><p>Để deploy thì run 2 lệnh sau:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>Và kết quả là đây: <a href="https://phamtuananh1996.github.io/">https://phamtuananh1996.github.io/</a></p><p>Vậy là xong !</p><h1 id="Ket-luan"><a href="#Ket-luan" class="headerlink" title="Kết luận"></a>Kết luận</h1><p>   Chỉ chưa mất đến 5 phút là bạn đã có 1 blog hoàn chỉnh với hexo và github pages rồi. còn chần chờ gì nữa mà không khám phá hexo ngay. trên đây mình chỉ giới thiệu qua các chức năng cơn bản nhất thôi . </p><p>  Các bạn có thể tìm hiểu thêm ở <a href="https://hexo.io/" target="_blank" rel="noopener">https://hexo.io/</a></p><p>Chào ,Thân ái và quyêt thắng :heart_eyes::heart_eyes::heart_eyes::heart_eyes:</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mo-dau&quot;&gt;&lt;a href=&quot;#Mo-dau&quot; class=&quot;headerlink&quot; title=&quot;Mở đầu&quot;&gt;&lt;/a&gt;Mở đầu&lt;/h1&gt;&lt;p&gt;Bạn nghĩ sao về việc có 1 blog các nhân cho riêng mình
      
    
    </summary>
    
    
    
      <category term="hexo" scheme="https://phamtuananh1996.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Map, Filter, Reduce ... JavaScript</title>
    <link href="https://phamtuananh1996.github.io/2020/05/19/refactor-loai-bo-for-khoi-ung-dung-javascript-cua-ban/"/>
    <id>https://phamtuananh1996.github.io/2020/05/19/refactor-loai-bo-for-khoi-ung-dung-javascript-cua-ban/</id>
    <published>2020-05-19T16:28:27.000Z</published>
    <updated>2024-01-04T00:39:10.962Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mo-dau"><a href="#Mo-dau" class="headerlink" title="Mở đầu"></a>Mở đầu</h1><p>Bài viết này mình nhắm tới những người mới bắt đầu với Javascript hoặc những người mới bắt đầu làm việc với Javascript . Nhằm giúp refactor lại code nếu bạn gặp 1 số trường hợp dưới đây. Và thông qua đó giúp các bạn hiêu hơn về higher-order functions như map, reduce, and filter …..</p><h1 id="Tai-sao-lai-su-dung-map-filter-reduce-…"><a href="#Tai-sao-lai-su-dung-map-filter-reduce-…" class="headerlink" title="Tại sao lại sử dụng map, filter, reduce …."></a>Tại sao lại sử dụng map, filter, reduce ….</h1><ul><li>Nhìn code sẽ dễ đọc hơn rất nhiều</li><li>Dễ hiểu hơn</li><li>Dễ dàng debug </li><li>Tránh thay đổi mảng ban đầu, do đó, giảm thiểu những rủi ro có thể xảy ra .</li><li>Không cần quản lí vòng lặp</li><li>Hãy nhớ rằng nó luôn được trả về trong callback<h1 id="1-Lap-qua-tat-ca-cac-phan-tu-va-nhan-ve-1-mang-da-sua-doi"><a href="#1-Lap-qua-tat-ca-cac-phan-tu-va-nhan-ve-1-mang-da-sua-doi" class="headerlink" title="1, Lặp qua tất cả các phần tử và nhận về 1 mảng đã sửa đổi"></a>1, Lặp qua tất cả các phần tử và nhận về 1 mảng đã sửa đổi</h1>Đôi khi chúng ta có một mảng các object muốn sửa đổi / thêm các thuộc tính của từng đối tượng , cụ thể giả sử chúng ta có thể có một mảng các string mà ta sẽ biến tất cả chúng thành chữ thường . Trên thực tế có thể có vô số tình huống ở đó Map sẽ giúp chúng ta xử lý 1 cách dễ dàng .</li></ul><p><strong>Using for</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">"Jack"</span>, <span class="string">"Jecci"</span>, <span class="string">"Ram"</span>, <span class="string">"Tom"</span>];</span><br><span class="line"><span class="keyword">var</span> upperCaseNames = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>, totalNames = names.length; i&lt; totalNames ; i= i +<span class="number">1</span>) &#123;</span><br><span class="line">    upperCaseNames[i] = names[i].toUpperCase();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Using map</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">"Jack"</span>, <span class="string">"Jecci"</span>, <span class="string">"Ram"</span>, <span class="string">"Tom"</span>];</span><br><span class="line"><span class="keyword">var</span> upperCaseNames = names.map(<span class="function"><span class="params">name</span> =&gt;</span> name.toUpperCase());</span><br></pre></td></tr></table></figure><blockquote><p>Chú ý:  Nếu bạn sử dụng map .Thì bạn sẽ không dùng được <code>break</code>, <code>continue</code>, <code>return</code> trong khi lặp . nếu muốn sử dụng chúng hãy dùng <code>every</code> hoặc <code>some</code></p></blockquote><h1 id="2-Lap-qua-tat-ca-cac-phan-tu-va-thuc-hien-mot-hanh-dong"><a href="#2-Lap-qua-tat-ca-cac-phan-tu-va-thuc-hien-mot-hanh-dong" class="headerlink" title="2, Lặp qua tất cả các phần tử và thực hiện một hành động"></a>2, Lặp qua tất cả các phần tử và thực hiện một hành động</h1><p><strong>Using for</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> names = [<span class="string">"Jack"</span>, <span class="string">"Jecci"</span>, <span class="string">"Ram"</span>, <span class="string">"Tom"</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>, totalNames = names.length; i&lt; totalNames ; i= i +<span class="number">1</span>) &#123;</span><br><span class="line">    print(names[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Using forEach</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">"Jack"</span>, <span class="string">"Jecci"</span>, <span class="string">"Ram"</span>, <span class="string">"Tom"</span>];</span><br><span class="line">names.forEach(<span class="function"><span class="params">name</span>=&gt;</span> print(name));</span><br></pre></td></tr></table></figure><h1 id="3-Loc-cac-phan-tu-cua-mang"><a href="#3-Loc-cac-phan-tu-cua-mang" class="headerlink" title="3, Lọc các phần tử của mảng"></a>3, Lọc các phần tử của mảng</h1><p>Tôi tin rằng trong quá trình bạn code bạn đã gặp tình huống phải lọc 1 số item ra khỏi mảng ban đầu .</p><p>Ví dụ: bài toán lọc các phần tử chăn trong mảng dưới đây</p><p>để làm được điều đó chúng ta phải xử lí khá rắc rối , nhưng với filter thì bạn có thể sử dụng nó 1 cách dễ dàng.</p><p><strong>Using for</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isOdd</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> n %<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> odd = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>, total = numbers.length; i&lt; total ; i= i +<span class="number">1</span>) &#123;</span><br><span class="line">   <span class="keyword">let</span> number = numbers[i];</span><br><span class="line">   <span class="keyword">if</span>( isOdd(number) ) &#123;</span><br><span class="line">      odd.push(number);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Using filter</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="keyword">var</span> odd = numbers.filter(<span class="function"><span class="params">n</span> =&gt;</span> n%<span class="number">2</span>); <span class="comment">// single line</span></span><br></pre></td></tr></table></figure><p>Bạn thấy đấy ngắn hơn raart nhiều phải không .</p><h1 id="4-Tinh-toan-cac-gia-tri-thanh-mot-gia-tri-duy-nhat"><a href="#4-Tinh-toan-cac-gia-tri-thanh-mot-gia-tri-duy-nhat" class="headerlink" title="4, Tính toán các giá trị thành một giá trị duy nhất"></a>4, Tính toán các giá trị thành một giá trị duy nhất</h1><p>Ví dụ, với một dãy số bạn có thể dễ dàng tính được tổng của tất cả các giá trị.</p><p><strong>Using for</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>, total = numbers.length; i&lt; total ; i= i +<span class="number">1</span>) &#123;</span><br><span class="line">   result = result + numbers[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Using reduce</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">accumulator, currentValue</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> accumulator + currentValue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> initialVal = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> result = numbers.reduce(sum, initialVal);</span><br></pre></td></tr></table></figure><h1 id="5-Kiem-tra-xem-mot-mang-co-chua-gia-tri-nao-do-khong"><a href="#5-Kiem-tra-xem-mot-mang-co-chua-gia-tri-nao-do-khong" class="headerlink" title="5, Kiểm tra xem một mảng có chứa giá trị nào đó không"></a>5, Kiểm tra xem một mảng có chứa giá trị nào đó không</h1><p>Đôi khi bạn muốn kiểm tra 1 phần tử nào đó có tồn tại trong 1 array cho trước hay không. hãy nghĩ đến <code>some</code></p><p><strong>Using for</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">"ram"</span>, <span class="string">"raj"</span>, <span class="string">"rahul"</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>, totalNames = names.length; i&lt; totalNames ; i= i +<span class="number">1</span>) &#123;</span><br><span class="line">   <span class="keyword">if</span>(names[i] === <span class="string">"rahul"</span>) &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">"%c found rahul"</span>, <span class="string">"color:red"</span>);</span><br><span class="line">     <span class="keyword">return</span>; </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Using some</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">"ram"</span>, <span class="string">"raj"</span>, <span class="string">"rahul"</span>];</span><br><span class="line"><span class="keyword">let</span> isRahulPresent = names.some(<span class="function"><span class="params">name</span> =&gt;</span> name===<span class="string">"rahul"</span>);</span><br><span class="line"><span class="keyword">if</span>(isRahulPresent) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"%c found rahul"</span>, <span class="string">"color:red"</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-kiem-tra-xem-moi-phan-tu-trong-mot-mang-co-dap-ung-dieu-kien-khong"><a href="#6-kiem-tra-xem-moi-phan-tu-trong-mot-mang-co-dap-ung-dieu-kien-khong" class="headerlink" title="6, kiểm tra xem mọi phần tử trong một mảng có đáp ứng điều kiện không"></a>6, kiểm tra xem mọi phần tử trong một mảng có đáp ứng điều kiện không</h1><p><strong>Using for</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>, <span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>, total = numbers.length; i&lt; total ; i= i +<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(num &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"0 present in array"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Using some</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>, <span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> isZeroFree = num.every(<span class="function"><span class="params">e</span> =&gt;</span> e &gt; <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(!isZeroFree) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"0 present in array"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Ket-luan"><a href="#Ket-luan" class="headerlink" title="Kết luận"></a>Kết luận</h1><p>Hy vọng qua bài viết này các bạn có thể tham khảo để refactor ứng dụng của mình  1 cách thông mình hơn. giúp cho code dễ đọc dễ hiểu và dễ maintain, debug hơn. :heart_eyes::heart_eyes::heart_eyes::heart_eyes::heart_eyes:</p><blockquote><p>Thanks for reading. I hope you upvote this.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mo-dau&quot;&gt;&lt;a href=&quot;#Mo-dau&quot; class=&quot;headerlink&quot; title=&quot;Mở đầu&quot;&gt;&lt;/a&gt;Mở đầu&lt;/h1&gt;&lt;p&gt;Bài viết này mình nhắm tới những người mới bắt đầu với
      
    
    </summary>
    
    
    
      <category term="javascript" scheme="https://phamtuananh1996.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Những chrome extension mà developer nên tham khảo</title>
    <link href="https://phamtuananh1996.github.io/2020/05/01/nhung-chrome-extension-ma-developer-nen-tham-khao/"/>
    <id>https://phamtuananh1996.github.io/2020/05/01/nhung-chrome-extension-ma-developer-nen-tham-khao/</id>
    <published>2020-05-01T16:38:11.000Z</published>
    <updated>2024-01-04T00:39:10.962Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mo-dau"><a href="#Mo-dau" class="headerlink" title="Mở đầu"></a>Mở đầu</h1><p>Chào các viblo fan. Hôm này mình sẽ chia sẻ 10 extension  mà mình hiện tại đang dùng các bạn có thể tham khảo nhé. hy vọng giúp ích được cho các dev nhà mình. Nếu bạn có  extension hay và hữu ích thì đừng ngại ngần hãy comment ngay xuống dưới post này nhé. hoặc bạn hoàn toàn có thể viết tiếp phần 2 nhé ! Lét sờ tát :heart_eyes::heart_eyes::heart_eyes::heart_eyes::heart_eyes:</p><h1 id="1-Vue-js-devtools"><a href="#1-Vue-js-devtools" class="headerlink" title="1, Vue.js devtools"></a>1, Vue.js devtools</h1><p>Nếu bạn là một dev yêu thích và đang làm việc với vuejs thì các bạn đừng bỏ qua  extension này nhé. Và được chính <a href="https://vuejs.org/" target="_blank" rel="noopener">https://vuejs.org/</a> cung cấp nhé. bạn hoàn toàn có thể yên tâm và sử dụng.</p><p><img src="https://images.viblo.asia/b251c07a-2eda-4b2e-8e11-fe558bb6a8e7.jpg" alt=""></p><p><a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd" target="_blank" rel="noopener">Vue.js devtools</a> giúp bạn debugging  ứng dụng vuejs của bạn một cách trực quan dễ hiểu </p><p>Cho phép quản lý Component, vuex, events. routing  …..</p><h1 id="2-React-Developer-Tools"><a href="#2-React-Developer-Tools" class="headerlink" title="2, React Developer Tools"></a>2, React Developer Tools</h1><p>Còn nếu bạn cũng yêu thích cả reactjs thì cũng có riêng 1 extension cho reactjs. Các bạn có thể tải về  <a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi" target="_blank" rel="noopener">tại đây</a> và do Facebook cung cấp vì thế các bạn cũng yên tâm sử dụng nhé.</p><p><img src="https://images.viblo.asia/04b459af-1f01-45ab-84f4-62255044ff78.jpg" alt=""></p><p>Giống như  Vue.js devtools thì React Developer Tools giúp bạn debugging  ứng dụng reactjs</p><h1 id="3-Todoist-for-Chrome"><a href="#3-Todoist-for-Chrome" class="headerlink" title="3, Todoist for Chrome"></a>3, Todoist for Chrome</h1><p>Đây là extension mình rất yêu thích vì nó giúp mình quản lý các task cần làm trong ngày mà không phải mở quá nhiều các ứng dụng quản lý khác. ngoài ra còn có thể lập lịch theo ngày nữa rất hưu ích phải không nào!</p><p><img src="https://images.viblo.asia/8c1f3a72-2c57-46de-a6c9-d33a16cd5d01.jpg" alt=""></p><p>Các bạn có thể thêm tiện ích tuyệt vời này vào trình duyệt  <a href="https://chrome.google.com/webstore/detail/todoist-for-chrome/jldhpllghnbhlbpcmnajkpdmadaolakh" target="_blank" rel="noopener">tại đây</a></p><h1 id="4-Json-viewer"><a href="#4-Json-viewer" class="headerlink" title="4, Json-viewer"></a>4, Json-viewer</h1><p>Json là 1 dạng dữ liệu quá quen thuộc với developer rồi nhỉ. Nhưng thật khó chịu khi mà mở trình duyệt lên <a href="https://viblo.asia/api/posts/newest?limit=20" target="_blank" rel="noopener">https://viblo.asia/api/posts/newest?limit=20</a> mà trình duyệt lại trả về 1 đoạn json như này: </p><p><img src="https://images.viblo.asia/255e0263-b8ea-4120-b151-5d169c4d45e8.png" alt=""></p><p>Thì Json-viewer là 1 lựa chọn hoàn hảo để format đoạn json kia để dễ nhìn hơn như này: </p><p><img src="https://images.viblo.asia/9f9fe349-c06b-417e-aa86-9090291cb3ff.png" alt=""></p><p>Nhìn đẹp hơn đúng không nào còn chần chờ gì nữa mà không thêm ngay cho trình duyệt của mình.</p><h1 id="5-Medium-unlimited"><a href="#5-Medium-unlimited" class="headerlink" title="5, Medium-unlimited"></a>5, Medium-unlimited</h1><p>Mình hay lên đọc medium. Nhưng thỉnh thoảng thấy bài đang đọc hay thì Medium bắt nạp tiên để đọc bài hay gì gì ấy mà mình không đọc được nữa. Thì mình phát hiện ra tiện ích này </p><p><img src="https://images.viblo.asia/caa2fc4b-d45c-4bda-9154-5697324c763a.png" alt=""></p><p>Medium-unlimited có thể mở khóa bài viết trên Medium ấy . các bạn có thể tải về <a href="https://github.com/manojVivek/medium-unlimited" target="_blank" rel="noopener">Tại đây</a></p><h1 id="6-Viblo’s-News-Feed"><a href="#6-Viblo’s-News-Feed" class="headerlink" title="6, Viblo’s News Feed"></a>6, Viblo’s News Feed</h1><p>Là fan viblo mà chưa có extension này thì người ta cười cho ấy nhỉ. Các bạn thêm vào ngay đi nhé <a href="https://chrome.google.com/webstore/detail/viblos-news-feed/mliahmjgdpkkicelofhbhgiidgljijmj" target="_blank" rel="noopener">tại đây nè</a></p><p><img src="https://images.viblo.asia/1936b189-c387-47c1-84d2-d4b771c90e79.jpg" alt=""></p><p>Extension giúp mình có được các bài viết mới nhất trên viblo cũng như không bỏ qua bất cứ thông báo nào của viblo. Rất hữu ích cho 5 sao.</p><h1 id="7-Grammarly-for-Chrome"><a href="#7-Grammarly-for-Chrome" class="headerlink" title="7, Grammarly for Chrome"></a>7, Grammarly for Chrome</h1><p>Đây là 1 extension có mất phí và miễn phí giúp chúng ta sửa lỗi ngữ phát tiếng anh rất tiện và hữu ích cho tất cả mọi người không riêng gì dev đâu nhé. Thêm ngay <a href="https://chrome.google.com/webstore/detail/grammarly-for-chrome/kbfnbcaeplbcioakkpcpgfkobkghlhen" target="_blank" rel="noopener">tại đây</a></p><p><img src="https://images.viblo.asia/5f5d8080-a40a-47d2-bb6c-1aa4b024d612.jpg" alt=""></p><h1 id="8-Lorem-Ipsum"><a href="#8-Lorem-Ipsum" class="headerlink" title="8, Lorem Ipsum"></a>8, Lorem Ipsum</h1><p>Cái này thì đặc biệt hữu ích khi các bạn muốn test trường input mà “bầu bí” không biết ghi gì vào ô input thì  extension là 1 lựa chọn cho bạn đấy!</p><p><img src="https://images.viblo.asia/1aab7aef-ef49-4b7e-81c8-6b8b98a58200.jpg" alt=""></p><p>Chỉ cần vài thao tác là bạn đã có 1 đoạn văn bản đẹp để làm dữ liệu test rồi .</p><h1 id="9-Google-Dich"><a href="#9-Google-Dich" class="headerlink" title="9, Google Dịch"></a>9, Google Dịch</h1><p>Ôi. cái tên nói lên tất cả rồi nhỉ<br><img src="https://images.viblo.asia/d30571db-3cb3-4494-b283-07f8376e8252.jpg" alt=""></p><p>Mình nghĩ các bạn đều có cả rồi nhỉ .nếu chưa có thì thêm ngay  <a href="https://chrome.google.com/webstore/detail/google-translate/aapbdbdomjkkjkaonfhkkikfgjllcleb" target="_blank" rel="noopener">tại đây nhé </a></p><h1 id="10-Octotree"><a href="#10-Octotree" class="headerlink" title="10, Octotree"></a>10, Octotree</h1><p>Nào các dân dev nhìn ảnh này là biết extension này là gì luôn nhé !<br><img src="https://www.octotree.io/_nuxt/img/1c8e9ec.gif" alt=""></p><p>Nếu thấy hay và hưu ích thì tải ngay tại đây nhé <a href="https://www.octotree.io/" target="_blank" rel="noopener">https://www.octotree.io/</a></p><h1 id="Ket-luan"><a href="#Ket-luan" class="headerlink" title="Kết luận"></a>Kết luận</h1><p>Như mình đang PR cho các extension  trên ấy các bác nhỉ. nhưng tin mình đi có những extension trên cũng đỡ vất vả được phần vào với công việc hiện tại của dev đấy. nếu có extension hay ho các bạn nhớ comment ở post này để mọi người tham khảo nhé.<br>Nếu thấy hữu ích thì ngại gì mà không ấn <code>thương thương</code> nhỉ.  :heart_eyes::heart_eyes::heart_eyes::heart_eyes:</p><p>Thân ái và quyết thắng !!!!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mo-dau&quot;&gt;&lt;a href=&quot;#Mo-dau&quot; class=&quot;headerlink&quot; title=&quot;Mở đầu&quot;&gt;&lt;/a&gt;Mở đầu&lt;/h1&gt;&lt;p&gt;Chào các viblo fan. Hôm này mình sẽ chia sẻ 10 extensi
      
    
    </summary>
    
    
    
      <category term="extension" scheme="https://phamtuananh1996.github.io/tags/extension/"/>
    
  </entry>
  
  <entry>
    <title>Các trick search google mà developer nên biết</title>
    <link href="https://phamtuananh1996.github.io/2020/04/15/cac-trick-search-google-ma-developer-nen-biet/"/>
    <id>https://phamtuananh1996.github.io/2020/04/15/cac-trick-search-google-ma-developer-nen-biet/</id>
    <published>2020-04-15T16:01:59.000Z</published>
    <updated>2024-01-04T00:39:10.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mo-dau"><a href="#Mo-dau" class="headerlink" title="Mở đầu"></a>Mở đầu</h1><p>Đối với dân IT, kỹ năng tìm kiếm trên Google sẽ là “trợ thủ đắc lực” giúp bạn học tập và làm việc hiệu quả nhất. Bạn chỉ cần tập trung đọc hiểu, ghi nhớ, phân tích cốt lõi của một vấn đề, mọi thông tin còn lại đã có Google lo. Vậy làm sao để tìm kiếm trên Google và research paper hiệu quả nhất? Bài viết này sẽ giới thiệu 1 số mẹo thường dùng với google search đối với dev nhé.</p><h2 id="1-Use-an-Exact-Phrase"><a href="#1-Use-an-Exact-Phrase" class="headerlink" title="1. Use an Exact Phrase"></a>1. Use an Exact Phrase</h2><p>   <strong>Mô tả</strong>: Đây là cách tìm cụm từ chính xác bằng dấu ngoặc kép</p><p>   <strong>Syntax</strong>: “[keyword 1] [keyword 2]” [keyword 3]</p><p>   <strong>Ví dụ</strong>: Khi bạn tìm kiếm với từ khóa thuật toán sắp xếp nổi bọt và ngôn ngữ dùng là golang và bạn chỉ muốn kết quả trả về có chứa ngôn ngữ golang. bạn hãy thử:<br>   <img src="https://images.viblo.asia/355de483-54a4-472c-ab0d-734626bc7ef3.png" alt=""></p><h2 id="2-Google-Search-Exclude-Word"><a href="#2-Google-Search-Exclude-Word" class="headerlink" title="2. Google Search Exclude Word"></a>2. Google Search Exclude Word</h2><p>   <strong>Mô tả</strong>:  Để có thể loại bỏ những từ tìm kiếm không quan trọng trong kết quả, bạn chỉ cần nhập dấu - đằng trước từ khóa mà bạn cần loại bỏ là được.</p><p>   <strong>Syntax</strong>: - [keyword to exclude] [keyword to include]</p><p>   <strong>Ví dụ</strong>:  Vẫn là ví dụ kia nhưng lần này bạn không muốn kết quả trả về liên quan đến golang bạn hãy thử:<br>   <img src="https://images.viblo.asia/8538b1ee-888b-45c8-a157-69e3874f4d81.png" alt=""></p><p>   Và cũng hưu ích khi  bạn muốn kết quả tìm kiếm không trả về các trang quảng cáo bằng cách dùng <strong>- quảng cáo</strong></p><h2 id="3-Google-Search-Within-a-Website"><a href="#3-Google-Search-Within-a-Website" class="headerlink" title="3. Google Search Within a Website"></a>3. Google Search Within a Website</h2><p>   <strong>Mô tả</strong>:  Tìm kiếm một từ trong trang web - sử dụng cú pháp trang web: URL trang web, theo sau là cụm từ tìm kiếm của bạn.  sẽ hạn chế kết quả tìm kiếm và chỉ tìm kiếm trong trang web đó trang web đó.</p><p>   <strong>Syntax</strong>:  site:[website URL] [keywords]</p><p>   <strong>Ví dụ</strong>:  Bạn muốn tìm kiếm nội dung chỉ trong trang viblo thì bạn thử<br>     <img src="https://images.viblo.asia/998c9e94-4977-4e0d-86bd-607e7b3e3432.png" alt=""></p><h2 id="4-Google-Search-Definitions"><a href="#4-Google-Search-Definitions" class="headerlink" title="4.  Google Search Definitions"></a>4.  Google Search Definitions</h2><p>   <strong>Mô tả</strong>:  Dễ dàng tìm thấy định nghĩa của một từ mà không cần phải đi đến một trang web từ điển bằng cách sử dụng cú pháp sau:</p><p>   <strong>Syntax</strong>:  define:[keyword]</p><p>   <strong>Ví dụ</strong>: Bạn muốn định nghĩa thuật toán nổi bọt là gì hãy thử: </p><p>   <img src="https://images.viblo.asia/9a7ec342-3ce4-42ed-8677-8b0beee17193.png" alt=""></p><h2 id="5-Google-Search-Wildcard-Missing-or-Unknown-Words"><a href="#5-Google-Search-Wildcard-Missing-or-Unknown-Words" class="headerlink" title="5.  Google Search Wildcard (Missing or Unknown Words)"></a>5.  Google Search Wildcard (Missing or Unknown Words)</h2><p>   <strong>Mô tả</strong>:  Tìm kiếm kiểu này sẽ giúp bạn tự động điền 1 số từ bạn không nhớ dõ. nó sẽ có tắc dụng trong tìm kiếm lời bài hát hoặc là tiêu đề 1 cuốn sách nào đó mà bạn chỉ nhớ mang máng. </p><p>   <strong>Syntax</strong>:  [keywords 1] * [keywords 2]</p><p>   <strong>Ví dụ</strong>: Bạn bạn vừa đi xem 1 bộ phim rất hay được chuyển thể từ truyện . mà bạn không nhớ dõ nó có tiêu đề là gì mà chỉ nhớ có từ mắt gì đó. không biết là “mắt liếc” hay “mắt lác” thì bạn hãy thử:<br>   <img src="https://images.viblo.asia/55ec8be3-ae14-4abe-aaf0-e22af32edfbd.png" alt=""></p><h2 id="6-Google-Search-File-Type"><a href="#6-Google-Search-File-Type" class="headerlink" title="6.  Google Search File Type"></a>6.  Google Search File Type</h2><p>   <strong>Mô tả</strong>:  Cái này sẽ giúp bạn tìm kiếm theo kiểu file ví dụ như .sql, .docx, .csv … </p><p>   <strong>Syntax</strong>:  [keywords] filetype:[file type extension]</p><p>   <strong>Ví dụ</strong>:  Bạn muốn tìm 1 file mà định dạng là .sql về quận huyện của việt nam chẳng hạn bạn hãy thử:<br>       <img src="https://images.viblo.asia/4eb54929-e6ea-495b-a2ce-0490d4990201.png" alt=""></p><h2 id="7-Google-Images-Search"><a href="#7-Google-Images-Search" class="headerlink" title="7.  Google Images Search"></a>7.  Google Images Search</h2><p>   <strong>Mô tả</strong>:  Giúp bạn tìm kiếm nhanh tên hình ảnh, mô tả và type.</p><p>   <strong>Syntax</strong>:  [keyword] image type</p><p>   <strong>Ví dụ</strong>: Bạn chỉ muốn tìm kiếm anh gif bạn hãy thử :<br>       <img src="https://images.viblo.asia/9cfa5fc7-0de2-4b8a-abdc-4aa0ab68db92.png" alt=""></p><h2 id="Loi-ket"><a href="#Loi-ket" class="headerlink" title="Lời kết"></a>Lời kết</h2><p>Trên đây là 1 số mẹo nhỏ nó có thể không giúp ích được nhiều với các vấn đề phổ biến nhưng lại rất hữu ích trong các vấn đề ít người gặp phải mà không may bạn lại mắc phải vấn đề đó. vì vậy hãy note lại nhé !</p><blockquote><p>Và nếu có thể thì bạn nên search vấn đề của bạn bằng tiếng anh nhé!</p></blockquote><p>Hẹn gặp các bạn trong các bài viết lần sau. thân ái và quyết thắng !!!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mo-dau&quot;&gt;&lt;a href=&quot;#Mo-dau&quot; class=&quot;headerlink&quot; title=&quot;Mở đầu&quot;&gt;&lt;/a&gt;Mở đầu&lt;/h1&gt;&lt;p&gt;Đối với dân IT, kỹ năng tìm kiếm trên Google sẽ là “tr
      
    
    </summary>
    
    
    
      <category term="trick" scheme="https://phamtuananh1996.github.io/tags/trick/"/>
    
  </entry>
  
  <entry>
    <title>Giao tiếp giữa các cửa sổ với Window.postMessage API</title>
    <link href="https://phamtuananh1996.github.io/2020/03/15/giao-tiep-giua-cac-cua-so-voi-windowpostmessage-api/"/>
    <id>https://phamtuananh1996.github.io/2020/03/15/giao-tiep-giua-cac-cua-so-voi-windowpostmessage-api/</id>
    <published>2020-03-15T13:22:08.000Z</published>
    <updated>2024-01-04T00:39:10.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mo-dau"><a href="#Mo-dau" class="headerlink" title="Mở đầu"></a>Mở đầu</h1><p>Bạn đã bao giờ có nhu cầu giao tiếp giữa các cửa sổ hoặc cửa sổ hiện tại và iframe bên trong chưa. như truyền data từ cửa sổ này đến cửa sổ kia và ngược lại. Vậy làm cách nào để làm được điều đó? thì window.postMessage api chính là giải pháp của bạn? chúng ta cùng tìm hiểu trong bài viết này nhé!!</p><h1 id="Cu-phap"><a href="#Cu-phap" class="headerlink" title="Cú pháp"></a>Cú pháp</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">targetWindow.postMessage(message, targetOrigin, [transfer]);</span><br></pre></td></tr></table></figure><p>Với các tham số được mô tả bằng bảng dưới đây: </p><table><thead><tr><th>Tên</th><th>Mô tả</th></tr></thead><tbody><tr><td>targetWindow</td><td>Reference tới một windows hoặc iframe nào đó mà bạn muốn gửi message, giá trị này được trả về khi gọi hàm window.open hoặc tên, id của frame trong biến window.frames</td></tr><tr><td>message</td><td>Dữ liệu cần gửi đến <strong>targetOrigin</strong>, có thể là string hoặc objec …..</td></tr><tr><td>targetOrigin</td><td>Là trang sẽ nhận được message này. Hoặc có thể là “*”  thì message này sẽ được gửi đến mọi window target đến nó (<strong>Không khuyến khích dùng</strong>)</td></tr></tbody></table><h1 id="Gui-Message"><a href="#Gui-Message" class="headerlink" title="Gửi Message"></a>Gửi Message</h1><p>Để dõ hơn mình sẽ tạo ra 2 cửa sổ window như này:<br><img src="https://images.viblo.asia/7832ff1e-8bda-494b-bb9e-76f3d036e511.png" alt=""></p><blockquote><p>Window 1 (<a href="http://localhost:8002/window-1" target="_blank" rel="noopener">http://localhost:8002/window-1</a>)</p><p>Window 2 (<a href="http://localhost:8002/window-2" target="_blank" rel="noopener">http://localhost:8002/window-2</a>)</p></blockquote><p>Tiếp theo mình sẽ viết code js cho window 1 để gửi message cho window 2: </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is window 1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">"sendHello()"</span>&gt;</span>Send hello to window 2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">sendHello</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> popup = <span class="built_in">window</span>.open(<span class="string">"http://localhost:8002/window-2"</span>, <span class="string">'window-2'</span>);</span></span><br><span class="line"><span class="actionscript">        popup.postMessage(<span class="string">"Hello, window-2! i am window-1"</span>, <span class="string">"http://localhost:8002/window-2"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Nhan-Message"><a href="#Nhan-Message" class="headerlink" title="Nhận Message"></a>Nhận Message</h1><p>Tiếp theo viết code nhận message từ window-1 cho window-2</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is window 2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.addEventListener(<span class="string">"message"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (event.origin !== <span class="string">"http://localhost:8001/window-1"</span>)</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span>;</span></span><br><span class="line">            </span><br><span class="line">        alert(event.data)</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Các thuộc tính nhận được sẽ bao gồm: </p><table><thead><tr><th>Tên</th><th>Mô tả</th></tr></thead><tbody><tr><td>data</td><td>Đối tượng được truyền đến</td></tr><tr><td>origin</td><td>Nguồn gốc của data truyền đến. bạn phải kiểm tra trường này để tranh trường hợp người khác giả mạo sender cũng như xử lý những message không liên quan tới mình</td></tr><tr><td>source</td><td>reference đến đối tượng cửa sổ đã gửi tin nhắn; bạn có thể sử dụng điều này để thiết lập giao tiếp hai chiều giữa hai cửa sổ với nguồn gốc khác nhau.</td></tr></tbody></table><p>Thành quả sẽ như thế này : </p><p><img src="https://images.viblo.asia/94d25356-e36b-4a5c-9f5e-9d4d330f62f7.gif" alt=""></p><h1 id="Van-de-ve-bao-mat"><a href="#Van-de-ve-bao-mat" class="headerlink" title="Vấn đề về bảo mật"></a>Vấn đề về bảo mật</h1><blockquote><p>Nếu trang web của bạn không muốn nhận message từ các trang khác gửi tới thì tuyệt đối không lắng nghe event <strong>message</strong>  dưới đây:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"message"</span>, receiveMessage, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><blockquote><p>Nếu bạn bắt buộc phải nhận message từ những trang khác thì luôn luôn xác minh danh tính của trang gửi đến bằng cách sử dụng <strong>origin</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (event.origin !== <span class="string">"http://localhost:8001/window-1"</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Bất kỳ window nào cũng có thể gửi tin nhắn đến các window khác, và  bạn không phải biết tin nhắn đó có độc hại hay không vì vậy không chỉ xác minh danh tính của window gửi đến mà bạn còn phải luôn xác minh cú pháp của tin nhắn nhận được</strong></p></blockquote><blockquote><p>Luôn chỉ định chính xác <strong>targetOrigin</strong>.và không dùng <strong>“*”</strong> khi bạn sử dụng <strong>postMessage</strong> để gửi data đến window khác.</p></blockquote><h1 id="Tong-ket"><a href="#Tong-ket" class="headerlink" title="Tổng kết"></a>Tổng kết</h1><p>Hy vọng qua bài này bạn có thể sự dụng window.postMessage để giao tiếp giữa các window 1 cách an toàn và hiệu quả nhất. :100::100::100::100::100::100::astonished:</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mo-dau&quot;&gt;&lt;a href=&quot;#Mo-dau&quot; class=&quot;headerlink&quot; title=&quot;Mở đầu&quot;&gt;&lt;/a&gt;Mở đầu&lt;/h1&gt;&lt;p&gt;Bạn đã bao giờ có nhu cầu giao tiếp giữa các cửa sổ ho
      
    
    </summary>
    
    
    
      <category term="javascript" scheme="https://phamtuananh1996.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Tạo mechanism webhook cho riêng mình với laravel notification.</title>
    <link href="https://phamtuananh1996.github.io/2019/12/15/tao-mechanism-webhook-cho-rieng-minh-voi-laravel-notification/"/>
    <id>https://phamtuananh1996.github.io/2019/12/15/tao-mechanism-webhook-cho-rieng-minh-voi-laravel-notification/</id>
    <published>2019-12-15T08:51:17.000Z</published>
    <updated>2024-01-04T00:39:10.962Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mo-dau"><a href="#Mo-dau" class="headerlink" title="Mở đầu"></a>Mở đầu</h1><p>Hôm nay mình sẽ hướng dẫn cho các bạn cách tạo một webhook mechanism cho riêng mình. từ lâu chúng ta đã biểt đến và dùng chức năng webhook của github, facebook … .Đại loại là họ sẽ cho mình nhập 1 Payload URL và chọn sự kiện để khi có sự kiện đó thì github cũng send http request đến  Payload URL của người dùng.<br><img src="https://images.viblo.asia/1c1ffc57-7a82-4cfe-9e57-38ddbff49a33.png" alt=""></p><p> Tương tự vậy, ở demo nay chúng ta sẽ cho phép người dùng nhập webhook url của họ. và khi có 1 sự kiện nào đó trên hệ thống chúng ta thì hệ thống cũng tiến hành send http request đến url của họ (request gồm body và header).</p><h1 id="Webhook-la-gi"><a href="#Webhook-la-gi" class="headerlink" title="Webhook là gì?"></a>Webhook là gì?</h1><h1 id="Cai-dat-Dependencies"><a href="#Cai-dat-Dependencies" class="headerlink" title="Cài đặt Dependencies"></a>Cài đặt Dependencies</h1><p>Đầu tiên chúng ta cần cài đặt package để cho việc gửi HTTP request. Ở đây mình dùng thư viện khá phổ biến là Guzzle:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require guzzlehttp&#x2F;guzzle:~6.0</span><br></pre></td></tr></table></figure><h1 id="Migrate-du-lieu"><a href="#Migrate-du-lieu" class="headerlink" title="Migrate dữ liệu"></a>Migrate dữ liệu</h1><p>Tiếp theo chúng ta tạo bảng user. ở ví dụ demo này thì mình sẽ lưu <code>name</code>, <code>email</code>, <code>password</code>, <code>api_token</code> và đặc biệt có thêm trường <code>webhook_url</code> đây chính là enpoint của người dùng khi đăng ký Webhook End Point trên hệ thống của chúng ta.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Schema</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Schema</span>\<span class="title">Blueprint</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Migrations</span>\<span class="title">Migration</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateUsersTable</span> <span class="keyword">extends</span> <span class="title">Migration</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Run the migrations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Schema::create(<span class="string">'users'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint $table)</span> </span>&#123;</span><br><span class="line">            $table-&gt;increments(<span class="string">'id'</span>);</span><br><span class="line">            $table-&gt;string(<span class="string">'name'</span>);</span><br><span class="line">            $table-&gt;string(<span class="string">'email'</span>)-&gt;unique();</span><br><span class="line">            $table-&gt;string(<span class="string">'password'</span>);</span><br><span class="line">            $table-&gt;string(<span class="string">'api_key'</span>);</span><br><span class="line">            $table-&gt;string(<span class="string">'webhook_url'</span>)-&gt;nullable();</span><br><span class="line">            $table-&gt;rememberToken();</span><br><span class="line">            $table-&gt;timestamps();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Reverse the migrations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">down</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Schema::dropIfExists(<span class="string">'users'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Tao-model"><a href="#Tao-model" class="headerlink" title="Tạo model"></a>Tạo model</h1><p>Tiếp theo là tạo model User</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Notifications</span>\<span class="title">Notifiable</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Auth</span>\<span class="title">User</span> <span class="title">as</span> <span class="title">Authenticatable</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Authenticatable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Notifiable</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The attributes that are mass assignable.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $fillable = [</span><br><span class="line">        <span class="string">'name'</span>, <span class="string">'email'</span>, <span class="string">'password'</span>, <span class="string">'api_key'</span>, <span class="string">'webhook_url'</span>,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The attributes that should be hidden for arrays.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $hidden = [</span><br><span class="line">        <span class="string">'password'</span>, <span class="string">'remember_token'</span>, <span class="string">'api_key'</span>,</span><br><span class="line">    ];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getSigningKey</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;api_key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getWebhookUrl</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;webhook_url;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Model này khá dễ hiểu rồi. mình có thêm 2 hàm <code>getSigningKey</code> và <code>getWebhookUrl</code> để lấy <code>api_key</code> và <code>webhook_url</code></p><h1 id="Tao-notification-channels"><a href="#Tao-notification-channels" class="headerlink" title="Tạo notification channels"></a>Tạo notification channels</h1><p>Tiếp theo chúng ta cần tạo 1 notification channel. Thì laravel có hỗ trợ chúng ta tạo cũng như custom notification channels ở <a href="https://laravel.com/docs/5.6/notifications#custom-channels" target="_blank" rel="noopener">Tại đây</a>.</p><p>Tiến hành tạo WebhookChannel</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Channels</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">GuzzleHttp</span>\<span class="title">Client</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Log</span>\<span class="title">Logger</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Notifications</span>\<span class="title">Notifiable</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Notifications</span>\<span class="title">Notification</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebhookChannel</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Client</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> $client;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Logger</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> $logger;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Client $client, Logger $logger)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;client = $client;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;logger = $logger;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Notifiable $notifiable</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Notification $notification</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> WebHookFailedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">($notifiable, Notification $notification)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Function send là nơi chúng ta viết code để thực hiện việc send http request đến endpoint (webhook_url) của người dùng. </p><p>Tiếp theo mình tiến hành viết hàm send</p><p>Đầu tiên ,</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Notifiable $notifiable</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Notification $notification</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> WebHookFailedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">($notifiable, Notification $notification)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (method_exists($notification, <span class="string">'toWebhook'</span>)) &#123;</span><br><span class="line">            $body = (<span class="keyword">array</span>) $notification-&gt;toWebhook($notifiable);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $body = $notification-&gt;toArray($notifiable);</span><br><span class="line">        &#125;</span><br><span class="line">        $timestamp = now()-&gt;timestamp;</span><br><span class="line">        $token = str_random(<span class="number">16</span>);</span><br><span class="line">        <span class="comment">// Tạo header cho request webhook . cái này để người dùng có thể xác minh request gửi lên là từ hệ thống của chúng ta mà không phải từ hệ thông khác</span></span><br><span class="line">        $headers = [</span><br><span class="line">            <span class="string">'timestamp'</span> =&gt; $timestamp,</span><br><span class="line">            <span class="string">'token'</span> =&gt; $token,</span><br><span class="line">            <span class="string">'signature'</span> =&gt; hash_hmac(</span><br><span class="line">                <span class="string">'sha256'</span>,</span><br><span class="line">                $token . $timestamp,</span><br><span class="line">                $notifiable-&gt;getSigningKey()</span><br><span class="line">            ),</span><br><span class="line">        ];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Tiếp theo chúng ta tạo 1 request sử dụng GuzzleHttp để gửi request</span></span><br><span class="line">        $request = <span class="keyword">new</span> Request(<span class="string">'POST'</span>, $notifiable-&gt;getWebhookUrl(), $headers, json_encode($body));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            $response = <span class="keyword">$this</span>-&gt;client-&gt;send($request);</span><br><span class="line">            <span class="comment">// kiểm tra nếu không nhận được status code = 200 thì sẽ báo lỗi</span></span><br><span class="line">            <span class="keyword">if</span> ($response-&gt;getStatusCode() !== <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> WebHookFailedException(<span class="string">'Webhook received a non 200 response'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Lưu lại log</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;logger-&gt;debug(<span class="string">'Webhook successfully posted to '</span>. $notifiable-&gt;getWebhookUrl());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientException $exception) &#123;</span><br><span class="line">            <span class="keyword">if</span> ($exception-&gt;getResponse()-&gt;getStatusCode() !== <span class="number">410</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> WebHookFailedException($exception-&gt;getMessage(), $exception-&gt;getCode(), $exception);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (GuzzleException $exception) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> WebHookFailedException($exception-&gt;getMessage(), $exception-&gt;getCode(), $exception);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;logger-&gt;error(<span class="string">'Webhook failed in posting to '</span>. $notifiable-&gt;getWebhookUrl());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Vậy là xong 1 notification channels. Tiếp theo mình chỉ việc gọi Webhook notification và dùng thôi.</p><h1 id="Thuc-hien-notification-webhook"><a href="#Thuc-hien-notification-webhook" class="headerlink" title="Thực hiện notification webhook"></a>Thực hiện notification webhook</h1><p>Tiếp theo chúng ta tạo notification bằng lệnh </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:notification SomethingHappenedNotification</span><br></pre></td></tr></table></figure><p>Tiến hành viết code.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Notifications</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Channels</span>\<span class="title">WebhookChannel</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Bus</span>\<span class="title">Queueable</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Notifications</span>\<span class="title">Notification</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Queue</span>\<span class="title">ShouldQueue</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomethingHappenedNotification</span> <span class="keyword">extends</span> <span class="title">Notification</span> <span class="keyword">implements</span> <span class="title">ShouldQueue</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Queueable</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> $message;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a new notification instance.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($message)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;message = $message;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the notification's delivery channels.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  mixed  $notifiable</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">via</span><span class="params">($notifiable)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [WebhookChannel::class];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toWebhook</span><span class="params">($notifiable)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="string">'message'</span> =&gt; <span class="keyword">$this</span>-&gt;message,</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the array representation of the notification.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  mixed  $notifiable</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toArray</span><span class="params">($notifiable)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ok. vậy là đã xong . giờ chúng ta có thể tạo các sự kiện và send notification đến endpoint mà người dùng đã đăng ký.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Notifications</span>\<span class="title">SomethingHappenedNotification</span>;</span><br><span class="line"></span><br><span class="line">$user-&gt;notify(<span class="keyword">new</span> SomethingHappenedNotification($massage));</span><br></pre></td></tr></table></figure><h1 id="Ket-luan"><a href="#Ket-luan" class="headerlink" title="Kết luận"></a>Kết luận</h1><p>Cảm ơn các bạn đã đọc đến đây. </p><p>Tham khảo : <a href="https://laravel.com/docs/5.6/notifications#custom-channels" target="_blank" rel="noopener">https://laravel.com/docs/5.6/notifications#custom-channels</a>, </p><p>Source code: <a href="https://github.com/phamtuananh1996/laravel-webhook-demo" target="_blank" rel="noopener">https://github.com/phamtuananh1996/laravel-webhook-demo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mo-dau&quot;&gt;&lt;a href=&quot;#Mo-dau&quot; class=&quot;headerlink&quot; title=&quot;Mở đầu&quot;&gt;&lt;/a&gt;Mở đầu&lt;/h1&gt;&lt;p&gt;Hôm nay mình sẽ hướng dẫn cho các bạn cách tạo một web
      
    
    </summary>
    
    
    
      <category term="laravel" scheme="https://phamtuananh1996.github.io/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>Chống sao chép hình ảnh bất hợp pháp với watermark image</title>
    <link href="https://phamtuananh1996.github.io/2019/11/11/chong-sao-chep-hinh-anh-bat-hop-phap-voi-watermark-image/"/>
    <id>https://phamtuananh1996.github.io/2019/11/11/chong-sao-chep-hinh-anh-bat-hop-phap-voi-watermark-image/</id>
    <published>2019-11-11T07:31:21.000Z</published>
    <updated>2024-01-04T00:39:10.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="watermark-image-la-gi"><a href="#watermark-image-la-gi" class="headerlink" title="watermark image là gì?"></a>watermark image là gì?</h1><p>Gần đây mình thấy trên viblo có mội số bài viết khá hay và chất lượng. Nhưng điều đáng buồn là các trang web về công nghệ khác đã copy các bài viết này mà không xin phép tác giả hay có thì cũng chỉ là ghi link tới bài viết rất nhỏ ở cuối bài.<br>Cũng chính vì lý do đó mà các tác giả của viblo gần đây đã gắn thêm watermark vào hình ảnh của mình. </p><p>Như chính bài này sau 1 thời gian thì cũng đã bị copy <a href="https://topdev.vn/blog/chong-sao-chep-hinh-anh-bat-hop-phap-voi-watermark-image/" target="_blank" rel="noopener">https://topdev.vn/blog/chong-sao-chep-hinh-anh-bat-hop-phap-voi-watermark-image/</a> tại trang này. :joy::joy::joy::joy::joy: </p><p>dưới đây là 1 ví dụ về watermark:<br><img src="https://images.viblo.asia/a8d172b1-d2b7-449e-93bd-b65afe49527d.jpg" alt=""></p><p>bạn có thể thấy ở góc bottom-right có ảnh cái mẹt của mình. và như để khẳng định nguồn hình ảnh bài viết này là của mình. :rofl::rofl::rofl::rofl::rofl::rofl::rofl::rofl::rofl::rofl::rofl:</p><p>vậy watermark là gì ?</p><h2 id="Khai-niem-Watermark-la-gi"><a href="#Khai-niem-Watermark-la-gi" class="headerlink" title="Khái niệm Watermark là gì?"></a>Khái niệm Watermark là gì?</h2><p>  Watermark được hiểu là một dấu hiệu nhận biết như text, Image, logo hay slogan của riêng bạn hoặc công ty bạn được in hoặc làm chìm, làm mờ phía đăng sau bức ảnh. Mục đích của việc làm này chính là đánh dấu hoặc đặt ra dấu hiệu nhận biết đó là sản phẩm của bạn làm ra. Khi người khác lấy ảnh hoặc tài liệu của bạn để sử dụng cho website của họ. Mặc định người ta biết rằng đó là ảnh của bạn làm ra.<br>  <img src="https://images.viblo.asia/f8d2f803-3713-4a01-a8d0-a2c1f27de809.jpg" alt=""></p><h2 id="Y-nghia-cua-viec-su-dung-Watermark-la-gi"><a href="#Y-nghia-cua-viec-su-dung-Watermark-la-gi" class="headerlink" title="Ý nghĩa của việc sử dụng Watermark là gì?"></a>Ý nghĩa của việc sử dụng Watermark là gì?</h2><ul><li><p><strong>Chống sao chép bất hợp pháp hoặc chưa có sự đồng ý của chủ nhân tác phẩm.</strong></p><p>Đặc biệt trong bán hàng online trên mạng, hay thậm chí  việc sử dụng lại hình ảnh của nhau là điều thường xảy ra. Khi đối thủ cạnh tranh của bạn sử dụng lại hình ảnh của bạn một cách trái phép để làm công cụ riêng của họ thì việc gắn Watermark cho tác phẩm của mình là điều cần thiết. Bạn có thể sử dụng logo chìm, hotline hoặc tên của bạn làm mờ phía sau ảnh. Điều này đảm bảo cho bạn dễ dàng bảo vệ được tác phẩm của mình.</p></li><li><p><strong>Hỗ trợ quảng bá và tăng độ phủ của thương hiệu</strong></p><p>Việc sử dụng Watermark là một trong nhiều yếu tố được các thương hiệu nổi tiếng sử dụng để quảng bá thương hiệu của bạn dễ dàng. Ngoài việc bảo vệ bản quyền tác phẩm, bạn còn có thể sử dụng Watermark làm một trong các công cụ để giới thiệu công ty. Nếu ảnh của bạn chất lượng, sẽ có rất nhiều người lấy ảnh của bạn để chia sẻ và đăng tải.</p><p> Điều này không hề có hại mà ngược lại sẽ giúp doanh nghiệp của bạn được quảng bá dễ dàng hơn rất nhiều. Đây chính là điểm mạnh của Watermark giúp bạn phát triển được tiềm năng thương hiệu.</p></li><li><p><strong>Tạo ra điểm nhấn của tác phẩm</strong></p><p>Sự chăm chút trong tác phẩm của bạn từ chi tiết tới Watermark cũng có thể giúp bạn gây ấn tượng với người xem. Ngoài việc đóng dấu bản quyền, chúng còn đem lại một điểm nhấn sáng tạo cho bức hình của chính bạn hoặc của công ty.</p></li></ul><h1 id="Demo-watermark-image-voi-intervention"><a href="#Demo-watermark-image-voi-intervention" class="headerlink" title="Demo watermark image với intervention"></a>Demo watermark image với intervention</h1><p>   Lý thuyết vậy đủ rồi giờ thực hành thôi</p><h2 id="Cai-dat-thu-vien"><a href="#Cai-dat-thu-vien" class="headerlink" title="Cài đặt thư viện"></a>Cài đặt thư viện</h2><blockquote><p>Yêu cầu môi trường:</p><ul><li><p>PHP &gt;= 5.4</p></li><li><p>Fileinfo Extension</p></li><li><p>GD Library (&gt;=2.0)</p></li><li><p>Imagick PHP extension (&gt;=6.5.7)</p></li></ul></blockquote><p>Đầu tiên chạy lệnh này để tiến hành clone thư viện về project:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require intervention&#x2F;image</span><br></pre></td></tr></table></figure><p>Trong file <em>config/app.php</em> thêm <code>providers</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Intervention\Image\ImageServiceProvider::class</span><br></pre></td></tr></table></figure><p>và thêm <code>aliases</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;Image&#39; &#x3D;&gt; Intervention\Image\Facades\Image::class</span><br></pre></td></tr></table></figure><p>Vậy là xong phần cài đặt tiếp theo bắt tay vào code chức năng watermark image.</p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>Nếu bạn truy cập vào document của thư viện <a href="http://image.intervention.io/getting_started/introduction" target="_blank" rel="noopener">tại đây</a> thì đã có hẳn một ví dụ về việc watermark này:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// open an image file</span></span><br><span class="line">$img = Image::make(<span class="string">'public/foo.jpg'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// now you are able to resize the instance</span></span><br><span class="line">$img-&gt;resize(<span class="number">320</span>, <span class="number">240</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// and insert a watermark for example</span></span><br><span class="line">$img-&gt;insert(<span class="string">'public/watermark.png'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// finally we save the image as a new file</span></span><br><span class="line">$img-&gt;save(<span class="string">'public/bar.jpg'</span>);</span><br></pre></td></tr></table></figure><p>Dựa vào ví dụ của doc thì mình cần 2 ảnh 1 là ảnh cần watermark và 1 ảnh watermark.</p><p>Mình sẽ dùng 2 ảnh này cho nó cute!</p><ol><li><p>Ảnh gốc (ảnh mình muốn gắn watermark) có tên <code>foo.jpg</code><br><img src="https://images.viblo.asia/349cd9d4-abe7-49c3-bd33-1fa9ed3f5e0e.jpg" alt=""></p></li><li><p>Ảnh watermark ( dùng luôn cái mặt mình ) có tên <code>watermark.png</code></p><p> <img src="https://images.viblo.asia/avatar/3a85fdbd-c6e9-49ad-80b9-7b637af70860.JPG" alt=""></p></li></ol><p>2 ảnh này mình để trong fodel public của project</p><p>Tiến hành code thôi. mình sửa lại đoạn code ví dụ của doc 1 chút : </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Mở ảnh gốc</span></span><br><span class="line">$img = Image::make(<span class="string">'public/foo.jpg'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mở ảnh watermark</span></span><br><span class="line">$watermark = Image::make(<span class="string">'public/watermark.jpg'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//làm mờ ảnh watermark</span></span><br><span class="line">$watermark = $watermark-&gt;opacity(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// resize ảnh watermark (= 1/10 ảnh gốc)</span></span><br><span class="line">$resizePercentage = <span class="number">10</span>/<span class="number">100</span>;</span><br><span class="line">$watermarkSize = round($image-&gt;width() * $resizePercentage, <span class="number">2</span>);</span><br><span class="line">$watermark-&gt;resize($watermarkSize, <span class="keyword">null</span>, <span class="function"><span class="keyword">function</span> <span class="params">($constraint)</span> </span>&#123;</span><br><span class="line">    $constraint-&gt;aspectRatio();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//set position : vị trí của ảnh watermark ở đây mình để  góc dười bên phải</span></span><br><span class="line">$position = <span class="string">'bottom-right'</span>; </span><br><span class="line"><span class="comment">// có thể chọn các vị trí:</span></span><br><span class="line"><span class="comment">// top-left (default)</span></span><br><span class="line"><span class="comment">// top</span></span><br><span class="line"><span class="comment">// top-right</span></span><br><span class="line"><span class="comment">// left</span></span><br><span class="line"><span class="comment">// center</span></span><br><span class="line"><span class="comment">// right</span></span><br><span class="line"><span class="comment">// bottom-left</span></span><br><span class="line"><span class="comment">// bottom</span></span><br><span class="line"><span class="comment">// bottom-right</span></span><br><span class="line"><span class="comment">// Tiến hành watermark </span></span><br><span class="line">$img-&gt;insert($watermark, $position);</span><br><span class="line"></span><br><span class="line"><span class="comment">// finally we save the image as a new file</span></span><br><span class="line">$img-&gt;save(<span class="string">'public/bar.jpg'</span>);</span><br></pre></td></tr></table></figure><p>vậy là done! </p><p><img src="https://images.viblo.asia/a8d172b1-d2b7-449e-93bd-b65afe49527d.jpg" alt=""></p><h1 id="Ket-luan"><a href="#Ket-luan" class="headerlink" title="Kết luận"></a>Kết luận</h1><p>Qua bài viết này mình mong các bạn có thêm 1 sự lựa chọn cho website của mình về việc bản quyền.  Chúc các bạn thành công :heart_eyes::heart_eyes::heart_eyes::heart_eyes::heart_eyes:</p><p>Tài liệu tham khảo:<br>    <a href="https://haviweb.com.vn/watermark-la-gi/" target="_blank" rel="noopener">https://haviweb.com.vn/watermark-la-gi/</a></p><p>   <a href="http://image.intervention.io" target="_blank" rel="noopener">http://image.intervention.io</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;watermark-image-la-gi&quot;&gt;&lt;a href=&quot;#watermark-image-la-gi&quot; class=&quot;headerlink&quot; title=&quot;watermark image là gì?&quot;&gt;&lt;/a&gt;watermark image là gì?
      
    
    </summary>
    
    
    
      <category term="laravel" scheme="https://phamtuananh1996.github.io/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>Biến ảnh sprites thành ảnh động với vuejs</title>
    <link href="https://phamtuananh1996.github.io/2019/09/15/bien-anh-sprites-thanh-anh-dong-voi-vuejs/"/>
    <id>https://phamtuananh1996.github.io/2019/09/15/bien-anh-sprites-thanh-anh-dong-voi-vuejs/</id>
    <published>2019-09-15T04:28:12.000Z</published>
    <updated>2024-01-04T00:39:10.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Anh-sprites-la-gi"><a href="#Anh-sprites-la-gi" class="headerlink" title="Ảnh sprites là gì?"></a>Ảnh sprites là gì?</h1><p>Sprites là một hình ảnh lớn được tạo ra bằng cách gộp nhiều ảnh nhỏ lại với nhau theo một cách được định trước sao cho có thể tái sử dụng lại từng ảnh nhỏ mà không bị ảnh hưởng bởi các ảnh khác. </p><p>Kiểu như thế này : </p><p><img src="https://images.viblo.asia/a28b8126-1298-4ca7-a507-53865b32238d.png" alt=""></p><p>Hoặc các sticker của fb:</p><p><img src="https://scontent.fhan2-4.fna.fbcdn.net/v/t39.1997-6/p235x165/67539452_1159079340882542_8277748228300996608_n.png?_nc_cat=110&_nc_eui2=AeH2-OIUf83EPlhM5IGEZi74aLkSeDNWcKSrvRdsOkqEdn3BNjMAWULBFwWtEiXn2yNSrbycS4k812lEytZ8Cs1KgJWfxxNuQanFl3Rebv049Q&_nc_oc=AQnPO6loogCDtjBqtK6O4Jh5Fa_pXVGnqJ4JXcFkziKXFGDDnsEyRYuP15shcqg1TjQ&_nc_ht=scontent.fhan2-4.fna&oh=c43b6be170ac16f2e449bc149d1a2099&oe=5DFECA0E" alt=""></p><p><img src="https://scontent.fhan2-4.fna.fbcdn.net/v/t39.1997-6/s851x315/67530709_1159072887549854_2673552395128012800_n.png?_nc_cat=110&_nc_eui2=AeEylH9tKEBvrL0-otkHUeAQkmsPgTx2No0kxgYubflSqwvBbxD5OJjEeAVxNM3gVQOySKyaQWiSruhLdbMcVjmHS3RRhVYTaDE8zCvzLWQ8gQ&_nc_oc=AQnrfyZgqePF4bC4Fq_DjZUjfPoFyKMRd0FwqvYrQEsMxtXcZBAA1BnnYF9OkZlceRM&_nc_ht=scontent.fhan2-4.fna&oh=53889069282914a6029d4927539cf96d&oe=5E104D7F" alt=""></p><h1 id="Muc-tieu-cua-bai-viet"><a href="#Muc-tieu-cua-bai-viet" class="headerlink" title="Mục tiêu của bài viết"></a>Mục tiêu của bài viết</h1><ul><li><p>Qua bài viết này mình muốn chuyển các ảnh sprites đứng yên kia thành anh động bằng cách viết 1 <strong>component vuejs</strong>. </p></li><li><p>Các bạn cũng có thể tham khảo cách khác bằng <strong>canvas</strong> của HTML5 qua bài viết này : <a href="https://viblo.asia/p/cach-tao-anh-giong-gif-bang-javascript-khong-phai-ai-cung-biet-YWOZr6xrZQ0" target="_blank" rel="noopener">https://viblo.asia/p/cach-tao-anh-giong-gif-bang-javascript-khong-phai-ai-cung-biet-YWOZr6xrZQ0</a></p></li></ul><h1 id="Uu-diem-so-voi-viec-dung-anh-gif"><a href="#Uu-diem-so-voi-viec-dung-anh-gif" class="headerlink" title="Ưu điểm so với việc dùng ảnh gif"></a>Ưu điểm so với việc dùng ảnh gif</h1><ol><li>Tôi ưu hơn performance web vì thay vì load ảnh gif thì thay vào đó là anh png.</li><li>Có thể tương tác với ảnh (vd: có thể cho ảnh dừng lại hoặc tiếp tục chuyển động, hoặc chuyển động vs số lần nhất định rồi ngừng).</li><li>Tùy chỉnh chuyển động nhanh chậm của ảnh.<h1 id="Xay-dung-component-vuejs"><a href="#Xay-dung-component-vuejs" class="headerlink" title="Xây dựng component vuejs"></a>Xây dựng component vuejs</h1><h2 id="Huong-giai-quyet"><a href="#Huong-giai-quyet" class="headerlink" title="Hướng giải quyết"></a>Hướng giải quyết</h2>Đơn giản chỉ là dùng js để thay đổi <code>background-position</code> qua từng phần của bước ảnh và lặp lại khi đến ảnh cuối vậy là mình đã có 1 ảnh tương tự gif.</li></ol><h2 id="Viet-component"><a href="#Viet-component" class="headerlink" title="Viết component"></a>Viết component</h2><p>Khởi tạo các props và style cho component: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div :style=<span class="string">"style"</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; clearInterval &#125; <span class="keyword">from</span> <span class="string">'timers'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    image: <span class="built_in">String</span>, <span class="comment">// Url image</span></span><br><span class="line">    height: <span class="built_in">Number</span>, <span class="comment">// chiều cao của component</span></span><br><span class="line">    width: <span class="built_in">Number</span>, <span class="comment">// chiều rộng của component</span></span><br><span class="line">    loop: <span class="built_in">Number</span>, <span class="comment">// số lần lặp của ảnh</span></span><br><span class="line">    frame: <span class="built_in">Number</span>, <span class="comment">// số hình chạy qua trên 1 giây</span></span><br><span class="line">    max: <span class="built_in">Number</span>, <span class="comment">// số hình của ảnh</span></span><br><span class="line">    column: <span class="built_in">Number</span>, <span class="comment">// số cột</span></span><br><span class="line">    row: <span class="built_in">Number</span>, <span class="comment">// số dòng</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  data()&#123;</span><br><span class="line">  <span class="comment">// khởi tạo style ban đầu</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      style: &#123;</span><br><span class="line">        width: <span class="keyword">this</span>.width + <span class="string">'px'</span>,</span><br><span class="line">        height: <span class="keyword">this</span>.height + <span class="string">'px'</span>,</span><br><span class="line">        background: <span class="string">`url(<span class="subst">$&#123;<span class="keyword">this</span>.image&#125;</span>)`</span>,</span><br><span class="line">        backgroundSize: <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.width * <span class="keyword">this</span>.column&#125;</span>px <span class="subst">$&#123;<span class="keyword">this</span>.height * <span class="keyword">this</span>.row&#125;</span>px`</span>,</span><br><span class="line">        backgroundPosition: <span class="string">'0px 0px'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>Tiếp theo chúng ta viết function để ảnh có thể chuyển động.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">   play() &#123;</span><br><span class="line">     <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">     <span class="keyword">let</span> position = &#123;</span><br><span class="line">       x: <span class="number">0</span>,</span><br><span class="line">       y: <span class="number">0</span>,</span><br><span class="line">       loop: <span class="number">0</span>,</span><br><span class="line">     &#125; <span class="comment">// khởi tạo vị trí ban đầu</span></span><br><span class="line">     <span class="keyword">const</span> playTimer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">       i++;</span><br><span class="line">       <span class="keyword">if</span>(i % <span class="keyword">this</span>.column) &#123;</span><br><span class="line">         position.x -= <span class="keyword">this</span>.width; </span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         position.y -= <span class="keyword">this</span>.height; </span><br><span class="line">         position.x = <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (i == <span class="keyword">this</span>.max) &#123;</span><br><span class="line">         i = <span class="number">0</span></span><br><span class="line">         position.y = <span class="number">0</span>; </span><br><span class="line">         position.x = <span class="number">0</span>;</span><br><span class="line">         position.loop++;</span><br><span class="line">         <span class="keyword">if</span>(position.loop &gt;= <span class="keyword">this</span>.loop) &#123;</span><br><span class="line">           clearInterval(playTimer)</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">this</span>.$<span class="keyword">set</span>(this.style, 'backgroundPosition', `$&#123;position.x&#125;px $&#123;position.y&#125;px<span class="string">`) // set lại style</span></span><br><span class="line"><span class="string">     &#125;, 1000/this.frame);</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string"> &#125;</span></span><br></pre></td></tr></table></figure><p>Gọi hàm play() </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">    <span class="keyword">this</span>.play()</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>Vậy là chúng ta đã viết xong component để ảnh chuyện động. full code :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div :style=<span class="string">"style"</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'HelloWorld'</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    image: <span class="built_in">String</span>,</span><br><span class="line">    height: <span class="built_in">Number</span>,</span><br><span class="line">    width: <span class="built_in">Number</span>,</span><br><span class="line">    loop: <span class="built_in">Number</span>,</span><br><span class="line">    frame: <span class="built_in">Number</span>,</span><br><span class="line">    max: <span class="built_in">Number</span>,</span><br><span class="line">    column: <span class="built_in">Number</span>,</span><br><span class="line">    row: <span class="built_in">Number</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="keyword">this</span>.play()</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  data()&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      style: &#123;</span><br><span class="line">        width: <span class="keyword">this</span>.width + <span class="string">'px'</span>,</span><br><span class="line">        height: <span class="keyword">this</span>.height + <span class="string">'px'</span>,</span><br><span class="line">        background: <span class="string">`url(<span class="subst">$&#123;<span class="keyword">this</span>.image&#125;</span>)`</span>,</span><br><span class="line">        backgroundSize: <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.width * <span class="keyword">this</span>.column&#125;</span>px <span class="subst">$&#123;<span class="keyword">this</span>.height * <span class="keyword">this</span>.row&#125;</span>px`</span>,</span><br><span class="line">        backgroundPosition: <span class="string">'0px 0px'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  methods: &#123;</span><br><span class="line">    play() &#123;</span><br><span class="line">      <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">      <span class="keyword">let</span> position = &#123;</span><br><span class="line">        x: <span class="number">0</span>,</span><br><span class="line">        y: <span class="number">0</span>,</span><br><span class="line">        loop: <span class="number">0</span>,</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> playTimer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">if</span>(i % <span class="keyword">this</span>.column) &#123;</span><br><span class="line">          position.x -= <span class="keyword">this</span>.width; </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          position.y -= <span class="keyword">this</span>.height; </span><br><span class="line">          position.x = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i == <span class="keyword">this</span>.max) &#123;</span><br><span class="line">          i = <span class="number">0</span></span><br><span class="line">          position.y = <span class="number">0</span>; </span><br><span class="line">          position.x = <span class="number">0</span>;</span><br><span class="line">          position.loop++;</span><br><span class="line">          <span class="keyword">if</span>(position.loop &gt;= <span class="keyword">this</span>.loop) &#123;</span><br><span class="line">            clearInterval(playTimer)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>.$<span class="keyword">set</span>(this.style, 'backgroundPosition', `$&#123;position.x&#125;px $&#123;position.y&#125;px<span class="string">`)</span></span><br><span class="line"><span class="string">      &#125;, 1000/this.frame);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>Việc tiếp theo là chúng ta gọi component này ra và sử dụng thôi.</p><p>Mình test thử với ảnh này nhé:<br><img src="https://images.viblo.asia/a28b8126-1298-4ca7-a507-53865b32238d.png" alt=""></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;ImageGif</span><br><span class="line">      image = <span class="string">"https://images.viblo.asia/a28b8126-1298-4ca7-a507-53865b32238d.png"</span></span><br><span class="line">      :width=<span class="string">"100"</span></span><br><span class="line">      :height=<span class="string">"100"</span></span><br><span class="line">      :column=<span class="string">"7"</span></span><br><span class="line">      :row=<span class="string">"4"</span></span><br><span class="line">      :max=<span class="string">"27"</span></span><br><span class="line">      :frame=<span class="string">"20"</span></span><br><span class="line">      :loop=<span class="string">"10"</span></span><br><span class="line">    /&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> ImageGif <span class="keyword">from</span> <span class="string">'./components/image-gif.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'app'</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    ImageGif</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>Thành quả : </p><p><img src="https://images.viblo.asia/6161d4d6-de76-4b2d-8ecf-b5034b503b11.gif" alt=""></p><p><a href="https://codesandbox.io/s/vue-template-znn3p" target="_blank" rel="noopener">https://codesandbox.io/s/vue-template-znn3p</a></p><h1 id="Ket-luan"><a href="#Ket-luan" class="headerlink" title="Kết luận"></a>Kết luận</h1><p>Các bạn cũng có thể tham khảo thêm github:<br><a href="https://github.com/tuananhp-1844/image-gif" target="_blank" rel="noopener">https://github.com/tuananhp-1844/image-gif</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Anh-sprites-la-gi&quot;&gt;&lt;a href=&quot;#Anh-sprites-la-gi&quot; class=&quot;headerlink&quot; title=&quot;Ảnh sprites là gì?&quot;&gt;&lt;/a&gt;Ảnh sprites là gì?&lt;/h1&gt;&lt;p&gt;Sprites 
      
    
    </summary>
    
    
    
      <category term="javascript" scheme="https://phamtuananh1996.github.io/tags/javascript/"/>
    
      <category term="vuejs" scheme="https://phamtuananh1996.github.io/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>&quot;Đóng trình duyệt, session mất&quot; hiểu thế nào cho đúng?</title>
    <link href="https://phamtuananh1996.github.io/2019/08/07/dong-trinh-duyet-session-mat-hieu-the-nao-cho-dung/"/>
    <id>https://phamtuananh1996.github.io/2019/08/07/dong-trinh-duyet-session-mat-hieu-the-nao-cho-dung/</id>
    <published>2019-08-07T08:34:39.000Z</published>
    <updated>2024-01-04T00:39:10.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dat-van-de"><a href="#Dat-van-de" class="headerlink" title="Đặt vấn đề"></a>Đặt vấn đề</h1><p>Mình đã nghe rất nhiều người nói “session sẽ mất khi đóng trình duyệt”. Đặc biết là khi còn là sinh viên thì câu này là câu “thần chú” khi đi phỏng vấn. Vậy có phải khi đóng trình duyệt thật sự session sẽ mất không ? Và session còn mất trong các trường hợp nào nữa?</p><blockquote><p>Note: Bài này mình dùng ngôn ngữ php và nginx nhé</p></blockquote><h1 id="Session-la-gi"><a href="#Session-la-gi" class="headerlink" title="Session là gì?"></a>Session là gì?</h1><p>Một session hay còn gọi là một phiên làm việc. Trong khoa học máy tính, Nó đơn giản là cách giao tiếp giữa client  với server. Một session bắt đầu khi client gửi request đến sever, nó tồn tại xuyên suốt từ trang này đến trang khác trong ứng dụng và chỉ kết thúc khi hết thời gian timeout . Giá trị của session sẽ được lưu trong một tệp tin trên máy chủ.</p><p>Khái niệm session chắc không quá xa lạ nữa. Mình muốn làm dõ hơn nữa khái niệm này:</p><p><strong>*”Giá trị của session sẽ được lưu trong một tệp tin trên máy chủ”*</strong></p><p><strong>Mình muốn biết  tập tin đó lưu trữ nhưng gì và ở đâu ?</strong></p><p>Mình sẽ tạo ra 1 session và lưu 1 số giá trị vào: </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line">$_SESSION[<span class="string">"color"</span>] = <span class="string">"red"</span>;</span><br><span class="line">$_SESSION[<span class="string">"color1"</span>] = <span class="string">"yellow"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Session is created"</span>;</span><br></pre></td></tr></table></figure><p>Sau đó mở trình duyệt chrome để chạy.<br><img src="https://images.viblo.asia/9b0807c7-a680-4616-96d0-137f3719ead6.png" alt=""><br>Vậy là mình đã tạo session thành công.</p><p>Thì mặc định session sẽ được lưu <code>/var/lib/php/session</code> nhé và chúng ta có thể thay đổi nơi lưu trữ session trong file php.ini</p><p><img src="https://images.viblo.asia/5b8de0be-5526-4969-88d1-62c9260c4341.png" alt=""></p><p>Mình thấy có file <code>sess_qg2vvqet5ft791f4hgc49hcqr8</code> được tạo ra. thử mở ra xem có gì bên trong nào</p><p><img src="https://images.viblo.asia/9e884e3c-f3fb-45cf-ba17-11deda5eb356.png" alt=""></p><p>Vậy là trong file lưu tên và giá trị mà chúng ta vừa set vào còn <code>s:3</code> và <code>s:6</code> là kiểu dữ liệu và độ dài (String độ dài 3 và String độ dài 6)</p><h1 id="Cach-phan-biet-session-cua-cac-trinh-duyet-khac-nhau"><a href="#Cach-phan-biet-session-cua-cac-trinh-duyet-khac-nhau" class="headerlink" title="Cách phân biệt session của các trình duyệt khác nhau"></a>Cách phân biệt session của các trình duyệt khác nhau</h1><ul><li>Session khi sinh ra được lưu trên 1 file có tên dài dòng, khó đoán và được tạo ngẫu nhiên là session id trên máy chủ, và đồng thời gửi lại cho client 1 Session cookie (không phải session)  có nội dung (hay giá trị) đúng như session id (để có thể so khớp session nào là của client nào).</li></ul><blockquote><p>Session cookie (không phải session) khác với cookie thông thường đó là khi đóng trình duyệt thì loại cookie này sẽ mất.</p></blockquote><p>Vậy chúng ta tìm trên trình duyệt chrome xem cookie này như thế nào:<br><img src="https://images.viblo.asia/a2df5ee9-3b0a-44ed-8dbb-df1bf8d61ba1.png" alt=""></p><blockquote><p> Đối với mỗi ngôn ngữ lập trình web sẽ có tên Session cookie quy định như php là PHPSESSID, jsp là JSESSIONID, … </p></blockquote><p>Vậy PHPSESSID của trình duyệt này là <code>qg2vvqet5ft791f4hgc49hcqr8</code> và nó match đúng với file vừa được tạo ra trên server.</p><p><strong>Để làm dõ hơn thì mình mở bằng trình duyệt firefox</strong><br><img src="https://images.viblo.asia/e0c541d0-9d50-4ffd-8b92-083b5d6ae178.png" alt=""></p><p>Sau khi chạy thì mình thấy trên server có tạo thêm 1 file <code>sess_su7q6pskehc3nfqiu479p4oqvn</code></p><p><img src="https://images.viblo.asia/44dc1f7f-17bd-4a46-b04f-463b4aba8d8b.png" alt=""></p><p>Và session cookie của trình duyệt firefox cũng match đúng với file đó.</p><p>Vậy dựa vào PHPSESSID đó mà server có thể phân biệt được session nào là của trình duyệt nào.</p><h1 id="Timeout-cua-session"><a href="#Timeout-cua-session" class="headerlink" title="Timeout của session"></a>Timeout của session</h1><p>Là khoảng thời gian mà session tồn tại nếu không có request từ client đến server . mặc định là 24 phút .bạn cũng có thể thay đổi khoảng thời gian này phong file php.ini</p><h1 id="Quay-lai-van-de"><a href="#Quay-lai-van-de" class="headerlink" title="Quay lại vấn đề"></a>Quay lại vấn đề</h1><p>Dựa vào những thứ tìm được từ bên trên mình sẽ đặt giả thiết thế này cho  hình dung:</p><ul><li>Tủ (session) :file_cabinet:</li><li>Chìa khóa (Session cookie) :old_key:</li><li>Bạn (client) :speak_no_evil:</li><li>người cho thuê tủ (server) :pig:</li><li>Đồ dùng trong tủ (nội dung của session) :cookie:</li></ul><p>Qui định : </p><ul><li>Mỗi chìa khóa chỉ mở được 1 tủ, mỗi tủ có đồ dùng  bên trong. </li><li>Nếu bạn không quay lại sử dụng tủ thì tủ sẽ bị thi hồi sau 1 khoảng thời gian (do người cho thuê quyết định) kể cả bạn có chìa khóa. :joy::joy:</li><li>Nếu làm mất chìa khóa thì bạn sẽ không sử dụng được tủ.</li></ul><p><strong>Như đã biết thì đóng trình duyệt thì Session cookie sẽ mất.</strong></p><p>Trường hợp này được tưởng tượng như sau:</p><p>Người cho thuê tủ cho bạn thuê tủ và đưa cho bạn chìa khóa để sử dụng cái tủ đấy. nhưng vô tình bạn làm mất chìa khóa. Mặc dù vẫn có tủ ở đấy. Và theo quy định bạn không sử dụng tủ trong 1 khoảng thời gian thì tủ sẽ bị thu hồi.</p><p>Vậy câu <strong>“session sẽ mất khi đóng trình duyệt”</strong></p><p>Trường hợp này sẽ là:<br>Tủ sẽ bị thu hồi khi bạn mất chìa khóa. nhưng thật ra bạn mất chìa khóa thì tủ vẫn còn đó. chỉ là do không có chìa khóa bạn không thể sử dụng được tủ và do không sử dụng lên sau 1 khoảng thời gian tủ sẽ bị thu hồi.</p><h1 id="Ket-luan"><a href="#Ket-luan" class="headerlink" title="Kết luận"></a>Kết luận</h1><p>Vậy  <strong><em>đóng trình duyệt thì session bị mất</em></strong>  . Lý do là khi đóng trình duyện thì Session cookie của bạn bị xóa. và vì không có cái Session cookie nữa .lên server không biết bạn là ai còn cái session cũ của bạn thì vẫn còn ở đó. và do sau 1 khoảng thời gian được qui định session ấy không được sử dụng đến vì vậy nó đã bị kill</p><p>Qua bài viết này mình muốn làm dõ hơn vì sao đóng trình duyệt thì session bị mất. qua đó cũng hiểu dõ hơn về cớ chế hoạt động của session. </p><blockquote><p>Cảm ơn các bạn đã đọc đến đây ạ :heart_eyes::heart_eyes::heart_eyes::heart_eyes::heart_eyes::heart_eyes:</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Dat-van-de&quot;&gt;&lt;a href=&quot;#Dat-van-de&quot; class=&quot;headerlink&quot; title=&quot;Đặt vấn đề&quot;&gt;&lt;/a&gt;Đặt vấn đề&lt;/h1&gt;&lt;p&gt;Mình đã nghe rất nhiều người nói “sess
      
    
    </summary>
    
    
    
      <category term="cookie" scheme="https://phamtuananh1996.github.io/tags/cookie/"/>
    
      <category term="session" scheme="https://phamtuananh1996.github.io/tags/session/"/>
    
  </entry>
  
  <entry>
    <title>CRUD Unit Testing trong Laravel</title>
    <link href="https://phamtuananh1996.github.io/2019/07/01/crud-unit-testing-trong-laravel/"/>
    <id>https://phamtuananh1996.github.io/2019/07/01/crud-unit-testing-trong-laravel/</id>
    <published>2019-07-01T10:08:37.000Z</published>
    <updated>2024-01-04T00:39:10.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Gioi-thieu"><a href="#Gioi-thieu" class="headerlink" title="Giới thiệu"></a>Giới thiệu</h1><p><strong>1. UnitTest là gì?</strong></p><ul><li><p><strong>UnitTest</strong>: Kiểm thử ở mức đơn vị mã nguồn. Một đơn vị mã nguồn là thành phần nhỏ nhất trong mã nguồn mà chúng ta có thể kiểm tra như. Trong Unit Test ta sẽ kiểm thử các class, method,…Mục tiêu của unit testing là kiểm tra tính đúng đắn trong các xử lý của từng đơn vị mã nguồn.</p></li><li><p>Hiểu đơn giản đây là công việc viết code để test code chúng ta viết ra.</p></li><li><p>Để thực hiện công việc này chúng ta cần PHPUnit và trong Laravel tích hợp sẵn PHPUnit.</p></li></ul><p>Trong bài viết này mình sẽ demo 1 ví dụ về unit test</p><h1 id="Tao-model-va-migration"><a href="#Tao-model-va-migration" class="headerlink" title="Tạo model và migration"></a>Tạo model và migration</h1><p>Các bạn chạy lệnh để tạo ra model và migration <strong>Category</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:model Category -m</span><br></pre></td></tr></table></figure><p>Ở file Model App\Category.php : </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Category</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $fillable = [</span><br><span class="line">        <span class="string">'name'</span>,</span><br><span class="line">        <span class="string">'description'</span>,</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Viết migrate tạo table categories:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Schema</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Schema</span>\<span class="title">Blueprint</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Migrations</span>\<span class="title">Migration</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateCategoriesTable</span> <span class="keyword">extends</span> <span class="title">Migration</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Run the migrations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Schema::create(<span class="string">'categories'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint $table)</span> </span>&#123;</span><br><span class="line">            $table-&gt;bigIncrements(<span class="string">'id'</span>);</span><br><span class="line">            $table-&gt;string(<span class="string">'name'</span>);</span><br><span class="line">            $table-&gt;string(<span class="string">'description'</span>)-&gt;nullable();</span><br><span class="line">            $table-&gt;timestamps();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Reverse the migrations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">down</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Schema::dropIfExists(<span class="string">'categories'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Vậy là tạo xong model và migration chạy lệnh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan migrate</span><br></pre></td></tr></table></figure><p>để thực thi file migration vừa tạo.</p><p>Tiếp theo , tạo các chức năng CRUD cho Category , ở đây mình dùng repository nhé!</p><h1 id="Tao-cac-crud-function-trong-repository"><a href="#Tao-cac-crud-function-trong-repository" class="headerlink" title="Tạo các crud function trong repository"></a>Tạo các crud function trong repository</h1><p>Ở đây mình tập trung nhiều vào phần test lên mình tạo file repository đơn giản. </p><p>Các bạn tạo file App\Repositories\CategoryRepository.php và tạo các function CRUD như sau: </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Category</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategoryRepository</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $model;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;model = <span class="keyword">$this</span>-&gt;model = app()-&gt;make(Category::class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Tạo category</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">storeCategory</span><span class="params">($data)</span> : <span class="title">Category</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $category = <span class="keyword">$this</span>-&gt;model-&gt;create($data);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $category;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update category</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">updateCategory</span><span class="params">($data, $category)</span> : <span class="title">bool</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $category-&gt;update($data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Show category</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showCategory</span><span class="params">($category_id)</span> : <span class="title">Category</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;model-&gt;findOrFail($category_id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Destroy category</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">destroyCategory</span><span class="params">($category)</span> : <span class="title">bool</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;model-&gt;delete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Vậy là đã xong các chức năng thêm sửa xóa rồi. bắt đầu viết test thôi !!! :100::100:</p><h1 id="Tien-hanh-tao-CRUD-Unit-Testing"><a href="#Tien-hanh-tao-CRUD-Unit-Testing" class="headerlink" title="Tiến hành tạo CRUD Unit Testing"></a>Tiến hành tạo CRUD Unit Testing</h1><p>Để tạo 1 test, ta sử dụng câu lệnh:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Tạo 1 test trong thư mục Feature</span><br><span class="line">    php artisan make:test CategoryTest</span><br><span class="line">&#x2F;&#x2F; Tạo 1 test trong thư mục Unit</span><br><span class="line">    php artisan make:test CategoryTest --unit</span><br></pre></td></tr></table></figure><blockquote><p>Lưu ý: Nội dung bên trong thư mục Feature hay Unit có cấu trúc giống thư mục app/ ví dụ app/Repositories/CategoryRepository.php thì trong thư mục Unit là test/Unit/Repositories/CategoryRepository.php cho dễ quản lý nhé</p></blockquote><p>Ở đây mình tạo unit test lên chạy lệnh: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:test Repositories&#x2F;CategoryTest --unit</span><br></pre></td></tr></table></figure><p>Trước khi viết test mình lưu ý 2 function sau: </p><blockquote><p><strong>setUp()</strong> :  Chạy trước mỗi method test. Sử dụng khi muốn khởi tạo biến, mở kết nối file,… chuẩn bị môi trường để test</p></blockquote><blockquote><p><strong>tearDown()</strong>: Chạy sau mỗi method test. Sử dụng để hủy các biến, kết nối,…</p></blockquote><p>Ví dụ :</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Tests</span>\<span class="title">Unit</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Tests</span>\<span class="title">TestCase</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">WithFaker</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">RefreshDatabase</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategoryTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span> : <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::setUp();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">tearDown</span><span class="params">()</span> : <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::tearDown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A basic unit test example 1.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testExample1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertTrue(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A basic unit test example 2.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testExample2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertTrue(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Việc test sẽ lần lượt chạy như sau:</p><ol><li>Method: setUp()</li><li>Method: testExample1()</li><li>Method: tearDown()</li><li>Method: setUp()</li><li>Method: testExample2()</li><li>Method: tearDown()</li></ol><h2 id="Test-chuc-nang-tao-store"><a href="#Test-chuc-nang-tao-store" class="headerlink" title="Test chức năng tạo (store)"></a>Test chức năng tạo (store)</h2><p>Trong file CategoryTest.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Tests</span>\<span class="title">TestCase</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">WithFaker</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">RefreshDatabase</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">CategoryRepository</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Category</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Faker</span>\<span class="title">Factory</span> <span class="title">as</span> <span class="title">Faker</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategoryTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $category;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span> : <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::setUp();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;faker = Faker::create();</span><br><span class="line">        <span class="comment">// chuẩn bị dữ liệu test</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;category = [</span><br><span class="line">            <span class="string">'name'</span> =&gt; <span class="keyword">$this</span>-&gt;faker-&gt;name,</span><br><span class="line">            <span class="string">'description'</span> =&gt; <span class="keyword">$this</span>-&gt;faker-&gt;name,</span><br><span class="line">        ];</span><br><span class="line">        <span class="comment">// khởi tạo lớp CategoryRepository</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;categoryRepository = <span class="keyword">new</span> CategoryRepository();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A basic unit test store</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testStore</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// Gọi hàm tạo</span></span><br><span class="line">        $category = <span class="keyword">$this</span>-&gt;categoryRepository-&gt;storeCategory(<span class="keyword">$this</span>-&gt;category);</span><br><span class="line">        <span class="comment">// Kiểm tra xem kết quả trả về có là thể hiện của lớp Category hay không</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertInstanceOf(Category::class, $category);</span><br><span class="line">        <span class="comment">// Kiểm tra data trả về</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertEquals(<span class="keyword">$this</span>-&gt;category[<span class="string">'name'</span>], $category-&gt;name);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertEquals(<span class="keyword">$this</span>-&gt;category[<span class="string">'description'</span>], $category-&gt;description);</span><br><span class="line">        <span class="comment">// Kiểm tra dữ liệu có tồn tại trong cơ sở dữ liệu hay không</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertDatabaseHas(<span class="string">'categories'</span>, <span class="keyword">$this</span>-&gt;category);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vậy là xong . sau đó chúng ta chạy lệnh để test: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vendor&#x2F;bin&#x2F;phpunit</span><br></pre></td></tr></table></figure><p>Nếu trả về như này là đã pass hết trường hợp:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PHPUnit 7.5.13 by Sebastian Bergmann and contributors.</span><br><span class="line"></span><br><span class="line">...                                                                 3 &#x2F; 3 (100%)</span><br><span class="line"></span><br><span class="line">Time: 373 ms, Memory: 18.00 MB</span><br><span class="line"></span><br><span class="line">OK (3 tests, 6 assertions)</span><br></pre></td></tr></table></figure><p>Tương tự với các chức năng show, update, destroy</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Tests</span>\<span class="title">Unit</span>\<span class="title">Repositories</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Tests</span>\<span class="title">TestCase</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">WithFaker</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">RefreshDatabase</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">CategoryRepository</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Category</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Faker</span>\<span class="title">Factory</span> <span class="title">as</span> <span class="title">Faker</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategoryTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $category;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span> : <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::setUp();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;faker = Faker::create();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;category = [</span><br><span class="line">            <span class="string">'name'</span> =&gt; <span class="keyword">$this</span>-&gt;faker-&gt;name,</span><br><span class="line">            <span class="string">'description'</span> =&gt; <span class="keyword">$this</span>-&gt;faker-&gt;name,</span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;categoryRepository = <span class="keyword">new</span> CategoryRepository();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A basic unit test store</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testStore</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $category = <span class="keyword">$this</span>-&gt;categoryRepository-&gt;storeCategory(<span class="keyword">$this</span>-&gt;category);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertInstanceOf(Category::class, $category);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertEquals(<span class="keyword">$this</span>-&gt;category[<span class="string">'name'</span>], $category-&gt;name);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertEquals(<span class="keyword">$this</span>-&gt;category[<span class="string">'description'</span>], $category-&gt;description);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertDatabaseHas(<span class="string">'categories'</span>, <span class="keyword">$this</span>-&gt;category);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testShow</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $category = factory(Category::class)-&gt;create();</span><br><span class="line">        $found = <span class="keyword">$this</span>-&gt;categoryRepository-&gt;showCategory($category-&gt;id);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertInstanceOf(Category::class, $found);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertEquals($found-&gt;name, $category-&gt;name);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertEquals($found-&gt;description, $category-&gt;description);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testUpdate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="comment">// Tạo dữ liệu mẫu</span></span><br><span class="line">        $category = factory(Category::class)-&gt;create();</span><br><span class="line">        $newCategory = <span class="keyword">$this</span>-&gt;categoryRepository-&gt;updateCategory(<span class="keyword">$this</span>-&gt;category, $category);</span><br><span class="line">        <span class="comment">// Kiểm tra dữ liệu trả về</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertInstanceOf(Category::class, $newCategory);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertEquals($newCategory-&gt;name, <span class="keyword">$this</span>-&gt;category[<span class="string">'name'</span>]);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertEquals($newCategory-&gt;description, <span class="keyword">$this</span>-&gt;category[<span class="string">'description'</span>]);</span><br><span class="line">        <span class="comment">// Kiểm tra xem cơ sở dữ liệu đã được cập nhập hay chưa</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertDatabaseHas(<span class="string">'categories'</span>, <span class="keyword">$this</span>-&gt;category);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testDestroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $category = factory(Category::class)-&gt;create();</span><br><span class="line">        $deleteCategory = <span class="keyword">$this</span>-&gt;categoryRepository-&gt;destroyCategory($category);</span><br><span class="line">        <span class="comment">// Kiểm tra dữ liệu có trả về true hay không</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertTrue($deleteCategory);</span><br><span class="line">        <span class="comment">// kiểm tra xem dữ liệu đã được xóa trong cơ sở dữ liệu hay chưa</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;assertDatabaseMissing(<span class="string">'categories'</span>, $category-&gt;toArray());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Tong-ket"><a href="#Tong-ket" class="headerlink" title="Tổng kết"></a>Tổng kết</h1><p>Hy vọng qua bài viết này các bạn có thể hiểu hơn về unit test</p><p>Tham khảo: </p><p><a href="https://medium.com/@jsdecena/crud-unit-testing-in-laravel-5-ac286f592cfd" target="_blank" rel="noopener">https://medium.com/@jsdecena/crud-unit-testing-in-laravel-5-ac286f592cfd</a><br><a href="https://laravel.com/docs/5.8/testing" target="_blank" rel="noopener">https://laravel.com/docs/5.8/testing</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Gioi-thieu&quot;&gt;&lt;a href=&quot;#Gioi-thieu&quot; class=&quot;headerlink&quot; title=&quot;Giới thiệu&quot;&gt;&lt;/a&gt;Giới thiệu&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;1. UnitTest là gì?&lt;/strong&gt;&lt;/p
      
    
    </summary>
    
    
    
      <category term="laravel" scheme="https://phamtuananh1996.github.io/tags/laravel/"/>
    
      <category term="unit test" scheme="https://phamtuananh1996.github.io/tags/unit-test/"/>
    
      <category term="crud" scheme="https://phamtuananh1996.github.io/tags/crud/"/>
    
  </entry>
  
</feed>
