{"meta":{"title":"Phạm Tuấn Anh","subtitle":"","description":"","author":"Phạm Tuấn Anh","url":"https://phamtuananh1996.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2024-01-04T00:39:10.946Z","updated":"2024-01-04T00:39:10.946Z","comments":false,"path":"/404.html","permalink":"https://phamtuananh1996.github.io/404.html","excerpt":"","text":""},{"title":"Category","date":"2024-01-04T00:39:10.962Z","updated":"2024-01-04T00:39:10.962Z","comments":false,"path":"categories/index.html","permalink":"https://phamtuananh1996.github.io/categories/index.html","excerpt":"","text":""},{"title":"About","date":"2024-01-04T00:39:10.962Z","updated":"2024-01-04T00:39:10.962Z","comments":false,"path":"about/index.html","permalink":"https://phamtuananh1996.github.io/about/index.html","excerpt":"","text":"About"},{"title":"Book","date":"2024-01-04T00:39:10.962Z","updated":"2024-01-04T00:39:10.962Z","comments":false,"path":"books/index.html","permalink":"https://phamtuananh1996.github.io/books/index.html","excerpt":"","text":""},{"title":"Tags","date":"2024-01-04T00:39:10.962Z","updated":"2024-01-04T00:39:10.962Z","comments":false,"path":"tags/index.html","permalink":"https://phamtuananh1996.github.io/tags/index.html","excerpt":"","text":""},{"title":"Links","date":"2024-01-04T00:39:10.962Z","updated":"2024-01-04T00:39:10.962Z","comments":true,"path":"links/index.html","permalink":"https://phamtuananh1996.github.io/links/index.html","excerpt":"","text":""}],"posts":[{"title":"Recommend(Laravel): Đặt tên sao cho chuẩn :))","slug":"recommendlaravel-dat-ten-sao-cho-chuan","date":"2024-01-04T00:39:10.962Z","updated":"2024-01-04T00:39:10.962Z","comments":true,"path":"2024/01/04/recommendlaravel-dat-ten-sao-cho-chuan/","link":"","permalink":"https://phamtuananh1996.github.io/2024/01/04/recommendlaravel-dat-ten-sao-cho-chuan/","excerpt":"","text":"Mở đầuHếy yoo, xin chào các bạn , trước kia hồi mới là sinh viên chưa bỏ được code cẩu thả đã nhảy vào code laravel ngay. Kết quả là mình đặt tên lớp, tên hàm, tên biến …. rất lung tung và không theo một quy tắc nhất định nào cả. Rồi đến lúc đọc lại code thì thôi rồi. nước mắt cứ phải gọi là tuôn rơi :sweat_smile::sweat_smile::sweat_smile: nghĩ lại vẫn thấy ngu rồi có khi định viết lại cả chức năng auth của nó ấy chứ. Vì vậy mình lên mạng tham khảo góp nhặt 1 số best practices về quy tắc đặt tên chung của laravel. Để các bạn cùng tìm hiểu. Ai biết rồi thì có thể lướt xuống và upvote ạ ai chưa biết có thể đọc để apply vào những dự án tiếp theo. Hoặc là dự án đang làm luôn (nhưng nếu cty có cách đặt tên riêng rồi thì lên theo qui tắc của cty nhé, không lại bị đuổi việc như chơi đấy) . :joy::joy::joy::joy: Conventions là gìThì conventions là tập hợp những nguyên tắc chung khi lập trình nhằm làm cho code dễ đọc, dễ hiểu, do đó dễ quản lý, bảo trì hơn.Cái này thì mỗi cty sẽ có quy định khác nhau nhưng đa phần sẽ theo các chuẩn PSR . PSR là viết tắt của PHP Standards Recommendations , là những tiêu chuẩn khi code PHP, nó được cộng đồng PHP xây dựng và áp dụng theo. Chuẩn PSR-0 nói về autoloading Chuẩn PSR-1 về basic coding Chuẩn PSR-2 về style coding Chuẩn PSR-3 nói về logging Chuẩn PSR-4 nói về autoloading : đây là phần cải tiến của PSR-0 Chuẩn PSR-7 nói về HTTP message Các bạn có thể tìm hiểu thêm về các chuẩn này. trên mạng có rất nhiều bài viết về chuẩn này. Ở khuôn khổ bài này thì sẽ có liên quan một chút ít về chuẩn PSR-2 về style coding Mà mình nói gì mà miên man vậy đang xem qua về một số best practices về quy tắc đặt tên của laravel mà. Let go nhé. Naming Conventions Sau đây là các quy ước đặt tên được chấp nhận và đang được sử dụng bởi cộng đồng người dùng Larave nhé! Không phải mình tự nghĩ ra đâu! ControllersLaravel dựa trên mô hình MVC mà. nên controller chúng ta sẽ thấy khá nhiều trong một project laravel vậy sao để đặt tên cho controller 1 cách xinh đẹp nhất. Ở đây thì người ta khuyến nghị: Tên controller phải bắt đầu bằng một danh từ Danh từ đó ở dạng số ít Theo sau đó là hậu tố “Controller” Tên Lớp trùng với tên file luôn nhé Ví dụ: Good 123class ArticleController extends Controller &#x2F;&#x2F;&#123; Bad 12class ArticlesController extends Controller &#123; 123class wp_articlesController extends Controller&#123; 123class Article extends Controller&#123; Bạn nên dùng Resource Controllers trừ khi có lý do cụ thể nào đó mà không thể làm như vậy Ví dụ: Good 12345678910class DomainController extends Controller&#123; public function index()&#123;&#125; // list domains public function create()&#123;&#125; // show create form public function store(Request $request)&#123; &#125; // handle the form POST public function show($id)&#123;&#125; // show a single domain public function edit($id)&#123;&#125; // show edit page public function update(Request $request, $id)&#123;&#125; // handle show edit page POST public function destroy($id)&#123;&#125; // delete a domain&#125; Bad 1234567class DomainController extends Controller&#123; public function list()&#123;&#125; // list domains public function create_or_save()&#123;&#125; // show create form then handle save public function show_edit($id)&#123;&#125; // show a single domain then show edit page public function delete($id)&#123;&#125; // delete a domain&#125; ModelsĐối với model thì cộng đồng khuyến nghị như sau: Chứ cái đầu tiên của class là chữ hoa Phải là danh từ dạng số ít Good 1234class Flight extends Model&#123; //&#125; Bad 12class Flights extends Model&#123; 12class flight extends Model&#123; Phương thức định nghĩa mối quan hệ (relationship methods) hasOne hoặc belongsTo phải là danh từ số ít Good 1234567class User extends Model&#123; public function phone() &#123; return $this-&gt;hasOne('App\\Phone'); &#125;&#125; Bad 1234567class User extends Model&#123; public function phones() &#123; return $this-&gt;hasOne('App\\Phone'); &#125;&#125; Các phương thức quan hệ khác (relationship methods) phải là dạng danh từ số nhiều Good 1234567class Post extends Model&#123; public function comments() &#123; return $this-&gt;hasMany('App\\Comment'); &#125;&#125; Bad 1234567class User extends Model&#123; public function comment() &#123; return $this-&gt;hasMany('App\\Comment'); &#125;&#125; Thuộc tính của model phải ở dạng snake_case Good 1$user-&gt;created_at Bad 1$user-&gt;createdAt Phương thức của model phải ở dạng camelCase Good 123456class User extends Model&#123; public function scopePopular($query) &#123; return $query-&gt;where('votes', '&gt;', 100); &#125; Bad 123456class User extends Model&#123; public function scope_popular($query) &#123; return $query-&gt;where('votes', '&gt;', 100); &#125; Functions Trong ưng dụng của chúng ta thì không thể thiểu các function do chúng ta tự viết ra nhằm trợ giúp một chức năng nào đó . Bạn nên tạo 1 file có tên helper.php Good 12project_folder/app/helper.phpproject_folder/app/Http/helper.php Bad 1project_folder/functions.php Bạn nên sử dụng autoloading của Composer để load các function của bạn Good 1234567// file composer.json...\"autoload\": &#123; \"files\": [ \"app/helpers.php\" ],... Bad 12345678// file app/Http/Controllers/HomeController.phpclass HomeController.php&#123; function index()&#123; require_once(app_path(\"helpers.php\")); &#125;&#125; Trước khi viết nõ hãy kiểm tra xem đã có đã tồn tại hay chưa băng cách Good 12345if (! function_exists('my_custom_helper')) &#123; function my_custom_helper($key, $default = null) &#123; // ... &#125;&#125; Bad 123function my_custom_helper($key, $default = null) &#123; // ...&#125; Khuyến nghị khác: Nếu function dài quá 25 dòng thì bạn nên tách nhỏ function đó thành những funtion nhỏ hơn. Mỗi function bạn nên viết Unit Test cho chúng để đảm bảo chúng chạy đúng Routes Router phải ở dạng số nhiều và các chữ cái đều là chữ thường . chỗ này mình cũng không biết giải thích như nào nhưng các bạn nhìn vào ví dụ nhé: Good 1Route::get('/users', 'UserController@index'); 1Route::resource('photos', 'PhotoController'); Bad 1Route::get('/user', 'UserController@index'); 1Route::get('/UsersList', 'UserController@index'); 1Route::resource('PHOTO', 'PhotoController'); Tên của router phải ở dạng snake_case Good 1Route::get('/user', 'UserController@active')-&gt;name('users.show_active'); Bad 1Route::get('/user', 'UserController@active')-&gt;name('users.show-active'); 1Route::get('/user', 'UserController@active')-&gt;name('show-active-users'); VariablesCái này hay gặp phải nhất này. Xem cộng đồng khuyến nghị gì về quy tắc đặt tên biến nhé ! Quy tắc chung của biến là ở dạng camelCase Good 1$articlesWithAuthor Bad 1$articles_with_author Tên của collection nên theo quy tắc Mô tả collection + danh từ sô nhiều Good 1$activeUsers = User::active()-&gt;get() Bad 123$users = User::active()-&gt;get()$user = User::active()-&gt;get()$User = User::active()-&gt;get() Tên 1 object nên theo quy tắc Mô tả collection + danh từ sô ít Good 1$activeUser = User::active()-&gt;first() Bad 1$users = User::active()-&gt;first() Views Mọi người rất hay lúng túng khi đặt tên cho view. thì tên view chúng ta nên đặt ở dạng snake_case Good 1show_filtered.blade.php Bad 1showFiltered.blade.php Gần đây cũng có khuyến nghị nên đặt tên view dạng kebab-case. bạn cũng có thể tham khảo cách này nhé! . Mình nghĩ cách này tốt hơn cách ở trên ! Good 1show-filtered.blade.php Bạn không nên sử lý logic code trong file view nhé mà hãy viết trong controller. trừ trường hợp bất khả kháng. ví dụ: Good 123456// $api_results is passed by controller&lt;ul&gt; @foreach($api_results as $result) &lt;li&gt;&#123;&#123; $result-&gt;name &#125;&#125;&lt;/li&gt; @endforeach&lt;/ul&gt; Bad 12345678@php $api_results = json_decode(file_get_contents(\"https://api.example.com\"));@endphp&lt;ul&gt; @foreach($api_results as $result) &lt;li&gt;&#123;&#123; $result-&gt;name &#125;&#125;&lt;/li&gt; @endforeach&lt;/ul&gt; Nếu đọc đến đây mà thấy mỏi mắt vì Good vs Bad quá thì clips lại mai đọc tiếp nhé !Database ConventionsTable and Fields Naming Tên Table phải là danh từ ở dạng số nhiều và phải dạng viết thường Good 12345class CreateFlightsTable extends Migration&#123; public function up() &#123; Schema::create('flights', function (Blueprint $table) &#123; Bad 12345class CreateFlightsTable extends Migration&#123; public function up() &#123; Schema::create('flight', function (Blueprint $table) &#123; 12345class CreateUsersTable extends Migration&#123; public function up() &#123; Schema::create('MyUsers', function (Blueprint $table) &#123; Tên bảng pivot phải dạng số ít của 2 model và được săp sếp theo alphabetical Good 123post_userarticle_userphoto_post Bad 123posts_usersuser_articlespost_photos Tên cột phải ở dạng snake_case và không lên có tên ở model Good 123usernametitlethumb_url Bad 1234UserName_titleThumbUrlpost_title Khóa ngoại phải ở dạng tên model + hậu tố _id Good 1user_id Bad 1234useridsiteidMemberidTransactionID Khóa chính phải là id. cái này hơi kỳ kỳ :joy::joy::joy:. dù gì đây cũng là khuyến nghị lên dùng Good 1id Bad 123IDpkidguid Database Alterations Tên file Migration phải theo pattern : yyyy_mm_dd_create_table Good 12019_06_06_164210_create_domains_table.php Bad 12019_06_06_164210_domains.php Tổng kết Bài viết cũng khá dài rồi. mặc dù còn rất nhiều recommend khác nhưng trên đây là nhưng cái các bạn hay dùng và hay gaejp nhất trong project của mình. hy vọng các bạn có thể tham khảo qua. và hãy comment xuống dưới recommend của bạn nhé Thân ái và quyết thắng :heart_eyes::heart_eyes::heart_eyes::heart_eyes::heart_eyes: Tham khảo: https://www.laravelbestpractices.com/","categories":[],"tags":[{"name":"laravel","slug":"laravel","permalink":"https://phamtuananh1996.github.io/tags/laravel/"}]},{"title":"Những câu hỏi JavaScript trình độ Advanced","slug":"javascript-quiz","date":"2022-06-30T09:02:40.000Z","updated":"2024-01-04T00:39:10.962Z","comments":true,"path":"2022/06/30/javascript-quiz/","link":"","permalink":"https://phamtuananh1996.github.io/2022/06/30/javascript-quiz/","excerpt":"","text":"1. Output là gì?12345678function sayHi() &#123; console.log(name); console.log(age); var name = \"Lydia\"; let age = 21;&#125;sayHi(); A: Lydia và undefined B: Lydia và ReferenceError C: ReferenceError và 21 D: undefined và ReferenceError Đáp án Đáp án: DTrong hàm chúng ta đã khai báo biến name với var. Điều đó có nghĩa là biến này sẽ được hoisted (một vùng nhớ sẽ được set up khi biến được khởi tạo) với giá trị mặc định là undefined, cho tới khi chúng ta thực sự định nghĩa biến đó. Trong hàm này, chúng ta chưa hề định nghĩa biến name tại dòng mà ta log ra, vậy nên giá trị mặc định của nó vẫn là undefined. Các biến được khai báo với keyword let (và const) cũng được hoisted nhưng không giống như var, chúng không được khởi tạo. Chúng ta sẽ không thể truy cập chúng cho tới khi chúng ta khai báo (khởi tạo) chúng. Người ta gọi đó là “temporal dead zone”. Khi ta truy cập đến một giá trị trước khi chúng được khai báo, JavaScript sẽ throws một ReferenceError. 2. Output sẽ là gì?1234567for (var i = 0; i &lt; 3; i++) &#123; setTimeout(() =&gt; console.log(i), 1);&#125;for (let i = 0; i &lt; 3; i++) &#123; setTimeout(() =&gt; console.log(i), 1);&#125; A: 0 1 2 and 0 1 2 B: 0 1 2 and 3 3 3 C: 3 3 3 and 0 1 2 Đáp án Đáp án: CBởi vì event queue trong JavaScript, hàm setTimeout callback sẽ được gọi sau khi vòng lặp được thực hiện. Bời vì biến i trong vòng lặp đầu tiên được khai báo với từ khóa var, nên nó sẽ là một biến global. Trong suốt vòng lặp, mỗi lần chúng ta tăng giá trị của i lên 1, sử dụng phép toán ++. Cho tới khi callback setTimeout được gọi, giá trị của i đã trở thành 3 rồi. Trong vòng lặp thứ 2, biến i được khai báo với từ khóa let, có nghĩa nó là một biến block-scoped (block là những gì được viết bên trong cặp ngoặc { }). Tại mỗi vòng lặp, i sẽ là một biến mới có một giá trị mới, và giá trị đó có scope là bên trong vòng lặp mà thôi. 3. Output sẽ là gì?12345678910const shape = &#123; radius: 10, diameter() &#123; return this.radius * 2; &#125;, perimeter: () =&gt; 2 * Math.PI * this.radius&#125;;shape.diameter();shape.perimeter(); A: 20 and 62.83185307179586 B: 20 and NaN C: 20 and 63 D: NaN and 63 Đáp án Đáp án: BChú ý rằng giá trị diameter là một hàm thông thường, còn perimeter là một arrow function. Không giống như hàm thông thường, với arrow function, biếnthis sẽ trỏ tới surrounding scope! Có nghĩa là khi chúng ta gọi perimeter, nó sẽ không được gọi bởi shape object, mà nó được gọi bởi object nào đó tại surrounding scope (ví dụ window chẳng hạn). Khi không có giá trị radius tại object đó, nó sẽ trả về undefined. 4. Output là gì?12+true;!\"Lydia\"; A: 1 and false B: false and NaN C: false and false Đáp án Đáp án: APhép toán cộng + sẽ convert một toán hạng sang dạng number. true là 1, và false is 0. Chuỗi &#39;Lydia&#39; là một truthy value. Điều chúng ta thật sự đang hỏi chính là “có phải một giá trị truthy là falsy?”. Rõ ràng câu trả lời là false rồi. 5. Cái nào đúng?12345678const bird = &#123; size: \"small\"&#125;;const mouse = &#123; name: \"Mickey\", small: true&#125;; A: mouse.bird.size không hợp lệ B: mouse[bird.size] không hợp lệ C: mouse[bird[&quot;size&quot;]] không hợp lệ D: Tất cả đều hợp lệ Đáp án Đáp án: ATrong JavaScript thì tất cả keys của các object đều là string (ngoại trừ khi nó là một Symbol). Dù chúng ta không viết chúng như một string, về cơ bản chúng sẽ luôn được chuyển sang dạng string. JavaScript thông dịch (hay unboxes) từng câu lệnh. Khi chúng ta sử dụng cặp dấu ngoặc [], nó sẽ tìm kiếm dấu mở ngoặc đầu tiên [, và sẽ tiếp tục tìm kiếm cho tới khi gặp dấu đóng ngoặc ]. Chỉ khi đó thì câu lệnh mới được thực thi. mouse[bird.size]: Giá trị đầu tiên bird.size là &quot;small&quot;. mouse[&quot;small&quot;] sẽ trả về true Tuy nhiên, khi chúng ta sử dụng dấu chấm ., điều trên không còn đúng nữa. mouse không hề có key nào tên là bird, có nghĩa mouse.bird sẽ là undefined. Sau đó chúng ta gọi size sử dụng chấm .: mouse.bird.size. Vì mouse.bird là undefined, lời gọi sẽ trở thành undefined.size. Đây là một lời gọi không hợp lệ, nó sẽ throw ra một lỗi kiểu như Cannot read property &quot;size&quot; of undefined. 6. Output là gì?123456let c = &#123; greeting: \"Hey!\" &#125;;let d;d = c;c.greeting = \"Hello\";console.log(d.greeting); A: Hello B: Hey C: undefined D: ReferenceError E: TypeError Đáp án Đáp án: ATrong JavaScript, tất cả các object sẽ được tham chiếu khi chúng được gán _bằng_wwwww một giá trị khác. Đầu tiên, giá trị c có giá trị là một object. Sau đó, chúng ta gán d tham chiếu tới object mà c trỏ tới. Khi ta thay đổi giá trị của object, tất cả các biến tham chiếu cũng đều thay đổi giá trị theo. 7. Output là gì?1234567let a = 3;let b = new Number(3);let c = 3;console.log(a == b);console.log(a === b);console.log(b === c); A: true false true B: false false true C: true false false D: false true true Đáp án Đáp án: Cnew Number() là một hàm built-in constructor. Mặc dù nó trông có vẻ giống như là một số, nhưng không phải: nó thực sự là một object với hàng tá những thông số khác nữa. Khi ta sử dụng phép so sánh ==, nó đơn thuần chỉ kiểm tra xem 2 biến có giá trị giống nhau. Chúng đều có giá trị là 3, vậy nên phép toán đầu trả về true. Tuy nhiên khi sử dụng phép so sánh ===, cả giá trị và kiểu đều phải giống nhau. Rõ ràng: new Number() không phải là một số, nó là một object. Cả 2 phép toán sau đều trả về false. 8. Output là gì?12345678910111213class Chameleon &#123; static colorChange(newColor) &#123; this.newColor = newColor; return this.newColor; &#125; constructor(&#123; newColor = \"green\" &#125; = &#123;&#125;) &#123; this.newColor = newColor; &#125;&#125;const freddie = new Chameleon(&#123; newColor: \"purple\" &#125;);freddie.colorChange(\"orange\"); A: orange B: purple C: green D: TypeError Đáp án Đáp án: DHàm colorChange là một hàm static (hàm tĩnh). Hàm static được thiết kế để chỉ để tồn tại ở mức class, và không thể truyền cho bất cứ instance con nào. Vì freddie là một instance con, hàm static này sẽ không được truyền xuống, và do đó không thể gọi được tại freddie instance: nó sẽ throw ra một TypeError. 9. Output là gì?123let greeting;greetign = &#123;&#125;; // Lỗi đánh máy!console.log(greetign); A: {} B: ReferenceError: greetign is not defined C: undefined Đáp án Đáp án: ANó sẽ log ra object greetign, bởi vì chúng ta vừa khởi tạo một global object! Khi chúng ta đánh máy nhầm greeting thành greetign, trình thông dịch của JS sẽ coi nó như là global.greetign = {} (hay window.greetign = {} nếu chạy trên browser). Để tránh điều này chúng ta có thể sử dụng &quot;use strict&quot;. Nó sẽ đảm bảo rẳng các biến đều phải được khai báo trước khi sử dụng. 10. Điều gì sẽ xảy ra khi chúng ta làm thế này?12345function bark() &#123; console.log(\"Woof!\");&#125;bark.animal = \"dog\"; A: Hoàn toàn không có vấn đề gì! B: SyntaxError. Bạn không thể thêm thuộc tính theo cách này. C: undefined D: ReferenceError Đáp án Đáp án: AĐiều này là có thể với Javascript, bởi vì function cũng chỉ là object mà thôi! (Mọi primitive types đều là object) Function là một object đặc biệt. Phần code mà bạn viết không phải là function thực tế đâu. Function ở đây chính là một object với các thuộc tính. Và các thuộc tính này có thể gọi được. 11. Output là gì?1234567891011function Person(firstName, lastName) &#123; this.firstName = firstName; this.lastName = lastName;&#125;const member = new Person(\"Lydia\", \"Hallie\");Person.getFullName = function() &#123; return `$&#123;this.firstName&#125; $&#123;this.lastName&#125;`;&#125;;console.log(member.getFullName()); A: TypeError B: SyntaxError C: Lydia Hallie D: undefined undefined Đáp án Đáp án: AChúng ta không thể add thêm một thuộc tính cho một constructor giống như một object thông thường. Nếu bạn muốn add thêm thuộc tính nào đó cho tất cả các object một lần, bạn phải dùng prototype. Trong trường hợp này cũng vậy. 123Person.prototype.getFullName = function() &#123; return `$&#123;this.firstName&#125; $&#123;this.lastName&#125;`;&#125;; khi này member.getFullName() sẽ hoạt động. Tại sao nên làm vậy? Hãy thử thêm chúng trực tiếp vào constructor xem sao. Không phải mọi instance Person đều cần phương thức này. Nó sẽ dẫn tới việc lãng phí rất nhiều bộ nhớ, khi chúng đều phải lưu trữ thuộc tính này cho mỗi instance. Thay vì thế, nếu ta chỉ thêm chúng vào prototype, ta sẽ chỉ tốn bộ nhớ một lần mà thôi, và mọi object khác đều có thể truy cập đến nó! 12. Output là gì?12345678910function Person(firstName, lastName) &#123; this.firstName = firstName; this.lastName = lastName;&#125;const lydia = new Person(\"Lydia\", \"Hallie\");const sarah = Person(\"Sarah\", \"Smith\");console.log(lydia);console.log(sarah); A: Person {firstName: &quot;Lydia&quot;, lastName: &quot;Hallie&quot;} và undefined B: Person {firstName: &quot;Lydia&quot;, lastName: &quot;Hallie&quot;} và Person {firstName: &quot;Sarah&quot;, lastName: &quot;Smith&quot;} C: Person {firstName: &quot;Lydia&quot;, lastName: &quot;Hallie&quot;} và {} D:Person {firstName: &quot;Lydia&quot;, lastName: &quot;Hallie&quot;} và ReferenceError Đáp án Đáp án: AVới sarah, chúng ta khai báo mà không có từ khóa new. Khi sử dụng new, nó sẽ trỏ đến một object mới mà ta vừa tạo ra. Tuy nhiên nếu ta không dùng new thì nó sẽ trỏ tới global object! Chúng ta cho rằng this.firstName là &quot;Sarah&quot; và this.lastName là &quot;Smith&quot;. Tuy nhiên sự thực là chúng ta đã định nghĩa global.firstName = &#39;Sarah&#39; và global.lastName = &#39;Smith&#39;. Bản thân biến sarah vẫn là undefined. 13. 3 giai đoạn của event propagation là gì? A: Target &gt; Capturing &gt; Bubbling B: Bubbling &gt; Target &gt; Capturing C: Target &gt; Bubbling &gt; Capturing D: Capturing &gt; Target &gt; Bubbling Đáp án Đáp án: DTrong capturing phase, event được truyền từ các phần tử cha cho tới phần tử target. Sau khi tới được phần tử target thì bubbling sẽ bắt đầu. 14. Tất cả các object đều có prototypes. A: đúng B: sai Đáp án Đáp án: BTất cả các object đều có prototypes, ngoại trừ base object. Object base có thể truy cập đến vài methods và properties, ví dụ như .toString. Đó là lý do tại sao chúng ta có thể sử dụng được các built-in methods trong JavaScript! Tất cả các phương thức đó đều có trong prototype. Mặc dù JavaScript không thể tìm thấy chúng trong object một cách trực tiếp, nó sẽ được truyền xuống thông qua prototype chain và xuống tới object, tại đây chúng ta có thể truy cập được nó. 15. Output là gì?12345function sum(a, b) &#123; return a + b;&#125;sum(1, \"2\"); A: NaN B: TypeError C: &quot;12&quot; D: 3 Đáp án Đáp án: CJavaScript là một ngôn ngữ dynamically typed: chúng ta không khai báo kiểu dữ liệu khi khai báo biến. Giá trị có thể bị tự động convert sang một kiểu dữ liệu khác mà ta không hề hay biết, điều này được gọi là implicit type coercion. Coercion có nghĩa là convert từ kiểu này sang kiểu khác. Trong ví dụ này, JavaScript sẽ convert số 1 sang dạng string. Mỗi khi ta cộng một số (1) với một string (&#39;2&#39;), số sẽ luôn được xem như là một string. Kết quả sẽ là một phép nối chuỗi giống như &quot;Hello&quot; + &quot;World&quot;, vậy nên &quot;1&quot; + &quot;2&quot; sẽ trả về là &quot;12&quot;. 16. Output là gì?1234let number = 0;console.log(number++);console.log(++number);console.log(number); A: 1 1 2 B: 1 2 2 C: 0 2 2 D: 0 1 2 Đáp án Đáp án: CKhi phép toán ++ nằm ở đằng sau (postfix): Trả về giá trị (trả về 0) Tăng giá trị lên (number giờ là 1) Khi phép toán ++ nằm ở đằng trước (prefix): Tăng giá trị lên (number giờ là 2) Trả về giá trị (trả về 2) Vậy kết quả là 0 2 2. 17. Output là gì?12345678910function getPersonInfo(one, two, three) &#123; console.log(one); console.log(two); console.log(three);&#125;const person = \"Lydia\";const age = 21;getPersonInfo`$&#123;person&#125; is $&#123;age&#125; years old`; A: &quot;Lydia&quot; 21 [&quot;&quot;, &quot; is &quot;, &quot; years old&quot;] B: [&quot;&quot;, &quot; is &quot;, &quot; years old&quot;] &quot;Lydia&quot; 21 C: &quot;Lydia&quot; [&quot;&quot;, &quot; is &quot;, &quot; years old&quot;] 21 Đáp án Đáp án: BNếu bạn dùng tagged template literals, giá trị của đối số đầu tiên luôn luôn là một mảng các string. Những đối số còn lại sẽ lấy giá trị từ biểu thức đưa vào! 18. Output là gì?1234567891011function checkAge(data) &#123; if (data === &#123; age: 18 &#125;) &#123; console.log(\"You are an adult!\"); &#125; else if (data == &#123; age: 18 &#125;) &#123; console.log(\"You are still an adult.\"); &#125; else &#123; console.log(`Hmm.. You don't have an age I guess`); &#125;&#125;checkAge(&#123; age: 18 &#125;); A: You are an adult! B: You are still an adult. C: Hmm.. You don&#39;t have an age I guess Đáp án Đáp án: CKhi test sự bằng nhau, các kiểu dữ liệu cơ bản sẽ so sánh giá trị của chúng, còn object thì so sánh tham chiếu. JavaScript sẽ kiểm tra xem các object đó có trỏ đến những vùng nhớ giống nhau hay không. Hai object chúng ta đang so sánh không có được điều đó: object đối số tham chiếu đến một vùng nhớ khác với object chúng ta dùng để kiểm tra sự bằng nhau. Đó là lý do tại sao cả { age: 18 } === { age: 18 } và { age: 18 } == { age: 18 } đều trả về false. 19. Output là gì?12345function getAge(...args) &#123; console.log(typeof args);&#125;getAge(21); A: &quot;number&quot; B: &quot;array&quot; C: &quot;object&quot; D: &quot;NaN&quot; Đáp án Đáp án: CSpread operator (...args.) sẽ trả về một mảng các đối số. Mảng thực chất là một object, vậy nên typeof args sẽ trả về &quot;object&quot;. 20. Output là gì?1234567function getAge() &#123; \"use strict\"; age = 21; console.log(age);&#125;getAge(); A: 21 B: undefined C: ReferenceError D: TypeError Đáp án Đáp án: CVới &quot;use strict&quot;, chúng ta sẽ đảm bảo được rằng ta sẽ không bao giờ khai báo biến global một cách vô ý. Tại đây chúng ta chưa khai báo biến age, và khi dùng &quot;use strict&quot;, nó sẽ throw ra một reference error. Nếu như không dùng &quot;use strict&quot;, nó sẽ vẫn hoạt động, vì thuộc tính age sẽ được thêm vào global object. 21. Giá trị của sum là gì?1const sum = eval(\"10*10+5\"); A: 105 B: &quot;105&quot; C: TypeError D: &quot;10*10+5&quot; Đáp án Đáp án: Aeval sẽ đánh giá đoạn code bên trong string. Nếu nó là một biểu thức, giống như trong trường hợp này, nó sẽ tính toán giá trị đó. Biểu thức là 10 * 10 + 5, kết quả sẽ là 105. 22. Biến cool_secret sẽ truy cập được trong bao lâu?1sessionStorage.setItem(\"cool_secret\", 123); A: Mãi mãi, dữ liệu sẽ không bao giờ mất. B: Khi user đóng tab lại. C: Khi user không chỉ là đóng tab, mà đóng browser lại. D: Khi user tắt máy tính đi. Đáp án Đáp án: BDữ liệu được lưu trữ trong sessionStorage sẽ được xóa khi đóng tab. Nếu chúng ta dùng localStorage, data sẽ được lưu trữ mãi mãi, trừ phi hàm localStorage.clear() được gọi. 23. Output là gì?1234var num = 8;var num = 10;console.log(num); A: 8 B: 10 C: SyntaxError D: ReferenceError Đáp án Đáp án: BVới từ khóa var bạn có thể khai báo bao nhiêu biến trùng tên tùy thích. Biến đó sẽ có giá trị là lần cuối khai báo. Bạn không thể làm điều tương tự với let hay const vì chúng là block-scoped. 24. Output là gì?1234567const obj = &#123; 1: \"a\", 2: \"b\", 3: \"c\" &#125;;const set = new Set([1, 2, 3, 4, 5]);obj.hasOwnProperty(\"1\");obj.hasOwnProperty(1);set.has(\"1\");set.has(1); A: false true false true B: false true true true C: true true false true D: true true true true Đáp án Đáp án: CTất cả các keys của object (ngoại trừ Symbols) về bản chất đều là string, dù chúng ta có viết chúng ra dạng string hay không. Nó là lý do tại sao obj.hasOwnProperty(&#39;1&#39;) cũng trả về true. Tuy nhiên điều đó không đúng với set. Không hề có &#39;1&#39; trong set của chúng ta: set.has(&#39;1&#39;) trả về false. Có số 1 trong set, nên set.has(1) trả về true. 25. Output là gì?12const obj = &#123; a: \"one\", b: \"two\", a: \"three\" &#125;;console.log(obj); A: { a: &quot;one&quot;, b: &quot;two&quot; } B: { b: &quot;two&quot;, a: &quot;three&quot; } C: { a: &quot;three&quot;, b: &quot;two&quot; } D: SyntaxError Đáp án Đáp án: CNếu chúng ta có 2 keys giống nhau, thì chúng sẽ bị replace. Nó sẽ vẫn nằm ở vị trí đầu tiên chúng được khai báo, nhưng giá trị thì sẽ là giá trị lần cuối. 26. Ngữ cảnh thực thi global của JavaScript tạo ra 2 thứ cho chúng ta: global object, và từ khóa “this”. A: đúng B: sai C: còn tùy Đáp án Đáp án: ANgữ cảnh thực thi cơ bản chính là ngữ cảnh global: nó là thứ mà chúng ta có thể truy cập được ở bất cứ đâu trong code. 27. Output là gì?1234for (let i = 1; i &lt; 5; i++) &#123; if (i === 3) continue; console.log(i);&#125; A: 1 2 B: 1 2 3 C: 1 2 4 D: 1 3 4 Đáp án Đáp án: CLệnh continue sẽ bỏ qua một vòng lặp nếu điều kiện của nó là true. 28. Output là gì?1234567String.prototype.giveLydiaPizza = () =&gt; &#123; return \"Just give Lydia pizza already!\";&#125;;const name = \"Lydia\";name.giveLydiaPizza(); A: &quot;Just give Lydia pizza already!&quot; B: TypeError: not a function C: SyntaxError D: undefined Đáp án Đáp án: AString là một built-in constructor, có nghĩa là chúng ta có thể thêm các thuộc tính vào đó. Ta vừa thêm vào đó một thuộc tính. Kiểu String cơ bản sẽ được convert sang dạng object bởi hàm string prototype. Vì thế nên tất cả các string object đều có thể truy cập đến hàm giveLydiaPizza này! 29. Output là gì?12345678const a = &#123;&#125;;const b = &#123; key: \"b\" &#125;;const c = &#123; key: \"c\" &#125;;a[b] = 123;a[c] = 456;console.log(a[b]); A: 123 B: 456 C: undefined D: ReferenceError Đáp án Đáp án: BObject keys sẽ tự động được convert sang dạng string. Chúng ta đang set một object như là một key cho object a, với giá trị là 123. Tuy nhiên khi ta string hóa một object, nó sẽ trở thành &quot;[object Object]&quot;. Nên tại đây phép gán này thực chất chính là a[&quot;object Object&quot;] = 123. Phép gán tiếp theo cũng giống hệt vậy. c là một object khác mà chúng ta đang string hóa nó. Theo đó, a[&quot;object Object&quot;] = 456. Cuối cùng khi gọi a[b], thực chất chính là gọi a[&quot;object Object&quot;]. Giá trị của nó là 456, nên trả về là 456. 30. Output là gì?1234567const foo = () =&gt; console.log(\"First\");const bar = () =&gt; setTimeout(() =&gt; console.log(\"Second\"));const baz = () =&gt; console.log(\"Third\");bar();foo();baz(); A: First Second Third B: First Third Second C: Second First Third D: Second Third First Đáp án Đáp án: BChúng ta có một hàm setTimeout được gọi đầu tiên. Nên, nó sẽ được log ra cuối cùng. Điều đó bởi vì trên browser, chúng ta không hề có runtime engine, đơn thuần chỉ có WebAPI. WebAPI cho chúng ta một hàm setTimeout, ta hãy ví dụ nó trên DOM. Sau khi callback được gửi tới WebAPI, bản thân hàm setTimeout (nhưng không phải callback nhé!) sẽ được đưa ra khỏi stack. Giờ đây, foo được gọi, và &quot;First&quot; được log ra. foo được đưa ra khỏi stack, và baz được gọi. &quot;Third&quot; được log ra. WebAPI không thể thêm thứ gì đó vào stack cho tới khi nó được sẵn sàng. Thay vào đó, nó đẩy callback function đến một nơi gọi là queue. Đó chính là nơi mà event loop làm việc. Một event loop sẽ quan sát stack và task queue. Nếu stack trở nên rỗng, nó sẽ lấy giá trị đầu tiên trong queue để đưa tiếp vào stack. bar được gọi, &quot;Second&quot; được log ra, và nó được đưa ra khỏi stack. 31. Giá trị của event.target là gì khi click button?1234567&lt;div onclick=\"console.log('first div')\"&gt; &lt;div onclick=\"console.log('second div')\"&gt; &lt;button onclick=\"console.log('button')\"&gt; Click! &lt;/button&gt; &lt;/div&gt;&lt;/div&gt; A: Outer div B: Inner div C: button D: Một mảng với toàn bộ các phần tử lồng nhau. Đáp án Đáp án: CPhần tử sâu nhất trong các phần tử lồng nhau sẽ là target của event. Bạn có thể ngăn việc đó lại bằng cách sử dụng event.stopPropagation 32. Khi bạn click vào đoạn văn, giá trị của output sẽ là gì?12345&lt;div onclick=\"console.log('div')\"&gt; &lt;p onclick=\"console.log('p')\"&gt; Click here! &lt;/p&gt;&lt;/div&gt; A: p div B: div p C: p D: div Đáp án Đáp án: ANếu ta click vào p, ta sẽ thấy hai log: p và div. Trong chuỗi event sẽ có 3 phases: capturing, target, và bubbling. Mặc định thì event handlers sẽ được thực hiện tại bubbling phase (trừ phi chúng ta khai báo useCapture là true). Chúng sẽ đi từ phần tử sâu nhất ra đến bên ngoài. 33. Output là gì?12345678const person = &#123; name: \"Lydia\" &#125;;function sayHi(age) &#123; console.log(`$&#123;this.name&#125; is $&#123;age&#125;`);&#125;sayHi.call(person, 21);sayHi.bind(person, 21); A: undefined is 21 Lydia is 21 B: function function C: Lydia is 21 Lydia is 21 D: Lydia is 21 function Đáp án Đáp án: DVới cả hai, chúng ta có thể đưa vào object để sử dụng từ khóa this. Tuy nhiên, .call có nghĩa là thực hiện ngay lập tức! .bind. trả về một bản copy của function, với context kèm theo! Nó sẽ không thực hiện ngay lập tức. 34. Output là gì?12345function sayHi() &#123; return (() =&gt; 0)();&#125;typeof sayHi(); A: &quot;object&quot; B: &quot;number&quot; C: &quot;function&quot; D: &quot;undefined&quot; Đáp án Đáp án: BsayHi function trả về giá trị của một hàm gọi ngay lập tức (immediately invoked function - IIFE). Function này trả về 0, kiểu dữ liệu &quot;number&quot;. FYI: chỉ có 7 kiểu dữ liệu built-in: null, undefined, boolean, number, string, object, symbol, and bigint. &quot;function&quot; không phải là một kiểu, mà là objects, kiểu dữ liệu là &quot;object&quot;. 35. Giá trị nào trong các giá trị dưới đây là falsy?1234560;new Number(0);(\"\");(\" \");new Boolean(false);undefined; A: 0, &#39;&#39;, undefined B: 0, new Number(0), &#39;&#39;, new Boolean(false), undefined C: 0, &#39;&#39;, new Boolean(false), undefined D: Tất cả đều là falsy Đáp án Đáp án: AChỉ có 6 giá trị falsy: undefined null NaN 0 &#39;&#39; (chuỗi rỗng) false Function constructors như new Number và new Boolean đều là truthy. 36. Output là gì?1console.log(typeof typeof 1); A: &quot;number&quot; B: &quot;string&quot; C: &quot;object&quot; D: &quot;undefined&quot; Đáp án Đáp án: Btypeof 1 trả về &quot;number&quot;.typeof &quot;number&quot; trả về &quot;string&quot; 37. Output là gì?123const numbers = [1, 2, 3];numbers[10] = 11;console.log(numbers); A: [1, 2, 3, 7 x null, 11] B: [1, 2, 3, 11] C: [1, 2, 3, 7 x empty, 11] D: SyntaxError Đáp án Đáp án: CMỗi khi chúng ta set một giá trị cho một phần tử trong mảng mà vượt quá độ dài của mảng, JavaScript sẽ tạo ra những “empty slots”. Chúng sẽ có giá trị là undefined, nhưng khi ghi ra thì chúng ta sẽ thấy dạng: [1, 2, 3, 7 x empty, 11] phụ thuộc vào nơi mà chúng ta chạy chúng (có thể khác nhau tùy môi trường browser, node, etc.) 38. Output là gì?1234567891011(() =&gt; &#123; let x, y; try &#123; throw new Error(); &#125; catch (x) &#123; (x = 1), (y = 2); console.log(x); &#125; console.log(x); console.log(y);&#125;)(); A: 1 undefined 2 B: undefined undefined undefined C: 1 1 2 D: 1 undefined undefined Đáp án Đáp án: Acatch block nhận về giá trị x. Đây không phải là giá trị x mà ta khai báo với từ khóa let ở bên trên. Đây là biến x trong block-scoped. Tiếp đó, chúng ta set giá trị của biến block-scoped này là 1, và đồng thời cũng set giá trị cho biến y. Giờ đây chúng ta log ra giá trị của biến block-scoped variable x, bằng 1. Bên ngoài catch block, x vẫn là undefined, và y là 2. Khi gọi console.log(x) bên ngoài catch block, nó sẽ trả về undefined, và y trả về 2. 39. Mọi thứ trong JavaScript đều là… A: primitives hoặc object B: function hoặc object C: hỏi mẹo khó đấy! chỉ object thôi D: number hoặc object Đáp án Đáp án: AJavaScript chỉ có primitive types và objects. Primitive types là boolean, null, undefined, bigint, number, string, and symbol. Điểm khác nhau giữa primitive và object chính là primitives không có thuộc tính hay phương thức; tuy nhiên, chúng ta để ý rằng là &#39;foo&#39;.toUpperCase() sẽ trả về &#39;FOO&#39; mà không phải là một TypeError. Đó là bởi vì khi chúng ta truy cập các thuộc tính hay phương thức của một primitive như là string, JavaScript sẽ ngầm bao nó bởi một wrapper class, ví dụ String, và sau đó sẽ hủy việc bao đó ngay sau khi thực hiện xong. Mọi primitives ngoại trừ null và undefine đều hoạt động giống như vậy. 40. Output là gì?123456[[0, 1], [2, 3]].reduce( (acc, cur) =&gt; &#123; return acc.concat(cur); &#125;, [1, 2]); A: [0, 1, 2, 3, 1, 2] B: [6, 1, 2] C: [1, 2, 0, 1, 2, 3] D: [1, 2, 6] Đáp án Đáp án: C[1, 2] là giá trị khởi tạo. Đây là giá trị chúng ta bắt đầu, và cũng là giá trị đầu tiên của acc. Tại vòng đầu tiên, acc là [1,2], và cur là [0, 1]. Ta nối chúng lại tạo ra [1, 2, 0, 1]. Tiếp tục, [1, 2, 0, 1] là acc và [2, 3] là cur. Ta nối chúng lại tạo ra [1, 2, 0, 1, 2, 3]. 41. Output là gì?123!!null;!!\"\";!!1; A: false true false B: false false true C: false true true D: true true false Đáp án Đáp án: Bnull là falsy. !null trả về true. !true trả về false. &quot;&quot; là falsy. !&quot;&quot; trả về true. !true trả về false. 1 là truthy. !1 trả về fa\u001bse. !false trả về true. 42. Hàm setInterval trả về cái gì?1setInterval(() =&gt; console.log(\"Hi\"), 1000); A: một id duy nhất B: số lượng milliseconds C: function truyền vào D: undefined Đáp án Đáp án: ANó trả về một id duy nhất. Id này dùng để clear interval sau này với hàm clearInterval(). 43. Giá trị trả về là gì?1[...\"Lydia\"]; A: [&quot;L&quot;, &quot;y&quot;, &quot;d&quot;, &quot;i&quot;, &quot;a&quot;] B: [&quot;Lydia&quot;] C: [[], &quot;Lydia&quot;] D: [[&quot;L&quot;, &quot;y&quot;, &quot;d&quot;, &quot;i&quot;, &quot;a&quot;]] Đáp án Đáp án: AString là một iterable. Thế nên spread operator sẽ map toàn bộ các ký tự trong chuỗi lại thành một mảng. 44. Output là gì?123456789function* generator(i) &#123; yield i; yield i * 2;&#125;const gen = generator(10);console.log(gen.next().value);console.log(gen.next().value); A: [0, 10], [10, 20] B: 20, 20 C: 10, 20 D: 0, 10 and 10, 20 Đáp án Đáp án: CMột hàm bình thường không thể bị dừng giữa chừng khi được gọi. Tuy nhiên một generator thì khác, nó có thể “dừng lại” được, và sau đó nó sẽ tiếp tục từ vị trí nó dừng lại. Mỗi khi một generator gặp một từ khóa yield, nó sẽ sinh ra giá trị ngay phía sau nó. Chú ý là generator không trả về giá trị, nó sinh ra giá trị. Đầu tiên, chúng ta khởi tạo generator với giá trị i là 10. Generator được gọi bằng cách sử dụng phương thức next(). Khi lần đầu gọi thì i vẫn là 10. Khi nó bắt gặp từ khóa yield: nó sẽ sinh ra giá trị i. Generator sẽ được “tạm dừng” tại đây, và ghi ra giá trị 10. Sau đó chung ta tiếp tục gọi generator bằng cách sử dụng tiếp phương thức next(). Nó sẽ bắt đầu từ vị trí nó tạm dừng lúc trước, khi i vẫn đang là 10. Và khi nó bắt gặp từ khóa yield, nó sẽ sinh ra giá trị i * 2. i là 10, nên nó sẽ sinh ra 10 * 2, tức 20. Vậy kết quả cuối cùng là 10, 20. 45. Giá trị trả về là gì?123456789const firstPromise = new Promise((res, rej) =&gt; &#123; setTimeout(res, 500, \"one\");&#125;);const secondPromise = new Promise((res, rej) =&gt; &#123; setTimeout(res, 100, \"two\");&#125;);Promise.race([firstPromise, secondPromise]).then(res =&gt; console.log(res)); A: &quot;one&quot; B: &quot;two&quot; C: &quot;two&quot; &quot;one&quot; D: &quot;one&quot; &quot;two&quot; Đáp án Đáp án: BKhi chúng ta đưa các promise vào trong một hàm Promise.race, nó sẽ chỉ resolves hay rejects promise đầu tiên được resolves/rejects. Với hàm setTimeout, chúng ta đưa vào một khoảng thời gian: 500 mili giây cho promise đầu tiên (firstPromise), và 100 mili giây cho promise thứ hai (secondPromise). Nó có nghĩa là secondPromise sẽ hoàn thành trước và trả về giá trị &#39;two&#39;. res khi này sẽ nhận giá trị &#39;two&#39; và được in ra console. 46. Output là gì?12345let person = &#123; name: \"Lydia\" &#125;;const members = [person];person = null;console.log(members); A: null B: [null] C: [{}] D: [{ name: &quot;Lydia&quot; }] Đáp án Đáp án: DĐầu tiên, chúng ta khai báo một biến person là một object có thuộc tính name. Sau đó chúng ta khai báo một biến members. Ta set giá trị đầu tiên của mảng là giá trị của biến person. Khi sử dụng gán bằng, object sẽ được tham chiếu tới object mà nó được gán. Khi ta gán tham chiếu từ một biến sang biến khác, ta tạo ra một bản sao của tham chiếu đó. (nên nhớ rằng đó vẫn là 2 tham chiếu hoàn toàn khác nhau!) Sau đó ta set giá trị của person bằng null. Chúng ta chỉ đơn thuần là thay đổi giá trị của biến person mà thôi, chứ không phải giá trị của phần tử đầu tiên ở trong mảng, vì chúng ta có một tham chiếu khác đến object đó. Phần tử đầu tiên của mảng members vẫn giữ tham chiêu đến object gốc. Do vậy, khi chúng ta in ra mảng members, phần tử đầu tiên sẽ vẫn in ra giá trị của objet gốc. 47. Output là gì?12345678const person = &#123; name: \"Lydia\", age: 21&#125;;for (const item in person) &#123; console.log(item);&#125; A: { name: &quot;Lydia&quot; }, { age: 21 } B: &quot;name&quot;, &quot;age&quot; C: &quot;Lydia&quot;, 21 D: [&quot;name&quot;, &quot;Lydia&quot;], [&quot;age&quot;, 21] Đáp án Đáp án: BVới vòng lặp for-in chúng ta sẽ lặp qua tất cả các keys của object, trong trường hợp này là name và age. Về cơ bản, object keys là string (nếu nó không phải là Symbol). Tại mỗi vòng lặp, giá trị của item chính là giá trị của key hiện tại trong vòng lặp. Đầu tiên, item là name, và được in ra. Vòng lặp sau, item là age, và được in ra. 48. Output là gì?1console.log(3 + 4 + \"5\"); A: &quot;345&quot; B: &quot;75&quot; C: 12 D: &quot;12&quot; Đáp án Đáp án: BCompiler sẽ đánh giá biểu thức dựa trên độ ưu tiên giữa các phép toán trong biểu thức đó, từ đó nó sẽ tính toán hoặc trái-sang-phải hoặc phải-qua-trái. Ở đây chúng ta chỉ có một phép toán mà thôi, phép cộng: +. Với phép cộng, tính toán sẽ là từ trái-qua-phải. Giá trị 3 + 4 được tính toán trước. Kết quả là 7. 7 + &#39;5&#39; sẽ ra kết quả là &quot;75&quot; bởi xuất hiện ép kiểu tại đây. JavaScript sẽ convert 7 sang dạng string, bạn có thể xem thêm tại câu hỏi 15. Và sau đó 2 string sẽ được nối lại với nhau bởi phép toán cộng +. Kết quả &quot;7&quot; + &quot;5&quot; sẽ là &quot;75&quot;. 49. Giá trị của num là gì?1const num = parseInt(\"7*6\", 10); A: 42 B: &quot;42&quot; C: 7 D: NaN Đáp án Đáp án: CChỉ có số đầu tiên trong chuỗi kí tự được trả về. Hệ cơ số là hệ thập phân (đối số thứ 2 trong hàm chính là cơ số: hệ thập phân, hệ 16, hệ 8, hệ nhị phân, vv.), Hàm parseInt sẽ kiểm tra xem các ký tự trong chuỗi có đảm bảo hợp lệ hay không. Một khi chúng tìm ra ký tự không phải là ký tự hợp lệ trong hệ cơ số, nó dừng lại và bỏ qua các ký tự phía sau. * không phải là một số. Vậy nên nó sẽ chỉ convert ký tự &quot;7&quot; sang hệ thập phân là 7. num sẽ có giá trị là 7. 50. Output là gì?1234[1, 2, 3].map(num =&gt; &#123; if (typeof num === \"number\") return; return num * 2;&#125;); A: [] B: [null, null, null] C: [undefined, undefined, undefined] D: [ 3 x empty ] Đáp án Đáp án: CKhi ta tiến hành map một mảng, giá trị của num sẽ chính là giá trị của phần tử hiện giờ trong vòng lặp. Trong trường hợp này, các phần tử đều là dạng số, tức là typeof num === &quot;number&quot; sẽ là true. Hàm map sẽ tạo ra một mảng mởi từ các giá trị của mảng ban đầu. Tuy nhiên chúng ta không hề trả về giá trị nào cả. Khi đó, hàm số sẽ mặc định trả về undefined. Do đó qua mỗi vòng lặp, ta lại nhận được thêm một giá trị undefined nữa. 51. Output là gì?1234567891011function getInfo(member, year) &#123; member.name = \"Lydia\"; year = \"1998\";&#125;const person = &#123; name: \"Sarah\" &#125;;const birthYear = \"1997\";getInfo(person, birthYear);console.log(person, birthYear); A: { name: &quot;Lydia&quot; }, &quot;1997&quot; B: { name: &quot;Sarah&quot; }, &quot;1998&quot; C: { name: &quot;Lydia&quot; }, &quot;1998&quot; D: { name: &quot;Sarah&quot; }, &quot;1997&quot; Đáp án Đáp án: AĐối số sẽ được đưa vào hàm dạng tham trị, trừ phi nó là object, khi đó nó sẽ được đưa vào hàm dạng tham chiếu. birthYear là dạng giá trị, vì nó là string chứ không phải object. Khi chúng ta đưa vào dạng giá trị, một bản sao của giá trị đó sẽ được tạo ra (xem thêm câu 46). birthYear trỏ đến giá trị là &quot;1997&quot;. Đối số year cũng sẽ rỏ đến giá trị &quot;1997&quot;, nhưng giá trị này chỉ là một bản sao của giá trị mà birthYear trỏ tới mà thôi, hai giá trị đó hoàn toàn khác nhau. Do đó khi ta thay đổi giá trị year bằng &quot;1998&quot;, chúng ta chỉ thay đổi giá trị của year mà thôi. birthYear sẽ vẫn giữ giá trị là &quot;1997&quot;. person là một object. Biến member có một tham chiếu tới cùng object mà person trỏ tới. Khi chúng ta thay đổi một thuộc tính của object mà member trỏ tới, giá trị của person cũng sẽ tự động thay đổi theo, vì chúng có chung tham chiếu. name của person khi này sẽ có giá trị mới là &quot;Lydia&quot;. 52. Output là gì?1234567891011121314function greeting() &#123; throw \"Hello world!\";&#125;function sayHi() &#123; try &#123; const data = greeting(); console.log(\"It worked!\", data); &#125; catch (e) &#123; console.log(\"Oh no an error!\", e); &#125;&#125;sayHi(); A: &quot;It worked! Hello world!&quot; B: &quot;Oh no an error: undefined C: SyntaxError: can only throw Error objects D: &quot;Oh no an error: Hello world! Đáp án Đáp án: DVới lệnh throw, chúng ta có thể tạo ra các errors tùy ý. Với câu lệnh đó, chúng ta có thể throw các exception. Một exeption có thể là một chuỗi, một số, một boolean hoặc một object. Trong trường hợp này thì nó là chuỗi &#39;Hello world&#39;. Với lệnh catch chúng ta có thể xử lý những exeption được throw ra khi thực hiện try. Một exeption đã được throw ra: chuỗi &#39;Hello world&#39;. e chính là chuỗi đó và chúng ta sẽ in ra. Kết quả là &#39;Oh an error: Hello world&#39;. 53. Output là gì?1234567function Car() &#123; this.make = \"Lamborghini\"; return &#123; make: \"Maserati\" &#125;;&#125;const myCar = new Car();console.log(myCar.make); A: &quot;Lamborghini&quot; B: &quot;Maserati&quot; C: ReferenceError D: TypeError Đáp án Đáp án: BKhi chúng ta trả về một thuộc tính, giá trị của thuộc tính bằng với giá trị đã được trả về bởi lệnh return, chứ không phải giá trị được set trong constructor. Chúng ta trả về giá trị là &quot;Maserati&quot;, do đó myCar.make sẽ là &quot;Maserati&quot;. 54. Output là gì?123456(() =&gt; &#123; let x = (y = 10);&#125;)();console.log(typeof x);console.log(typeof y); A: &quot;undefined&quot;, &quot;number&quot; B: &quot;number&quot;, &quot;number&quot; C: &quot;object&quot;, &quot;number&quot; D: &quot;number&quot;, &quot;undefined&quot; Đáp án Đáp án: Alet x = y = 10; chính là cách viết ngắn gọn của: 12y = 10;let x = y; Khi ta set y bằng 10, thực tế chúng ta đã sử dụng biến global y (window nếu là trên browser, global nếu là môi trường Node).Trên browser, window.y sẽ là 10. Sau đó, chúng ta khai báo giá trị của x với giá trị của y, tức 10. Tuy nhiên khi ta khai báo với từ khóa let biến x sẽ chỉ tồn tại trong block scoped; hay trong trường hợp này là hàm thực hiện ngay lập tức (immediately-invoked function - IIFE). Khi ta sử dụng phép toán typeof, x hoàn toàn chưa được định nghĩa: vì x lúc này nằm bên ngoài block nó được định nghĩa lúc trước. Nghĩa là x là undefined. Do đó console.log(typeof x) trả về &quot;undefined&quot;. Tuy nhiên với y thì khác, ta đã có giá trị của y khi set y bằng 10. Giá trị đó có thể truy cập được từ bất kì đâu bởi chúng là biến global. y được định nghĩa với kiểu là &quot;number&quot;. Do đó console.log(typeof y) trả về &quot;number&quot;. 55. Output là gì?1234567891011121314151617class Dog &#123; constructor(name) &#123; this.name = name; &#125;&#125;Dog.prototype.bark = function() &#123; console.log(`Woof I am $&#123;this.name&#125;`);&#125;;const pet = new Dog(\"Mara\");pet.bark();delete Dog.prototype.bark;pet.bark(); A: &quot;Woof I am Mara&quot;, TypeError B: &quot;Woof I am Mara&quot;,&quot;Woof I am Mara&quot; C: &quot;Woof I am Mara&quot;, undefined D: TypeError, TypeError Đáp án Đáp án: AChúng ta có thể xóa các thuộc tính khỏe object bằng từ khóa delete, kể cả với prototype. Khi chúng ta xóa một thuộc tính trên prototype, nó sẽ bị vô hiệu hóa hoàn toàn trong chuỗi prototype. Trong trường hợp này, hàm bark sẽ bị vô hiệu hóa ngay sau khi chúng ta thực hiện hàm xóa delete Dog.prototype.bark, tất nhiên ta vẫn có thể truy cập vào nó nhưng giá trị sẽ là undefined. Khi chúng ta chạy một thứ không phải là hàm, nó sẽ bắn ra một TypeError. Trong trường hợp này là TypeError: pet.bark is not a function, vì bản thân thuộc tính pet.bark là undefined. 56. Output là gì?123const set = new Set([1, 1, 2, 3, 4]);console.log(set); A: [1, 1, 2, 3, 4] B: [1, 2, 3, 4] C: {1, 1, 2, 3, 4} D: {1, 2, 3, 4} Đáp án Đáp án: DSet là một tập hơp các giá trị không trùng nhau. Chúng ta đưa đầu vào là một mảng [1, 1, 2, 3, 4] với giá trị 1 bị trùng. Giá trị trùng đó sẽ bị loại bỏ. Kết quả là {1, 2, 3, 4}. 57. Output là gì?123// counter.jslet counter = 10;export default counter; 123456// index.jsimport myCounter from \"./counter\";myCounter += 1;console.log(myCounter); A: 10 B: 11 C: Error D: NaN Đáp án Đáp án: CMột module khi được import sẽ là read-only: chúng ta sẽ không thể chỉnh sửa module đó, chỉ có bản thân module đó có thể chỉnh sửa giá trị của nó mà thôi. Khi ta thay đổi giá trị cuả myCounter, nó sẽ throw ra một lỗi: myCounter là read-only và không thể thay đổi. 58. Output là gì?12345const name = \"Lydia\";age = 21;console.log(delete name);console.log(delete age); A: false, true B: &quot;Lydia&quot;, 21 C: true, true D: undefined, undefined Đáp án Đáp án: APhép toán delete sẽ trả về một giá trị boolean: true nếu xóa thành công, false nếu thất bại. Tuy nhiên, nếu biến được khai báo với các từ khóa var, const hay let thì nó sẽ không thể bị xóa bởi phép toán delete. Biến name được khai báo với từ khóa const, nên nó sẽ không thể bị xóa và trả về false. Khi ta set age bằng 21, thực tế là ta đang sử dụng biến global age. Ta có thể xóa sử dụng phép toán delete, khi này delete age trả về true. 59. Output là gì?1234const numbers = [1, 2, 3, 4, 5];const [y] = numbers;console.log(y); A: [[1, 2, 3, 4, 5]] B: [1, 2, 3, 4, 5] C: 1 D: [1] Đáp án Đáp án: CChúng ta có thể unpack các giá trị từ mảng hoặc thuộc tính từ objects bằng phương pháp destructuring. Ví dụ: 1[a, b] = [1, 2]; Giá trị của a sẽ là 1, b sẽ là 2. Thực tế, câu hỏi của chúng ta đơn giản là: 1[y] = [1, 2, 3, 4, 5]; Có nghĩa là y chính là giá trị đầu tiên trong mảng, tức số 1. Do đó khi ta in ra y thì sẽ là1. 60. Output là gì?1234const user = &#123; name: \"Lydia\", age: 21 &#125;;const admin = &#123; admin: true, ...user &#125;;console.log(admin); A: { admin: true, user: { name: &quot;Lydia&quot;, age: 21 } } B: { admin: true, name: &quot;Lydia&quot;, age: 21 } C: { admin: true, user: [&quot;Lydia&quot;, 21] } D: { admin: true } Đáp án Đáp án: BTa có thể kết hợp 2 object sử dụng phép toán spread operator .... Nó cho phép ta tạo ra bản sao của từng cặp key/values trong từng object và nối chúng lại với nhau thành một object mới. Trong trường hợp này chúng ta tạo ra các bản sao của các cặp key/value của object user object, và nối chúng vào object admin. admin object khi này sẽ trở thành { admin: true, name: &quot;Lydia&quot;, age: 21 }. 61. Output là gì?123456const person = &#123; name: \"Lydia\" &#125;;Object.defineProperty(person, \"age\", &#123; value: 21 &#125;);console.log(person);console.log(Object.keys(person)); A: { name: &quot;Lydia&quot;, age: 21 }, [&quot;name&quot;, &quot;age&quot;] B: { name: &quot;Lydia&quot;, age: 21 }, [&quot;name&quot;] C: { name: &quot;Lydia&quot;}, [&quot;name&quot;, &quot;age&quot;] D: { name: &quot;Lydia&quot;}, [&quot;age&quot;] Đáp án Đáp án: BVới phương thức defineProperty, chúng ta có thể thêm các thuộc tính mới, cũng như sửa các thuộc tính sẵn có của object. Khi chúng ta thêm thuộc tính vào object bằng defineProperty, chúng sẽ mặc định là thuộc tính not enumerable. Phương thức Object.keys sẽ trả về tất cả các thuộc tính enumerable của object, trong trường hợp này thì chỉ có &quot;name&quot; mà thôi. Thêm nữa, các thuộc tính được thêm bởi defineProperty là mặc định không thể thay đổi được. Tất nhiên ta có thể override các điều đó bằng các thuộc tính như writable, configurable và enumerable. Tức là defineProperty là một cách rất mềm dẻo để tạo ra và điều chỉnh thuộc tính của object. 62. Output là gì?12345678const settings = &#123; username: \"lydiahallie\", level: 19, health: 90&#125;;const data = JSON.stringify(settings, [\"level\", \"health\"]);console.log(data); A: &quot;{&quot;level&quot;:19, &quot;health&quot;:90}&quot; B: &quot;{&quot;username&quot;: &quot;lydiahallie&quot;}&quot; C: &quot;[&quot;level&quot;, &quot;health&quot;]&quot; D: &quot;{&quot;username&quot;: &quot;lydiahallie&quot;, &quot;level&quot;:19, &quot;health&quot;:90}&quot; Đáp án Đáp án: AĐối số thứ hai của JSON.stringify là replacer. Replacer Có thể là một hàm hoặc một mảng, nó sẽ quy định xem giá trị nào sẽ được chuỗi hóa ra sao. Nếu replacer là một mảng, chỉ có các thuộc tính có tên trong mảng được convert thành chuỗi JSON. Trong trường hợp này, chỉ có các thuộc tính &quot;level&quot; và &quot;health&quot; được đưa vào, &quot;username&quot; bị loại bỏ. data giờ sẽ là &quot;{&quot;level&quot;:19, &quot;health&quot;:90}&quot;. Nếu replacer là function, hàm này sẽ được gọi trên từng thuộc tính của object được chuỗi hóa. Giá trị trả về sẽ là giá trị được đưa vào chuỗi JSON. Nếu trả về undefined, thuộc tính này sẽ bị loại bỏ khỏi chuỗi. 63. Output là gì?12345678910let num = 10;const increaseNumber = () =&gt; num++;const increasePassedNumber = number =&gt; number++;const num1 = increaseNumber();const num2 = increasePassedNumber(num1);console.log(num1);console.log(num2); A: 10, 10 B: 10, 11 C: 11, 11 D: 11, 12 Đáp án Đáp án: APhép toán ++ sẽ trả về trước giá trị của toán hạng, sau đó tăng giá trị của toán hạng lên. Giá trị của num1 là 10, vì increaseNumber sẽ trả về giá trị của num, đang là 10, và sau đó mới tăng giá trị của num lên. num2 cũng là 10, vì chúng ta đưa num1 vào increasePassedNumber. number bằng 10(tức giá trị của num1). Cũng giống như trên, phép toán ++ sẽ trả về trước giá trị của toán hạng, sau đó tăng giá trị của toán hạng lên. Giá trị của number là 10, do đó num2 cũng sẽ là 10. 64. Output là gì?12345678910const value = &#123; number: 10 &#125;;const multiply = (x = &#123; ...value &#125;) =&gt; &#123; console.log((x.number *= 2));&#125;;multiply();multiply();multiply(value);multiply(value); A: 20, 40, 80, 160 B: 20, 40, 20, 40 C: 20, 20, 20, 40 D: NaN, NaN, 20, 40 Đáp án Đáp án: CTrong ES6 thì chúng ta có thể khởi tạo tham số với giá trị mặc định. Giá trị của tham số sẽ là giá trị mặc định nếu ta không truyền gì vào hàm, hoặc khi giá trị truyền vào là &quot;undefined&quot;. Trong trường hợp này, ta dùng spread operator (toán tử mở rộng) để biến value thành một object mới, do đó x sẽ có giá trị mặc định là { number: 10 }. Chú ý một điều là đối số sẽ được xét giá trị tại call time! Có nghĩa là mỗi khi chúng ta gọi hàm, một object mới sẽ được tạo ra. Chúng ta gọi hàm multiply hai lần mà không truyền vào đối số nào cả: x sẽ nhận giá trị mặc định { number: 10 }. Sau đó chúng ta sẽ ghi ra giá trị là 20. Lần gọi thứ ba chúng ta truyền vào một đối số: chính là value. Toán tử *= chính là cách viết gọn của x.number = x.number * 2: chúng ta thay đổi giá trị của x.number, và ghi ra giá trị 20. Tại lần gọi thứ tư, chúng ta truyền vào value một lần nữa. x.number trước đó đã bị thay đổi thành 20, nên x.number *= 2 sẽ ghi ra 40. 65. Output là gì?1[1, 2, 3, 4].reduce((x, y) =&gt; console.log(x, y)); A: 1 2 and 3 3 and 6 4 B: 1 2 and 2 3 and 3 4 C: 1 undefined and 2 undefined and 3 undefined and 4 undefined D: 1 2 and undefined 3 and undefined 4 Đáp án Đáp án: DĐối số đầu tiên của hàm reduce chính là accumulator (tổng tích lũy), trong trường hợp này là x. Đối số thứ 2 chính là giá trị hiện tại, tức y. Với hàm reduce, ta sẽ gọi callback trên mỗi phần tử của mảng, cứ vậy cho tới khi ra đến một giá trị cuối cùng. Trong trường hợp này, chúng ta không trả về bất cứ giá trị nào cả, mà đơn thuần chỉ là ghi ra giá trị của tổng tích lũy và giá trị hiện tại mà thôi. Giá trị của tổng tích lũy chính là giá trị được hàm callback trả về tại vòng lặp trước đó. Nếu ta không đặt giá trị khởi tạo cho đối số trong hàm reduce, thì tổng tích lũy sẽ chính bằng giá trị đầu tiên tại lời gọi đầu tiên. Trong lời gọi đầu tiên, tổng tích lũy (x) là 1, và giá trị hiện tại (y) là 2. Chúng ta không trả về giá trị cho hàm callback, mà đơn thuần chỉ ghi chúng ta, vậy nên 1 và 2 được ghi ra. Nếu ta không trả về giá trị trong một function, thì nó sẽ mặc định trả về là undefined. Do đó trong lời gọi tiếp theo tổng tích lũy sẽ là undefined, và giá trị hiện tại là 3. undefined và 3 sẽ được ghi ra. Tiếp tục như vậy, trong lời gọi thứ tư thì tổng tích lũy sẽ vẫn là undefined, giá trị hiện tại là 4. undefined và 4 sẽ được ghi ra. 66. Với cách nào chúng ta có thể kế thừa Dog class?12345678910111213141516171819202122232425262728class Dog &#123; constructor(name) &#123; this.name = name; &#125;&#125;;class Labrador extends Dog &#123; // 1 constructor(name, size) &#123; this.size = size; &#125; // 2 constructor(name, size) &#123; super(name); this.size = size; &#125; // 3 constructor(size) &#123; super(name); this.size = size; &#125; // 4 constructor(name, size) &#123; this.name = name; this.size = size; &#125;&#125;; A: 1 B: 2 C: 3 D: 4 Đáp án Đáp án: BTrong class dẫn xuất, ta không thể truy cập từ khóa this trước khi gọi super. Nếu bạn chạy thử, nó sẽ throw ra một ReferenceError, do đó 1 và 4 sẽ throw ra reference error. Với việc gọi super, chúng ta đã gọi hàm constructor của class cha với tham số truyền vào. Trong trường hợp này, class cha nhận name làm đối số trong constructor, do đó chúng cần đưa name vào hàm super. Labrador class nhận vào hai đối số, name vì nó kế thừa Dog, và size - một thuộc tính của Labrador class. Cả hai đều cần thiết để đưa vào trong constructor của class Labrador, do đó cách khởi tạo đúng là 2. 67. Output là gì?12345678// index.jsconsole.log('running index.js');import &#123; sum &#125; from './sum.js';console.log(sum(1, 2));// sum.jsconsole.log('running sum.js');export const sum = (a, b) =&gt; a + b; A: running index.js, running sum.js, 3 B: running sum.js, running index.js, 3 C: running sum.js, 3, running index.js D: running index.js, undefined, running sum.js Đáp án Đáp án: BVới import, tất cả các module import vào đều sẽ được pre-parsed (đánh giá trước). Có nghĩa là những module được import vào sẽ được chạy trước, còn code trong file sẽ chạy sau. Đó chính là điều khác biệt giữa require() trong CommonJS và import! Với require(), ta có thể load các dependencies tại bất cứ khi nào ta cần. Nếu ta sử dụng require thay thế cho import thì running index.js, running sum.js, 3 sẽ được ghi ra. 68. Output là gì?123console.log(Number(2) === Number(2))console.log(Boolean(false) === Boolean(false))console.log(Symbol('foo') === Symbol('foo'))**** A: true, true, false B: false, true, false C: true, false, true D: true, true, true Đáp án Đáp án: AMỗi Symbol là một thứ hoàn toàn khác biệt. Giá trị truyền vào làm đối số trong Symbol chỉ đơn thuần là phần giải thích cho Symbol đó mà thôi, và nó không liên quan gì tới giá trị của Symbol đó cả. Chúng ta kiểm tra tính bằng nhau của hai Symbol hoàn toàn khác biệt: Symbol(&#39;foo&#39;) thứ nhất, và Symbol(&#39;foo&#39;) thứ hai. Mỗi giá trị đều là riêng biệt và duy nhất, nên Symbol(&#39;foo&#39;) === Symbol(&#39;foo&#39;) sẽ trả về false. 69. Output là gì?123const name = \"Lydia Hallie\"console.log(name.padStart(13))console.log(name.padStart(2)) A: &quot;Lydia Hallie&quot;, &quot;Lydia Hallie&quot; B: &quot; Lydia Hallie&quot;, &quot; Lydia Hallie&quot; (&quot;[13x whitespace]Lydia Hallie&quot;, &quot;[2x whitespace]Lydia Hallie&quot;) C: &quot; Lydia Hallie&quot;, &quot;Lydia Hallie&quot; (&quot;[1x whitespace]Lydia Hallie&quot;, &quot;Lydia Hallie&quot;) D: &quot;Lydia Hallie&quot;, &quot;Lyd&quot;, Đáp án Đáp án: CVới hàm padStart chúng ta có thể thêm vào khoảng trắng đằng trước mỗi chuỗi. Giá trị đưa vào trong hàm là tổng độ dài của chuỗi sau khi thêm vào khoảng trắng. Chuỗi &quot;Lydia Hallie&quot; có độ dài là 12 nên name.padStart(13) sẽ thêm vào một khoảng trắng đằng trước chuỗi. Nếu đối số truyền vào cho hàm padStart nhỏ hơn độ dài của chuỗi, không có khoảng trắng nào được thêm vào. 70. Output là gì?1console.log(\"🥑\" + \"💻\"); A: &quot;🥑💻&quot; B: 257548 C: A string containing their code points D: Error Đáp án Đáp án: AVới phép toán +, ta có thể nối các xâu chuỗi. Trong trường hợp này, ta nối chuỗi &quot;🥑&quot; với chuỗi &quot;💻&quot;, kết quả tạo ra &quot;🥑💻&quot;. 71. Làm thế nào có thể ghi ra giá trị giống như trong comment khi console.log?1234567891011function* startGame() &#123; const answer = yield \"Do you love JavaScript?\"; if (answer !== \"Yes\") &#123; return \"Oh wow... Guess we're gone here\"; &#125; return \"JavaScript loves you back ❤️\";&#125;const game = startGame();console.log(/* 1 */); // Do you love JavaScript?console.log(/* 2 */); // JavaScript loves you back ❤️ A: game.next(&quot;Yes&quot;).value and game.next().value B: game.next.value(&quot;Yes&quot;) and game.next.value() C: game.next().value and game.next(&quot;Yes&quot;).value D: game.next.value() and game.next.value(&quot;Yes&quot;) Đáp án Đáp án: CMột generator sẽ “tạm dừng” khi nhìn thấy từ khóa yield. Đầu tiên ra sẽ đưa ra chuỗi “Do you love JavaScript?”, bằng cách gọi game.next().value. Chương trình sẽ chạy từng dòng, cho tới khi nó tìm thấy từ khóa yield. Có một từ khóa yield tại dòng đầu tiên của hàm: chương trình sẽ dừng tại đâ! Điều đó có nghĩa là biến answer chưa hề được định nghĩa! Khi ta gọi game.next(&quot;Yes&quot;).value, yield trước đó sẽ được thay thế bởi giá trị được truyền vào hàm next(), trong trường hợp này là&quot;Yes&quot;. Theo đó giá trị của biến answer giờ sẽ là &quot;Yes&quot;. Điều kiện if sẽ trả về false, và JavaScript loves you back ❤️ sẽ được ghi ra. 72. Output là gì?1console.log(String.raw`Hello\\nworld`); A: Hello world! B: Hello &nbsp; &nbsp; &nbsp;world C: Hello\\nworld D: Hello\\n &nbsp; &nbsp; &nbsp;world Đáp án Đáp án: CString.raw trả về chuỗi nguyên bản, các ký tự (\\n, \\v, \\t etc.) sẽ vẫn là nguyên bản và không biến thành xuống dòng hay khoảng trắng! Nếu ta không để là chuỗi nguyên bản, sẽ có trường hợp xảy ra lỗi không mong muốn, ví dụ với đường dẫn: const path = `C:\\Documents\\Projects\\table.html` Sẽ cho ta chuỗi là: &quot;C:DocumentsProjects able.html&quot; Với String.raw, nó sẽ trả về là: C:\\Documents\\Projects\\table.html Do đó, trong trường hợp này Hello\\nworld sẽ được ghi ra. 73. Output là gì?123456async function getData() &#123; return await Promise.resolve(\"I made it!\");&#125;const data = getData();console.log(data); A: &quot;I made it!&quot; B: Promise {&lt;resolved&gt;: &quot;I made it!&quot;} C: Promise {&lt;pending&gt;} D: undefined Đáp án Đáp án: CMột hàm async luôn luôn trả về một promise. await sẽ chờ cho tới khi promise đó được hoàn thành: một pending promise sẽ được trả về khi ta gọi getData() bằng cách gán nó cho biến data. Nếu ta muốn truy cập giá trị đã hoàn thành của promise, trong trường hợp này là &quot;I made it&quot;, ta có thể sử dụng hàm .then() ngay sau data như sau: data.then(res =&gt; console.log(res)) Khi này nó sẽ ghi ra &quot;I made it!&quot; 74. Output là gì?123456function addToList(item, list) &#123; return list.push(item);&#125;const result = addToList(\"apple\", [\"banana\"]);console.log(result); A: [&#39;apple&#39;, &#39;banana&#39;] B: 2 C: true D: undefined Đáp án Đáp án: BHàm .push() trả về độ dài của mảng mới! Trước đó, mảng chỉ hồm một phần tử là &quot;banana&quot; và có độ dài là 1. Sau khi thêm chuỗi &quot;apple&quot; vào mảng, mảng lúc này có hai chuỗi và có độ dài là 2. Do đó hàm addToList sẽ trả về 2. Hàm push sẽ thay đổi chính bản thân mảng truyền vào. Do đó nếu chúng ta muốn trả về mảng thay vì chỉ trả về độ dài, chúng ta nên trả về trực tiếp mảng list sau khi đã thêm item vào đó. 75. Output là gì?12345678const box = &#123; x: 10, y: 20 &#125;;Object.freeze(box);const shape = box;shape.x = 100;console.log(shape); A: { x: 100, y: 20 } B: { x: 10, y: 20 } C: { x: 100 } D: ReferenceError Đáp án Đáp án: BObject.freeze khiến cho chúng ta không thể thêm vào, xóa đi hay thay đổi bất kì thuộc tính nào của object (trừ phi giá trị của thuộc tính lại chính là một object khác). Khi chúng ta tạo ra biến shape và set cho nó giá trị bằng với một object đã được đóng băng là box, thì shape cũng sẽ trỏ tới một object đã được đóng băng. Ta có thể check một object có đang bị đóng băng hay không bằng Object.isFrozen. Trong trường hợp này, Object.isFrozen(shape) trả về true, vì shape đang trỏ tới một object bị đóng băng. Do đó, cộng với việc x không phải là object, ta sẽ không thể thay đổi giá trị của x. x sẽ vẫn là 10, và { x: 10, y: 20 } được ghi ra. 76. Output là gì?123const &#123; name: myName &#125; = &#123; name: \"Lydia\" &#125;;console.log(name); A: &quot;Lydia&quot; B: &quot;myName&quot; C: undefined D: ReferenceError Đáp án Đáp án: DKhi ta tiến hành unpack giá trị name từ object ở phía bên phải, ta đã gán giá trị &quot;Lydia&quot; của nó cho biến có tên là myName. Với cú pháp { name: myName }, chúng ta muốn khai báo một biến myName với giá trị là giá trị của thuộc tính name trong object phía bên phải. Do name chưa được định nghĩa, nên ghi log ra, nó sẽ throw ra một ReferenceError. 77. Đây có phải là một pure function không?123function sum(a, b) &#123; return a + b;&#125; A: Yes B: No Đáp án Đáp án: AMột hàm được gọi là pure function khi nó luôn luôn trả về một giá trị giống nhau, nếu đối số đưa vào là giống nhau. Hàm sum luôn trả về giá trị giống nhau. Nếu ta đưa vào 1 và 2, nó sẽ luôn trả về 3. Nếu ta đưa vào 5 và 10, nó luôn trả về 15. Cứ như vậy, đây là một pure function. 78. Output là gì?1234567891011121314151617const add = () =&gt; &#123; const cache = &#123;&#125;; return num =&gt; &#123; if (num in cache) &#123; return `From cache! $&#123;cache[num]&#125;`; &#125; else &#123; const result = num + 10; cache[num] = result; return `Calculated! $&#123;result&#125;`; &#125; &#125;;&#125;;const addFunction = add();console.log(addFunction(10));console.log(addFunction(10));console.log(addFunction(5 * 2)); A: Calculated! 20 Calculated! 20 Calculated! 20 B: Calculated! 20 From cache! 20 Calculated! 20 C: Calculated! 20 From cache! 20 From cache! 20 D: Calculated! 20 From cache! 20 Error Đáp án Đáp án: CHàm add chính là một hàm memoized (hàm có nhớ). Với việc có nhớ, chúng ta có thể cache lại kết quả của function để tăng tốc độ tính toán lên. Trong trường hợp này, chúng ta tạo ra một cache object để lưu trữ những kết quả tính toán trước đó. Mỗi lần chúng ta gọi hàm addFunction với đối số giống nhau, đầu tiên nó sẽ check xem đối số đó có tồn tại trong cache hay không. Nếu có, giá trị trong cache sẽ được trả về luôn, tiết kiệm thời gian tính toán. Còn nếu không thì nó sẽ tiến hành tính toán kết quả và tiếp tục lưu vào cache. Chúng ta gọi hàm addFunction ba lần với cùng một đối số: trong lần gọi đầu tiên, giá trị của num là 10 và chưa có mặt trong cache. Do đó num in cache trả về false, và sẽ chạy vào else block: Calculated! 20 sẽ được ghi ra, và 10 sẽ được đưa vào cạche. cache khi này sẽ là { 10: 20 }. Tại lần gọi thứ hai, cache object đã có giá trị 10. num in cache trả về true, và &#39;From cache! 20&#39; được ghi ra. Tại lần gọi thứ ba, ta đưa vào 5 * 2, tức 10 vào hàm. Tiếp tục giống như trên, &#39;From cache! 20&#39; sẽ được ghi ra. 79. Output là gì?123456789const myLifeSummedUp = [\"☕\", \"💻\", \"🍷\", \"🍫\"]for (let item in myLifeSummedUp) &#123; console.log(item)&#125;for (let item of myLifeSummedUp) &#123; console.log(item)&#125; A: 0 1 2 3 and &quot;☕&quot; &quot;💻&quot; &quot;🍷&quot; &quot;🍫&quot; B: &quot;☕&quot; &quot;💻&quot; &quot;🍷&quot; &quot;🍫&quot; and &quot;☕&quot; &quot;💻&quot; &quot;🍷&quot; &quot;🍫&quot; C: &quot;☕&quot; &quot;💻&quot; &quot;🍷&quot; &quot;🍫&quot; and 0 1 2 3 D: 0 1 2 3 and {0: &quot;☕&quot;, 1: &quot;💻&quot;, 2: &quot;🍷&quot;, 3: &quot;🍫&quot;} Đáp án Đáp án: AVới vòng lặp for-in, chúng ta có thể duyệt qua các thuộc tính enumerable của object. Với mảng, thuộc tính enumerable chính là các “key” của mảng, hay chính là các index của mảng đó. Ta có thể coi mảng như là: {0: &quot;☕&quot;, 1: &quot;💻&quot;, 2: &quot;🍷&quot;, 3: &quot;🍫&quot;} Do đó 0 1 2 3 được ghi ra. Với vòng lặp for-of, chúng ta sẽ duyệt qua các phần tử của một iterable. Một mảng chính là một iterable. Khi chúng ta duyệt qua mảng, biến “item” chính là phần tử mà nó đang duyệt qua, do đó &quot;☕&quot; &quot;💻&quot; &quot;🍷&quot; &quot;🍫&quot; được ghi ra. 80. Output là gì?12const list = [1 + 2, 1 * 2, 1 / 2]console.log(list) A: [&quot;1 + 2&quot;, &quot;1 * 2&quot;, &quot;1 / 2&quot;] B: [&quot;12&quot;, 2, 0.5] C: [3, 2, 0.5] D: [1, 1, 1] Đáp án Đáp án: CMảng có thể nhận bất cứ giá trị nào. Số, chuỗi, objects, mảng khác, null, boolean, undefined, và nhiều dạng biểu thức nữa như ngày tháng, hàm, và các tính toán. Giá trị của phần tử chính là giá trị trả về. 1 + 2 trả về 3, 1 * 2 trả về 2, và 1 / 2 trả về 0.5. 81. Output là gì?12345function sayHi(name) &#123; return `Hi there, $&#123;name&#125;`&#125;console.log(sayHi()) A: Hi there, B: Hi there, undefined C: Hi there, null D: ReferenceError Đáp án Đáp án: BMặc định, đối số sẽ có giá trị là undefined, trừ phi ta gán giá trị cho nó khi đưa vào hàm. Trong trường hợp này, ta không đưa vào giá trị nào cho đối số name cả. Do đó name sẽ là undefined và được ghi ra. Với cú pháp ES6, ta có thể thay đổi giá trị mặc định undefined bằng một giá trị mặc định khác. Ví dụ: function sayHi(name = &quot;Lydia&quot;) { ... } Trong trường hợp này, nếu ta không đưa giá trị nào vào hoặc đưa vào undefined, name cũng sẽ nhận giá trị mặc định là Lydia. 82. Output là gì?123456789101112131415var status = \"😎\"setTimeout(() =&gt; &#123; const status = \"😍\" const data = &#123; status: \"🥑\", getStatus() &#123; return this.status &#125; &#125; console.log(data.getStatus()) console.log(data.getStatus.call(this))&#125;, 0) A: &quot;🥑&quot; and &quot;😍&quot; B: &quot;🥑&quot; and &quot;😎&quot; C: &quot;😍&quot; and &quot;😎&quot; D: &quot;😎&quot; and &quot;😎&quot; Đáp án Đáp án: BGiá trị của this phụ thuộc vào vị trí mà nó được gọi. Trong một phương thức, ví dụ getStatus, this trỏ tới object chứa phương thức đó. Phương thức này thuộc data object, do đó this trỏ tới data object. Khi chúng ta gọi this.status thì thuộc tính status của data sẽ được ghi ra, chính là &quot;🥑&quot;. Với phương thức call, chúng ta thay đổi tham chiếu mà this trỏ tới. Trong hàm, từ khóa this trỏ tới object chứa hàm đó. Chúng ta khai báo hàm setTimeout trong global object, do đó bên trong hàm setTimeout thì this sẽ trỏ tới global object. Tại biến global object, có một biến status với giá trị &quot;😎&quot;. Do đó khi gọi this.status, &quot;😎&quot; sẽ được ghi ra. 83. Output là gì?123456789const person = &#123; name: \"Lydia\", age: 21&#125;let city = person.citycity = \"Amsterdam\"console.log(person) A: { name: &quot;Lydia&quot;, age: 21 } B: { name: &quot;Lydia&quot;, age: 21, city: &quot;Amsterdam&quot; } C: { name: &quot;Lydia&quot;, age: 21, city: undefined } D: &quot;Amsterdam&quot; Đáp án Đáp án: AChúng ta set biến city bằng với giá trị của thuộc tính city của object person. Nhưng object này không có thuộc tính nào là city cả, nên giá trị của biến city sẽ là undefined. Chú ý là chúng ta không tham chiếu tới bản thân object person! Chúng ta chỉ đơn giản là set giá trị của biến city bằng với giá trị của thuộc tính city trong object person mà thôi. Sau đó chúng ta set biến city bằng với chuỗi &quot;Amsterdam&quot;. Điều này không hề ảnh hưởng gì tới object person vì không có tham chiếu nào ở đây cả. Do đó khi ghi object person ra, Tất cả các thuộc tính vẫn như cũ không hề thay đổi gì cả. 84. Output là gì?1234567891011function checkAge(age) &#123; if (age &lt; 18) &#123; const message = \"Sorry, you're too young.\" &#125; else &#123; const message = \"Yay! You're old enough!\" &#125; return message&#125;console.log(checkAge(21)) A: &quot;Sorry, you&#39;re too young.&quot; B: &quot;Yay! You&#39;re old enough!&quot; C: ReferenceError D: undefined Đáp án Đáp án: CBiến số được khai báo với các từ khóa như const hay let đều là block-scoped. Block chính là những khối được bao bọc bởi cặp ngoặc nhọn ({ }). Trong trường hợp này nó chính là cặp ngoặc bao quanh những câu lệnh if/else. Chúng ta không thể truy cập đến biến đó bên ngoài block, và kết quả là throw một ReferenceError. 85. Những thông tin nào sẽ được ghi ra?123fetch('https://www.website.com/api/user/1') .then(res =&gt; res.json()) .then(res =&gt; console.log(res)) A: The result of the fetch method. B: The result of the second invocation of the fetch method. C: The result of the callback in the previous .then(). D: It would always be undefined. Đáp án Đáp án: CGiá trị của res trong .then thứ hai chính là giá trị trả về từ .then trước đó. Chúng ta có thể thực hiện .then liên tiếp như vậy, các giá trị sẽ liên tiếp được truyền tới hàm xử lý tiếp theo. 86. Bằng cách nào chúng ta có thể set hasName bằng true, nếu chúng ta không đưa true vào đối số?123function getName(name) &#123; const hasName = //&#125; A: !!name B: name C: new Boolean(name) D: name.length Đáp án Đáp án: AVới !!name, chúng ta sẽ đánh giá giá trị của name là truthy hay falsy. Nếu name là truthy, thì !name sẽ trả về false. !false (hay chính là !!name khi này) sẽ trả về true. Bằng cách set hasName bằng với name, chúng ta set hasName bằng với giá trị đối số đưa vào trong hàm getName, không thỏa mãn vì ta đã giới hạn là không đưa true vào. new Boolean(true) trả về một object wrapper, chứ không phải là một giá trị boolean. name.length trả về độ dài của đối số, chứ không phải true. 87. Output là gì?1console.log(\"I want pizza\"[0]) A: &quot;&quot;&quot; B: &quot;I&quot; C: SyntaxError D: undefined Đáp án Đáp án: BTrong trường hợp ta muốn lấy ra một ký tự trong một chuỗi, ta có thể sử dụng toán tử ngoặc vuông. Ký tự đầu tiên sẽ có thứ tự là 0, và cứ tiếp tục như vậy. Trong trường hợp này chúng ta lấy ra ký tự có thứ tự là 0, đó chính là ký tự &quot;I&#39;. Chú ý là phương thức này không hoạt động với IE7 trở xuống. Thay vì thế ta sử dụng .charAt() 88. Output là gì?12345function sum(num1, num2 = num1) &#123; console.log(num1 + num2)&#125;sum(10) A: NaN B: 20 C: ReferenceError D: undefined Đáp án Đáp án: BTa có thể set giá trị mặc định của một tham số là tham số khác trong hàm, miễn là tham số đó được khai báo trước tham số mặc định. Chúng ta đưa 10 vào hàm sum. Nếu hàm sum chỉ nhận 1 đối số, nó có nghĩa là giá trị của num2 không được đưa vào, nên nó sẽ lấy giá trị mặc định là giá trị của num1 đã được đưa vào, hay chính là 10 trong trường hợp này. Khi này num1 + num2 trả về 20. Nếu chúng ta thử set một giá trị mặc định của tham số bằng với giá trị của tham số khai báo sau (về bên phải), giá trị của tham số đó sẽ không được khởi tạo và dẫn đến throw ra lỗi. 89. Output là gì?12345678// module.js export default () =&gt; \"Hello world\"export const name = \"Lydia\"// index.js import * as data from \"./module\"console.log(data) A: { default: function default(), name: &quot;Lydia&quot; } B: { default: function default() } C: { default: &quot;Hello world&quot;, name: &quot;Lydia&quot; } D: Global object of module.js Đáp án Đáp án: ACú pháp import * as data sẽ import tất cả những gì được export từ module.js vào trong index.js và lưu trữ dưới một object có tên là data. Trong file module.js, có hai thứ được export ra: default export và một named export. Default export là một hàm trả về chuỗi &quot;Hello World&quot;, và named export là một biến name nhận giá trị là chuỗi &quot;Lydia&quot;. Do đó data object có thuộc tính default cho default export, các thuộc tính khác sẽ có tên chính là tên của named exports và giá trị đi kèm. 90. Output là gì?12345678class Person &#123; constructor(name) &#123; this.name = name &#125;&#125;const member = new Person(\"John\")console.log(typeof member) A: &quot;class&quot; B: &quot;function&quot; C: &quot;object&quot; D: &quot;string&quot; Đáp án Đáp án: CClasses chỉ đơn thuần là syntactical sugar (cú pháp đặc biệt) của function constructors mà thôi. Nó tương đương với việc ta viết một function thế này: 123function Person() &#123; this.name = name&#125; Gọi một constructor với từ khóa new sẽ tạo ra một instance của class Person, typeof sẽ trả về là &quot;object&quot; cho các instance. Do đó typeof member trả về &quot;object&quot;. 91. Output là gì?123let newList = [1, 2, 3].push(4)console.log(newList.push(5)) A: [1, 2, 3, 4, 5] B: [1, 2, 3, 5] C: [1, 2, 3, 4] D: Error Đáp án Đáp án: DHàm .push trả về độ dài mới của mảng, chứ không phải bản thân mảng đó! Bằng cách set newList bằng với [1, 2, 3].push(4), ta đã set cho newList giá trị là 4 - tức độ dài của mảng lúc này. Sau đó chúng ta tiến hành .push trên newList. Vì newList là một số thông thường, ta không thể dùng .push được, nên sẽ throw ra một TypeError. 92. Output là gì?12345678function giveLydiaPizza() &#123; return \"Here is pizza!\"&#125;const giveLydiaChocolate = () =&gt; \"Here's chocolate... now go hit the gym already.\"console.log(giveLydiaPizza.prototype)console.log(giveLydiaChocolate.prototype) A: { constructor: ...} { constructor: ...} B: {} { constructor: ...} C: { constructor: ...} {} D: { constructor: ...} undefined Đáp án Đáp án: DHàm thông thường giống như giveLydiaPizza, sẽ có thuộc tính prototype là một object (prototype object) với một thuộc tính là constructor. Còn arrow functions giống như giveLydiaChocolatethì không có thuộc tính prototype này. undefined trả về khi ta truy cập thuộc tính prototype bằng cách gọi giveLydiaChocolate.prototype. 93. Output là gì?12345678const person = &#123; name: \"Lydia\", age: 21&#125;for (const [x, y] of Object.entries(person)) &#123; console.log(x, y)&#125; A: name Lydia và age 21 B: [&quot;name&quot;, &quot;Lydia&quot;] và [&quot;age&quot;, 21] C: [&quot;name&quot;, &quot;age&quot;] và undefined D: Error Đáp án Đáp án: AObject.entries(person) sẽ trả về một mảng của mảng, bao gồm các key và các object: [ [ &#39;name&#39;, &#39;Lydia&#39; ], [ &#39;age&#39;, 21 ] ] Khí sử dụng for-of, chúng ta sẽ duyệt qua từng thành phần của mảng, trong trường hợp này chính là những mảng con. Đồng thời tiến hành gán giá trị luôn trong vongf lặp for-of, bằng cách sử dụng const [x, y]. Khi này x sẽ là phần tử đầu tiên trong mảng con, y chính là phần tử thứ hai trong mảng con. Mảng con đầu tiên là [ &quot;name&quot;, &quot;Lydia&quot; ], nên x sẽ là &quot;name&quot;, và y sẽ là &quot;Lydia&quot;, và được ghi ra.Mảng con thứ hai là [ &quot;age&quot;, 21 ], nên x sẽ là &quot;age&quot;, và y sẽ là 21, và được ghi ra. 94. Output là gì?12345function getItems(fruitList, ...args, favoriteFruit) &#123; return [...fruitList, ...args, favoriteFruit]&#125;getItems([\"banana\", \"apple\"], \"pear\", \"orange\") A: [&quot;banana&quot;, &quot;apple&quot;, &quot;pear&quot;, &quot;orange&quot;] B: [[&quot;banana&quot;, &quot;apple&quot;], &quot;pear&quot;, &quot;orange&quot;] C: [&quot;banana&quot;, &quot;apple&quot;, [&quot;pear&quot;], &quot;orange&quot;] D: SyntaxError Đáp án Đáp án: D...args là cú pháp tham số cuối cùng. Giá trị của tham số cuối cùng chính là toàn bộ các đối số còn lại, và nó là tham số cuối cùng duy nhất! Trong trường hợp này, tham số cuối cùng lại là tham số thứ hai. Điều đó là không thể được, và sẽ throw ra một lỗi cú pháp. 12345function getItems(fruitList, favoriteFruit, ...args) &#123; return [...fruitList, ...args, favoriteFruit]&#125;getItems([\"banana\", \"apple\"], \"pear\", \"orange\") Nếu ta code như thế này thì lại đúng. Giá trị trả về sẽ là [ &#39;banana&#39;, &#39;apple&#39;, &#39;orange&#39;, &#39;pear&#39; ] 95. Output là gì?123456789101112function nums(a, b) &#123; if (a &gt; b) console.log('a is bigger') else console.log('b is bigger') return a + b&#125;console.log(nums(4, 2))console.log(nums(1, 2)) A: a is bigger, 6 và b is bigger, 3 B: a is bigger, undefined và b is bigger, undefined C: undefined và undefined D: SyntaxError Đáp án Đáp án: BVới JavaScript, ta không bắt buộc phải viết dấu chấm phẩy (;), JavaScript engine sẽ tự động thêm vào sau mỗi câu lệnh. Nó gọi là Automatic Semicolon Insertion. Một câu lệnh có thể là khai báo biến, hoặc từ khóa như throw, return, break, vv. Ở đây ta sử dụng câu lệnh return ở một dòng và giá trị a + b ở một dòng khác. Tuy nhiên do khác dòng nên JS engine không thể biết đâu là giá trị ta thực sự muốn trả về. Thay vì thế, nó sẽ tự động thêm vào dấu chấm phẩy ngay sau return giống như này: 12return;a + b Có nghĩa là a + b sẽ không bao giờ được thực hiện, vì hàm đã được return rồi. Do không giá trị nào được trả về, nên giá trị trả về của hàm sẽ là undefined. Lưu ý là sẽ không tự động thêm dấu chấm phẩy ngay sau if/else đâu nhé! 96. Output là gì?1234567891011121314class Person &#123; constructor() &#123; this.name = \"Lydia\" &#125;&#125;Person = class AnotherPerson &#123; constructor() &#123; this.name = \"Sarah\" &#125;&#125;const member = new Person()console.log(member.name) A: &quot;Lydia&quot; B: &quot;Sarah&quot; C: Error: cannot redeclare Person D: SyntaxError Đáp án Đáp án: BChúng ta có thể set một class với giá trị là một classes/function constructor khác. Trong trường hợp này, ta set Person bằng với AnotherPerson. Trong constructor, this.name là Sarah, do đó giá trị của thuộc tính này trong instance member chính là &quot;Sarah&quot;. 97. Output là gì?123456const info = &#123; [Symbol('a')]: 'b'&#125;console.log(info)console.log(Object.keys(info)) A: {Symbol(&#39;a&#39;): &#39;b&#39;} và [&quot;{Symbol(&#39;a&#39;)&quot;] B: {} và [] C: { a: &quot;b&quot; } và [&quot;a&quot;] D: {Symbol(&#39;a&#39;): &#39;b&#39;} và [] Đáp án Đáp án: DPhương thức Object.keys sẽ trả về toàn bộ những key của các thuộc tính enumerable trên một object. Nhưng Symbol không phải dạng enumerable. do đó nó sẽ trả về một mảng rỗng. Tuy nhiên khi ta log ra toàn bộ object, thì ta sẽ ghi ra toàn bộ các thuộc tính, cho dù đó có là thuộc tính enumerable hay không. Đó chính là một đặc trưng của Symbol: Bên cạnh việc nó biểu diễn một giá trị duy nhất (tránh việc xảy ra xung đột tên gọi, ví dụ khi ta sử dụng 2 thư viện mà muốn thêm thuộc tính vào cho cùng một object chẳng hạn), nó còn giúp “ẩn” thuộc tính đó đi (dù không hoàn toàn, ta vẫn có thể truy cập được bằng cách sử dụng phương thức Object.getOwnPropertySymbols()). 98. Output là gì?12345678const getList = ([x, ...y]) =&gt; [x, y]const getUser = user =&gt; &#123; name: user.name, age: user.age &#125;const list = [1, 2, 3, 4]const user = &#123; name: \"Lydia\", age: 21 &#125;console.log(getList(list))console.log(getUser(user)) A: [1, [2, 3, 4]] và undefined B: [1, [2, 3, 4]] và { name: &quot;Lydia&quot;, age: 21 } C: [1, 2, 3, 4] và { name: &quot;Lydia&quot;, age: 21 } D: Error và { name: &quot;Lydia&quot;, age: 21 } Đáp án Đáp án: AHàm getList nhận vào một mảng các đối số, và tiến hành xử lý mảng đó luôn khi đưa vào hàm: [x, ...y] = [1, 2, 3, 4] Với việc sử dụng cú pháp tham số cuối cùng ...y, chúng ta đưa toàn bộ “những đối số còn lại” vào một mảng y. Trong trường hợp này đó là mảng gồm các phần tử 2, 3 và 4. Do đó giá trị của y lúc này chính là mảng [2, 3, 4]. Giá trị của x là 1, nên khi ghi [x, y] ra, kết quả sẽ là [1, [2, 3, 4]]. Hàm getUser nhận vào một object. Với cú pháp arrow function, chúng ta sẽ không phải viết trong ngoặc nhọn {} nữa nếu ta chỉ muốn đơn thuần trả về giá trị. Tuy nhiên, nếu ta muốn trả về một object t arrow function, ta sẽ phải viết chúng trong dấu ngoặc tròn (), nếu không thì sẽ không có giá trị nào được trả về! Ví dụ như sau: getUser 1234567891011121314Do không giá trị nào được trả về, kết quả sẽ là &#96;undefined&#96;.&lt;&#x2F;p&gt;&lt;&#x2F;details&gt;---###### 99. Output là gì?&#96;&#96;&#96;javascriptconst name &#x3D; &quot;Lydia&quot;console.log(name()) A: SyntaxError B: ReferenceError C: TypeError D: undefined Đáp án Đáp án: CBiến name có giá trị là một chuỗi, không phải hàm, vì thế không thể gọi được. TypeErrors sẽ được throw ra nếu một giá trị không được sử dụng đúng kiểu. JavaScript muốn name là một hàm khi ta tiến hành gọi nó. Nhưng nó là chuỗi, nên sẽ throw ra một TypeError. SyntaxErrors sẽ được throw khi ta viết code không đúng cú pháp của JavaScript, ví dụ thay vì return ta viết retrun. ReferenceErrors sẽ được throw ra khi Javascript không thể tìm được tham chiếu nào đến giá trị mà ta đang cố truy cập. 100. Output là gì?1234// 🎉✨ Đây là câu hỏi thứ 100 của tôi! ✨🎉const output = `$&#123;[] &amp;&amp; 'Im'&#125;possible!You should$&#123;'' &amp;&amp; `n't`&#125; see a therapist after so much JavaScript lol` A: possible! You should see a therapist after so much JavaScript lol B: Impossible! You should see a therapist after so much JavaScript lol C: possible! You shouldn&#39;t see a therapist after so much JavaScript lol D: Impossible! You shouldn&#39;t see a therapist after so much JavaScript lol Đáp án Đáp án: B[] là một giá trị truthy. Với phép toán &amp;&amp; , giá trị bên phải sẽ được trả về nếu giá trị bên trái là truthy. Trong trường hợp này giá trị bên trái [] là truthy, nên &quot;Im&#39; sẽ được trả về. &quot;&quot; là một giá trị falsy. Nếu giá trị bên trái là falsy, không có gì được trả về cả. Do đó n&#39;t sẽ không được trả về. 101. Output là gì?12345const one = (false || &#123;&#125; || null)const two = (null || false || \"\")const three = ([] || 0 || true)console.log(one, two, three) A: false null [] B: null &quot;&quot; true C: {} &quot;&quot; [] D: null null true Đáp án Đáp án: CVới phép toán ||, ta sẽ trả về giá trị truethy đầu tiên. Nếu tất cả đều là falsy, giá trị cuối cùng sẽ được trả về. (false || {} || null): object rỗng {} là một giá trị truthy. Nó là giá trị truethy đầu tiên và duy nhất nên sẽ được trả về. Do đó one sẽ là {}. (null || false || &quot;&quot;): Tất cả toán hạng đều là falsy. Có nghĩa là toán hạng cuối cùng &quot;&quot; sẽ được trả về. Do đó two sẽ là &quot;&quot;. ([] || 0 || &quot;&quot;): mảng rỗng [] là một giá trị truthy. Nó là giá trị truthy đầu tiên nên sẽ được trả về. Do đó three sẽ là []. 102. Output là gì?1234567891011121314const myPromise = () =&gt; Promise.resolve('I have resolved!')function firstFunction() &#123; myPromise().then(res =&gt; console.log(res)) console.log('second')&#125;async function secondFunction() &#123; console.log(await myPromise()) console.log('second')&#125;firstFunction()secondFunction() A: I have resolved!, second và I have resolved!, second B: second, I have resolved! và second, I have resolved! C: I have resolved!, second và second, I have resolved! D: second, I have resolved! và I have resolved!, second Đáp án Đáp án: DCó thể tưởng tượng đơn giản cách promise thực thi như sau: bây giờ tôi sẽ để tạm nó sang một bên vì nó tính toán mất thời gian. Chỉ khi nào nó được hoàn thành (resolved) hay bị hủy bỏ (rejected) hay khi call stack trở nên rỗng thì tôi sẽ lấy giá trị trả về ra. Dù chúng ta có thể sử dụng giá trị thu được bằng cú pháp .then, hoặc sử dụng cặp cú pháp await/async, nhưng, cách chúng hoạt động là khác nhau. Trong firstFunction, chúng ta đưa promise qua một bên chờ cho nó tính toán xong, và vẫn tiếp tục chạy những code tiếp sau đó, theo đó console.log(&#39;second&#39;) sẽ được chạy. Sau đó promise được hoàn thành trả về giá trị I have resolved, giá trị này sẽ được log ra khi call stack trở nên rỗng. Với từ khóa await trong secondFunction, ta đã tạm dừng một hàm bất đồng bộ cho tới khi chúng trả về giá trị, sau đó ta mới đi tiếp đến các câu lệnh tiếp theo. Do đó nó sẽ chờ cho tới khi myPromise được hoàn thành và trả về giá trị I have resolved, sau đó chúng ta sẽ chạy tiếp câu lệnh tiếp theo in ra second. 103. Output là gì?123456789const set = new Set()set.add(1)set.add(\"Lydia\")set.add(&#123; name: \"Lydia\" &#125;)for (let item of set) &#123; console.log(item + 2)&#125; A: 3, NaN, NaN B: 3, 7, NaN C: 3, Lydia2, [object Object]2 D: &quot;12&quot;, Lydia2, [object Object]2 Đáp án Đáp án: CPhép toán + không chỉ dùng để cộng các số, mà nó còn dùng để nối chuỗi nữa. Mỗi khi Javascript engine gặp một giá trị trong phép toán không phải dạng số, nó sẽ chuyển các số trong phép toán đó sang dạng chuỗi. Phép toán đầu tiên item là một số 1, nên 1 + 2 trả về 3. Ở phép toán thứ hai, item là một chuỗi &quot;Lydia&quot;. trong khi đó 2 là một số, nên 2 sẽ bị chuyển sang dạng chuỗi, sau khi nối vào ta có chuỗi &quot;Lydia2&quot;. Ở phép toán thứ ba, { name: &quot;Lydia&quot; } là một object. Tuy nhiên dù có là object hay gì đi nữa thì nó cũng sẽ bị chuyển sang dạng chuỗi. Đối với object thì khi chuyển sang dạng chuỗi nó sẽ trở thành &quot;[object Object]&quot;. &quot;[object Object]&quot; nối với &quot;2&quot; trở thành &quot;[object Object]2&quot;. 104. Output là gì?1Promise.resolve(5) A: 5 B: Promise {&lt;pending&gt;: 5} C: Promise {&lt;fulfilled&gt;: 5} D: Error Đáp án Đáp án: CTa có thể truyền vào giá trị bất kì cho Promise.resolve, dù có là promise hay không promise. Bản thân nó sẽ là một hàm trả về một promise với giá trị đã được resolved. Trong trường hợp này ta đưa vào giá trị 5. Nó sẽ trả về một resolved promise với giá trị 5. 105. Output là gì?1234567891011function compareMembers(person1, person2 = person) &#123; if (person1 !== person2) &#123; console.log(\"Not the same!\") &#125; else &#123; console.log(\"They are the same!\") &#125;&#125;const person = &#123; name: \"Lydia\" &#125;compareMembers(person) A: Not the same! B: They are the same! C: ReferenceError D: SyntaxError Đáp án Đáp án: BObject sẽ được truyền vào hàm theo reference. Khi chúng ta nói so sánh strict equal (===), nghĩa là ta đang so sánh các reference của chúng. Ta set giá trị mặc định của person2 là object person, và đưa object person vào làm giá trị cho đối số person1. Điều đó có nghĩa là chúng cùng trỏ đến một object trong bộ nhớ, do đó chúng bằng nhau, và They are the same! được in ra. 106. Output là gì?1234567891011const colorConfig = &#123; red: true, blue: false, green: true, black: true, yellow: false,&#125;const colors = [\"pink\", \"red\", \"blue\"]console.log(colorConfig.colors[1]) A: true B: false C: undefined D: TypeError Đáp án Đáp án: DTrong Javascript ta có hai cách để truy cập thuộc tính của một object: sử dụng ngoặc vuông [], hoặc sử dụng chấm .. Trong trương hợp này chúng ta sử dụng chấm (colorConfig.colors) thay cho ngoặc vuông (colorConfig[&quot;colors&quot;]). Với cách sử dụng chấm, Javascript sẽ tìm kiếm một thuộc tính có tên chính xác như tên ta đưa vào. Trong trường hợp này nó là thuộc tính colors trong object colorConfig Tuy nhiên trong object này không có thuộc tính nào tên là colors, nên nó sẽ trả về undefined. Sau đó chúng ta cố truy cậ vào thuộc tính 1 của nó bằng cách gọi [1]. Chúng ta không thể làm như vậy trên giá trị undefined, nên nó sẽ trả về TypeError: Cannot read property &#39;1&#39; of undefined. Javascript thông dịch theo câu lệnh. Khi ta sử dụng ngoặc vuông, Nnó sẽ tìm mở ngoặc đầu tiên [ và tiếp tục cho tới khi gặp đóng ngoặc tương ứng ]. Chỉ khi đó nó mới đánh giá câu lệnh. Nếu chúng ta sử dụng cú pháp colorConfig[colors[1]], nó sẽ trả về giá trị của thuộc tính red trong object colorConfig. 107. Ouput là gì?1console.log('❤️' === '❤️') A: true B: false Đáp án Đáp án: AVề cơ bản, emoji vẫn là các ký tự unicode mà thôi. Mã unicode cho hình trái tim là &quot;U+2764 U+FE0F&quot;. Chúng luôn luôn là một, nên phép toán đơn giản trả về true. 108. Phép toán nào sau đây làm thay đổi mảng gốc?12345678const emojis = ['✨', '🥑', '😍']emojis.map(x =&gt; x + '✨')emojis.filter(x =&gt; x !== '🥑')emojis.find(x =&gt; x !== '🥑')emojis.reduce((acc, cur) =&gt; acc + '✨')emojis.slice(1, 2, '✨') emojis.splice(1, 2, '✨') A: All of them B: map reduce slice splice C: map slice splice D: splice Đáp án Đáp án: DVới splice, ta thay đổi mảng gốc bằng cách thêm sửa xóa các phần tử. Trong trường hợp này ta xóa 2 phần tử kể từ index 1 (ta xóa &#39;🥑&#39; và &#39;😍&#39;) và thêm vào ✨ emoji. map, filter và slice trả về một mảng mới, find trả về một phần tử, và reduce trả về giá trị tích lũy. 109. Output là gì?123456const food = ['🍕', '🍫', '🥑', '🍔']const info = &#123; favoriteFood: food[0] &#125;info.favoriteFood = '🍝'console.log(food) A: [&#39;🍕&#39;, &#39;🍫&#39;, &#39;🥑&#39;, &#39;🍔&#39;] B: [&#39;🍝&#39;, &#39;🍫&#39;, &#39;🥑&#39;, &#39;🍔&#39;] C: [&#39;🍝&#39;, &#39;🍕&#39;, &#39;🍫&#39;, &#39;🥑&#39;, &#39;🍔&#39;] D: ReferenceError Đáp án Đáp án: ATrong Javascript tất cả các kiểu cơ bản (mọi thứ không phải object) đều tương tác bằng giá trị. Chúng ta set giá trị của thuộc tính favoriteFood trong object info bằng ký tự bánh pizza, &#39;🍕&#39;. Chuỗi trong javascript là một kiểu cơ bản, nên nó cũng sẽ tương tác bằng giá trị. Bản thân mảng food không hề thay đổi, do giá trị của favoriteFood chỉ là một bản copy của giá trị đầu tiên trong mảng mà thôi, và không hề trỏ tới reference của food[0]. Do đó khi ghi ra, giá trị của mảng vẫn là giá trị ban đầu, [&#39;🍕&#39;, &#39;🍫&#39;, &#39;🥑&#39;, &#39;🍔&#39;]. 110. Phép toán này dùng để làm gì?1JSON.parse() A: Parse JSON thành một giá trị JavaScript B: Parse một JavaScript object thành JSON C: Parse giá trị JavaScript bất kì thành JSON D: Parse JSON thành một JavaScript object Đáp án Đáp án: AVới phương thức JSON.parse(), ta sẽ parse một chuỗi JSON thành một giá trị JavaScript. Ví dụ: 1234567891011// Chuyển một số thành một chuỗi JSON, sau đó parse chuỗi JSON đó để trả về một giá trị JavaScript:const jsonNumber = JSON.stringify(4) // '4'JSON.parse(jsonNumber) // 4// Chuyển một mảng thành một chuỗi JSON, sau đó parse chuỗi JSON để trả về một giá trị JavaScript:const jsonArray = JSON.stringify([1, 2, 3]) // '[1, 2, 3]'JSON.parse(jsonArray) // [1, 2, 3]// Chuyển một object thành một chuỗi JSON, sau đó parse chuỗi JSON để trả về một giá trị JavaScript:const jsonArray = JSON.stringify(&#123; name: \"Lydia\" &#125;) // '&#123;\"name\":\"Lydia\"&#125;'JSON.parse(jsonArray) // &#123; name: 'Lydia' &#125; 111. Ouput là gì?12345678let name = 'Lydia'function getName() &#123; console.log(name) let name = 'Sarah'&#125;getName() A: Lydia B: Sarah C: undefined D: ReferenceError Đáp án Đáp án: DMỗi hàm sẽ có một context thực thi (hay scope) của riêng nó. Hàm getName đầu tiên sẽ tìm trong context của nó (scope) để tìm xem có biến nào tên là name hay không. Trong trường hợp này, hàm getName có biến name được khai báo với từ khóa let, giá trị là &#39;Sarah&#39;. Một biến được khai báo với từ khóa let (hoặc const) sẽ được hoisted, nhưng không giống như var, nó sẽ không được khởi tạo. Nó sẽ không thể truy cập được trước dòng ta khai báo (initialize). Nó được gọi là “temporal dead zone”. Khi ta cố truy cập một biến trước khi nó được khai báo, JavaScript sẽ throw ra ReferenceError. Nếu ta không khai báo biến name bên trong hàm getName, thì Javascript engine sẽ tiếp tục tìm kiếm trong scope chain. Nó sẽ tìm thấy ở scope phía ngoài một biến name với giá trị là Lydia. Trong trường hợp này nó sẽ log ra Lydia. 1234567let name = 'Lydia'function getName() &#123; console.log(name)&#125;getName() // Lydia 112. Output là gì?12345678910111213function* generatorOne() &#123; yield ['a', 'b', 'c'];&#125;function* generatorTwo() &#123; yield* ['a', 'b', 'c'];&#125;const one = generatorOne()const two = generatorTwo()console.log(one.next().value)console.log(two.next().value) A: a and a B: a and undefined C: [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;] and a D: a and [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;] Đáp án Đáp án: CVới từ khóa yield, ta sẽ trả về các giá trị trong một generator. Với từ khóa yield*, ta có thể trả về giá trị từ một engerator khác, hoặc một iterable object (ví dụ mảng). Trong generatorOne, ta trả về toàn bộ mảng [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;] sử dụng từ khóa yield. Giá trị của thuộc tính value trong object thu được bởi phương thức next trong one (one.next().value) là toàn bộ mảng [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]. 12console.log(one.next().value) // ['a', 'b', 'c']console.log(one.next().value) // undefined Trong generatorTwo, ta sử dụng từ khóa yield*. Có nghĩa là giá trị đầu tiên mà two trả về là giá trị đầu tiên trong iterator. Trong trường hợp này iterator của chúng ta là mảng [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]. Giá trị đầu tiên của mảng là a, nên lần đầu tiên khi ta gọi two.next().value, a sẽ được trả về. 1234console.log(two.next().value) // 'a'console.log(two.next().value) // 'b'console.log(two.next().value) // 'c'console.log(two.next().value) // undefined 113. Output là gì?1console.log(`$&#123;(x =&gt; x)('I love')&#125; to program`) A: I love to program B: undefined to program C: ${(x =&gt; x)(&#39;I love&#39;) to program D: TypeError Đáp án Đáp án: ABiểu thức bên trong chuỗi template (tức chuỗi nằm trong hai dấu ``, gọi là template literals) sẽ được đánh giá trước. Sau đó kết quả của biểu thức sẽ được đưa vào chuỗi, trong trường hợp này biểu thức là (x =&gt; x)(&#39;I love&#39;). Chúng ta truyền giá trị đối số &#39;I love&#39; cho một arrow function x =&gt; x. x lúc này là &#39;I love&#39;, và trả về chính nó. Cuối cùng kết quả của chuỗi là I love to program. 114. Điều gì sẽ xảy ra?1234567let config = &#123; alert: setInterval(() =&gt; &#123; console.log('Alert!') &#125;, 1000)&#125;config = null A: Callback setInterval sẽ không được gọi B: Callback setInterval sẽ được gọi một lần duy nhất C: Callback setInterval vẫn sẽ được gọi mỗi giây một lần D: config.alert() không bao giờ được gọi bởi config là null Đáp án Đáp án: CThông thường khi ta set một object bằng null, thì object này sẽ được bộ dọn rác dọn đi do không còn gì reference đến nó nữa (garbage collected). Tuy nhiên, do callback trong setInterval là một arrow function (do đó nó sẽ gắn với object config), nên callback này vẫn sẽ giữ reference đến object config. Vì vẫn còn giữ reference, nên object sẽ không bị dọn đi. Do đó nó vẫn sẽ được gọi sau mỗi 1000ms (tức 1 giây). 115. Những hàm nào sẽ trả về &#39;Hello world!&#39;?1234567891011const myMap = new Map()const myFunc = () =&gt; 'greeting'myMap.set(myFunc, 'Hello world!')//1myMap.get('greeting')//2myMap.get(myFunc)//3myMap.get(() =&gt; 'greeting') A: 1 B: 2 C: 2 và 3 D: Tất cả Đáp án Đáp án: BKhi ta thêm vào một cặp key/value với từ khóa set, key sẽ là đối số đầu tiên đưa vào trong hàm set function, và value sẽ là đối số thứ hai.Trong trường hơp này key chính là hàm () =&gt; &#39;greeting&#39;, value là &#39;Hello world&#39;. myMap trở thành { () =&gt; &#39;greeting&#39; =&gt; &#39;Hello world!&#39; }. 1 sai, vì key là () =&gt; &#39;greeting&#39; chứ không phải là &#39;greeting&#39;.3 sai, vì khi chúng ta đưa một hàm vào làm đối số trong phương thức get, nó sẽ được đưa vào dưới dạng reference. Function vốn là object, do đó 2 hàm sẽ không bao giờ là strictly equal, mặc dù chúng có trông giống nhau đi chăng nữa thì chúng vẫn trỏ đến các vùng nhớ khác nhau. 116. Output là gì?123456789101112131415const person = &#123; name: \"Lydia\", age: 21&#125;const changeAge = (x = &#123; ...person &#125;) =&gt; x.age += 1const changeAgeAndName = (x = &#123; ...person &#125;) =&gt; &#123; x.age += 1 x.name = \"Sarah\"&#125;changeAge(person)changeAgeAndName()console.log(person) A: {name: &quot;Sarah&quot;, age: 22} B: {name: &quot;Sarah&quot;, age: 23} C: {name: &quot;Lydia&quot;, age: 22} D: {name: &quot;Lydia&quot;, age: 23} Đáp án Đáp án: CCả hai hàm changeAge và changeAgeAndName đều có tham số mặc định - nó là một bản copy mới của object { ...person }. Object này sẽ copy tất cả những cặp key/values bên trong object person. Đầu tiên, chúng ta gọi hàm changeAge và đưa chính object person vào làm đối số. Hàm này sẽ tăng giá trị của thuộc tính age lên 1. person lúc này là { name: &quot;Lydia&quot;, age: 22 }. Sau đó, chúng ta gọi hàm changeAgeAndName tuy nhiên không đưa vào đối số nào cả. Do đó giá trị của x lúc này sẽ là giá trị mặc định, tức một bản copy của object { ...person }. Do nó chỉ là một bản copy (tức object mới), nên nó không ảnh hưởng gì tới giá trị của object person gốc, giá trị của person gốc sẽ vẫn là { name: &quot;Lydia&quot;, age: 22 }. 117. Phép tính nào dưới đây trả về 6?123function sumValues(x, y, z) &#123; return x + y + z;&#125; A: sumValues([...1, 2, 3]) B: sumValues([...[1, 2, 3]]) C: sumValues(...[1, 2, 3]) D: sumValues([1, 2, 3]) Đáp án Đáp án: CVới toán tử ba chấm (spread operator) ..., chúng ta có thể unpack một iterable thành từng các phần tử riêng biệt. Hàm sumValues nhận vào 3 giá trị: x, y và z. ...[1, 2, 3] sẽ trả về 1, 2, 3, đưa vào sumValues sẽ cho ta kết quả là 6. 118. Output là gì?1234let num = 1;const list = [\"🥳\", \"🤠\", \"🥰\", \"🤪\"];console.log(list[(num += 1)]); A: 🤠 B: 🥰 C: SyntaxError D: ReferenceError Đáp án Đáp án: BVới phép toán +=, Ta tăng giá trị của num lên 1. num có giá trị khởi tạo là 1, do đó 1 + 1 là 2. Phần tử thứ hai của list là 🥰, do đó console.log(list[2]) sẽ in ra 🥰. 119. Output là gì?12345678910111213141516const person = &#123; firstName: \"Lydia\", lastName: \"Hallie\", pet: &#123; name: \"Mara\", breed: \"Dutch Tulip Hound\" &#125;, getFullName() &#123; return `$&#123;this.firstName&#125; $&#123;this.lastName&#125;`; &#125;&#125;;console.log(person.pet?.name);console.log(person.pet?.family?.name);console.log(person.getFullName?.());console.log(member.getLastName?.()); A: undefined undefined undefined undefined B: Mara undefined Lydia Hallie undefined C: Mara null Lydia Hallie null D: null ReferenceError null ReferenceError Đáp án Đáp án: BVới phép toán optional chaining ?., chúng ta sẽ không cần phải check xem giá trị phía sau nó có được phép truy cập hay có tồn tại hay không. Nếu ta cố lấy một thuộc tính của undefined hay null (nullish), biểu thức sẽ dừng lại và trả về undefined. person.pet?.name: person có thuộc tính pet: do đó person.pet không phải là một nullish. Nó có một thuộc tính name, với giá trị Mara. person.pet?.family?.name: person có thuộc tính pet: do đó person.pet không phải là nullish. Tuy nhiên pet không có thuộc tính family, nên person.pet.family là nullish. Biểu thức sẽ trả về undefined. person.getFullName?.(): person có thuộc tính getFullName: do đó person.getFullName() không phải nullish và có thể gọi ra, trả về Lydia Hallie. member.getLastName?.(): member không được định nghĩa: do đó member.getLastName() là nullish. Biểu thức trả về undefined. 120. Ouput là gì?1234567const groceries = [\"banana\", \"apple\", \"peanuts\"];if (groceries.indexOf(\"banana\")) &#123; console.log(\"We have to buy bananas!\");&#125; else &#123; console.log(`We don't have to buy bananas!`);&#125; A: We have to buy bananas! B: We don’t have to buy bananas C: undefined D: 1 Đáp án Đáp án: BTa đưa một điều kiện groceries.indexOf(&quot;banana&quot;) vào câu lệnh if. groceries.indexOf(&quot;banana&quot;) trả về 0, là một giá trị falsy. Do đó điệu kiện if sẽ chạy vào khối else và in ra We don&#39;t have to buy bananas!. 121. Ouput là gì?12345678const config = &#123; languages: [], set language(lang) &#123; return this.languages.push(lang); &#125;&#125;;console.log(config.language); A: function language(lang) { this.languages.push(lang } B: 0 C: [] D: undefined Đáp án Đáp án: DPhương thức language là một setter. Setter không mang giá trị, nhiệm vụ của nó chỉ đơn giản là thay đổi thuộc tính. Khi ta gọi một phương thức setter nó sẽ trả về undefined. 122. Output là gì?1234const name = \"Lydia Hallie\";console.log(!typeof name === \"object\");console.log(!typeof name === \"string\"); A: false true B: true false C: false false D: true true Đáp án Đáp án: Ctypeof name trả về &quot;string&quot;. Chuỗi &quot;string&quot; là một giá trị truthy, do đó !typeof name sẽ trả về một giá trị bool là false. Do đó false === &quot;object&quot; và false === &quot;string&quot; đều trả vềfalse. (Nếu chúng ta muốn check xem một kiểu dữ liệu không phải là một kiểu nào đó, chúng ta nên viết !== thay vì !typeof) 123. Output là gì?123456const add = x =&gt; y =&gt; z =&gt; &#123; console.log(x, y, z); return x + y + z;&#125;;add(4)(5)(6); A: 4 5 6 B: 6 5 4 C: 4 function function D: undefined undefined 6 Đáp án Đáp án: AHàm add trả về một arrow function, arrow function này lại trả về một arrow function khác, arrow function này lại trả về một arrow function khác nữa. Hàm đầu tiên nhận vào một tham số x với giá trị là 4 4. Chúng ta gọi hàm thứ hai, nhận vào giá trị của y là 5. Sau đó chúng ta gọi hàm thứ 3, nhận vào giá trị của z là 6. Sau đó ta truy cập các giá trị của x, y và z bên trong arrow function cuối cùng, khi này JS engine sẽ lần ngược lại scope chain để tìm các giá trị x và y tương ứng. Do đó cuối cùng nó sẽ trả về 4 5 6. 124. Output là gì?123456789101112async function* range(start, end) &#123; for (let i = start; i &lt;= end; i++) &#123; yield Promise.resolve(i); &#125;&#125;(async () =&gt; &#123; const gen = range(1, 3); for await (const item of gen) &#123; console.log(item); &#125;&#125;)(); A: Promise {1} Promise {2} Promise {3} B: Promise {&lt;pending&gt;} Promise {&lt;pending&gt;} Promise {&lt;pending&gt;} C: 1 2 3 D: undefined undefined undefined Đáp án Đáp án: CGenerator range trả về một async object với các promise tương ứng với mỗi phần tử ta đưa vào: Promise{1}, Promise{2}, Promise{3}. Ta set giá trị gen bằng với một async object để thực hiện vòng lặp for await ... of sau đó. Tiếp đó ta lại set giá trị của item bằng với giá trị trả về của mỗi promise: đầu tiên là Promise{1}, sau đó Promise{2}, sau đó Promise{3}. Do chúng ta sử dụng cú pháp async/await nên sẽ trả về giá trị đã được resolve của promise item, do đó lần lượt 1, 2, và 3 được in ra. 125. Output là gì?12345const myFunc = (&#123; x, y, z &#125;) =&gt; &#123; console.log(x, y, z);&#125;;myFunc(1, 2, 3); A: 1 2 3 B: {1: 1} {2: 2} {3: 3} C: { 1: undefined } undefined undefined D: undefined undefined undefined Đáp án Đáp án: DmyFunc nhận vào một object có các thuộc tính x, y và z làm đối số của nó. Do chúng ta đưa vào 3 số riêng biệt (1, 2, 3) chứ không phải một object với các thuộc tính x, y, z như ({x: 1, y: 2, z: 3}), nên x, y, z đều có giá trị là undefined. 126. Output là gì?123456789101112131415function getFine(speed, amount) &#123; const formattedSpeed = new Intl.NumberFormat(&#123; 'en-US', &#123; style: 'unit', unit: 'mile-per-hour' &#125; &#125;).format(speed) const formattedAmount = new Intl.NumberFormat(&#123; 'en-US', &#123; style: 'currency', currency: 'USD' &#125; &#125;).format(amount) return `The driver drove $&#123;formattedSpeed&#125; and has to pay $&#123;formattedAmount&#125;`&#125;console.log(getFine(130, 300)) A: The driver drove 130 and has to pay 300 B: The driver drove 130 mph and has to pay $300.00 C: The driver drove undefined and has to pay undefined D: The driver drove 130.00 and has to pay 300.00 Đáp án Đáp án: BVới phương thức Intl.NumberFormat, chúng ta có thể format bất cứ số nào theo định dạng ta mong muốn. Ở đây ta format giá trị 130 theo định dạng en-US, kiểu unit, đơn vị là mile-per-hour, và nó sẽ trả về 130 mph. Tiếp theo số 300 sẽ được format theo định dạng en-US, kiểu currentcy, đơn vị USD, và kết quả là $300.00. 127. Output là gì?1234const spookyItems = [\"👻\", \"🎃\", \"🕸\"];(&#123; item: spookyItems[3] &#125; = &#123; item: \"💀\" &#125;);console.log(spookyItems); A: [&quot;👻&quot;, &quot;🎃&quot;, &quot;🕸&quot;] B: [&quot;👻&quot;, &quot;🎃&quot;, &quot;🕸&quot;, &quot;💀&quot;] C: [&quot;👻&quot;, &quot;🎃&quot;, &quot;🕸&quot;, { item: &quot;💀&quot; }] D: [&quot;👻&quot;, &quot;🎃&quot;, &quot;🕸&quot;, &quot;[object Object]&quot;] Đáp án Đáp án: BKhi tiến hành cú pháp destructuring object, chúng ta có thể unpack các giá trị ở phía phải của một object, và đưa giá trị đã được unpack đó làm giá trị của thuộc tính tương ứng của object phía trái. Trong trường hợp này, ta đã gán giá trị “💀” cho spookyItems[3]. Có nghĩa là mảng spookyItems đã bị thay đổi, chúng ta đã thêm vào nó một phần tử “💀”. Do đó khi in ra thì kết quả sẽ là [&quot;👻&quot;, &quot;🎃&quot;, &quot;🕸&quot;, &quot;💀&quot;] . 128. Output là gì?12345678const name = \"Lydia Hallie\";const age = 21;console.log(Number.isNaN(name));console.log(Number.isNaN(age));console.log(isNaN(name));console.log(isNaN(age)); A: true false true false B: true false false false C: false false true false D: false true false true Đáp án Đáp án: CVới phương thức Number.isNaN, ta có thể check một giá trị có phải là dạng số và bằng NaN hay không. name không phải là một số, do đó Number.isNaN(name) sẽ trả về false. age là một số, nhưng không bằng NaN, do đó Number.isNaN(age) cũng trả về false.Với phương thức isNaN, ta đơn thuần chỉ check xem giá trị đưa vào không phải là dạng số hay không. name không phải là dạng số, nên isNaN(name) trả về true. age là số, nên isNaN(age) trả về false. 129. Output là gì?12345678const randomValue = 21;function getInfo() &#123; console.log(typeof randomValue); const randomValue = \"Lydia Hallie\";&#125;getInfo(); A: &quot;number&quot; B: &quot;string&quot; C: undefined D: ReferenceError Đáp án Đáp án: DMột biến được khai báo với từ khóa const sẽ không thể truy cập trước khi nó được khởi tạo: nó gọi là temporal dead zone. Trong hàm getInfo, giá trị randomValue sẽ được tìm kiếm đầu tiên trong scope của hàm getInfo. Tại dòng ta muốn lấy ra typeof randomValue, giá trị randomValue chưa được khởi tạo, do đó một ReferenceError sẽ được throw ra! Lưu ý nhỏ là Javascript engine sẽ không tìm kiếm ở scope khác nữa do randomValue đã được khai báo bên trong hàm getInfo. 130. Ouput là gì?1234567891011const myPromise = Promise.resolve(\"Woah some cool data\");(async () =&gt; &#123; try &#123; console.log(await myPromise); &#125; catch &#123; throw new Error(`Oops didn't work`); &#125; finally &#123; console.log(\"Oh finally!\"); &#125;&#125;)(); A: Woah some cool data B: Oh finally! C: Woah some cool data Oh finally! D: Oops didn&#39;t work Oh finally! Đáp án Đáp án: CTrong khối try, ta in ra giá trị của biến myPromise: &quot;Woah some cool data&quot;. Do không có lỗi gì xảy ra ở đây cả, nên các lệnh trong khối catch sẽ không được chạy. Tuy nhiên các lệnh trong khối finally thì sẽ luôn luôn chạy, nên &quot;Oh finally!&quot; sẽ được in ra. 131. Output là gì?123const emojis = [\"🥑\", [\"✨\", \"✨\", [\"🍕\", \"🍕\"]]];console.log(emojis.flat(1)); A: [&#39;🥑&#39;, [&#39;✨&#39;, &#39;✨&#39;, [&#39;🍕&#39;, &#39;🍕&#39;]]] B: [&#39;🥑&#39;, &#39;✨&#39;, &#39;✨&#39;, [&#39;🍕&#39;, &#39;🍕&#39;]] C: [&#39;🥑&#39;, [&#39;✨&#39;, &#39;✨&#39;, &#39;🍕&#39;, &#39;🍕&#39;]] D: [&#39;🥑&#39;, &#39;✨&#39;, &#39;✨&#39;, &#39;🍕&#39;, &#39;🍕&#39;] Đáp án Đáp án: BVới phương thức flat, ta có thể tạo một mảng mới với các phần tử đã được flattened (làm phẳng). Độ sâu của mảng đã làm phẳng sẽ phụ thuộc vào giá trị ta đưa vào. Trong trường hợp này ta đưa vào là 1 (thực ra đây là giá trị default, ta không đưa vào cũng không sao), có nghĩa là chỉ những phần tử ở độ sâu 1 sẽ được làm phẳng. Chúng là[&#39;🥑&#39;] và [&#39;✨&#39;, &#39;✨&#39;, [&#39;🍕&#39;, &#39;🍕&#39;]] trong trường hợp này. Nối lại ta sẽ có mảng mới [&#39;🥑&#39;, &#39;✨&#39;, &#39;✨&#39;, [&#39;🍕&#39;, &#39;🍕&#39;]]. 132. Output là gì?123456789101112131415161718class Counter &#123; constructor() &#123; this.count = 0; &#125; increment() &#123; this.count++; &#125;&#125;const counterOne = new Counter();counterOne.increment();counterOne.increment();const counterTwo = counterOne;counterTwo.increment();console.log(counterOne.count); A: 0 B: 1 C: 2 D: 3 Đáp án Đáp án: DcounterOne là một instance của class Counter. Trong counter class có thuộc tính count bên trong constructor, và một phương thức increment. Đầu tiên chúng ta gọi phương thức increment hai lần bằng counterOne.increment(). Nên hiện tại giá trị của counterOne.count là 2. Sau đó chúng ta có thêm một biến mới là counterTwo, và set cho nó giá trị bằng với counterOne. Do object được tương tác bằng reference, nên việc này tương ứng với ta đã tạo thêm một reference đến bộ nhớ mà biến counterOne đã trỏ vào. Do chúng có chung bộ nhớ, bất cứ thay đổi nào trên counterTwo cũng sẽ thay đổi trên counterOne. Lúc này counterTwo.count cũng sẽ là 2. Ta gọi hàm counterTwo.increment() để tăng count lên 3. Sau đó chúng ta in ra count ở counterOne, kết quả là 3. 133. Output là gì?1234567891011121314151617const myPromise = Promise.resolve(Promise.resolve(\"Promise!\"));function funcOne() &#123; myPromise.then(res =&gt; res).then(res =&gt; console.log(res)); setTimeout(() =&gt; console.log(\"Timeout!\", 0)); console.log(\"Last line!\");&#125;async function funcTwo() &#123; const res = await myPromise; console.log(await res); setTimeout(() =&gt; console.log(\"Timeout!\", 0)); console.log(\"Last line!\");&#125;funcOne();funcTwo(); A: Promise! Last line! Promise! Last line! Last line! Promise! B: Last line! Timeout! Promise! Last line! Timeout! Promise! C: Promise! Last line! Last line! Promise! Timeout! Timeout! D: Last line! Promise! Promise! Last line! Timeout! Timeout! Đáp án Đáp án: DĐầu tiên chúng ta gọi funcOne. Trong dòng đầu tiên của funcOne, chúng ta gọi myPromise, đây là một hàm bất đồng bộ. Trong khi chờ promise này hoàn thành, nó sẽ tiếp tục thực thi các dòng khác trong funcOne. Dòng tiếp theo là cũng là một hàm bất đồng bộ setTimeout, phần callback của nó sẽ được gửi tới Web API (các bạn có thể tham khảo câu hỏi trước đó để hiểu về callstack và Web API). Do cả promise và timeout đều là những hàm xử lý bất đồng bộ, nên trong khi chờ chúng hoàn thành thì các dòng tiếp theo vẫn tiếp tục được thực thi. Có nghĩa là Last line! sẽ được in ra đầu tiên, do nó là một hàm chạy đồng bộ. Và đây cũng là dòng cuối cùng của hàm funcOne, khi này promise sẽ được resolve, trả về Promise!. Tuy nhiên do ta tiếp tục gọi hàm funcTwo(), call stack của ta vẫn chưa rỗng, nên callback của setTimeout vẫn chưa thể được đưa vào callstack (vẫn đang năm ở Web API). Trong hàm funcTwo đầu tiên ta sẽ awaiting myPromise. Với từ khóa await, Ta sẽ tạm dừng thực thi cho tới khi n ào promise được resolved (hay rejected). Khi này ta sẽ in ra giá trị của res (do bản thân hàm promise lại trả về một promise). Nó sẽ in ra Promise!. Dòng tiếp theo lại là một hàm bất đồng bộ setTimeout, callback khi này tiếp tục được gửi tới Web API. Ta tiếp tục thực thi dòng cuối cùng của funcTwo, trả về Last line!. Khi này funcTwo đã làm rỗng call stack. Các callback khi nãy (() =&gt; console.log(&quot;Timeout!&quot;) từ funcOne, và () =&gt; console.log(&quot;Timeout!&quot;) từ funcTwo) lần lượt được đưa vào trong call stack. Callback đầu tiên in ra Timeout!. Callback thứ hai in ra Timeout!. Kết quả cuối cùng sẽ là Last line! Promise! Promise! Last line! Timeout! Timeout! 134. Làm thế nào có thể gọi hàm sum trong index.js từ sum.js?1234567// sum.jsexport default function sum(x) &#123; return x + x;&#125;// index.jsimport * as sum from \"./sum\"; A: sum(4) B: sum.sum(4) C: sum.default(4) D: Default aren’t imported with *, only named exports Đáp án Đáp án: CVới dấu hoa thị *, ta sẽ import tất cả những gì đã được export ra bởi file đó, cả default lẫn những hàm có tên. Nếu ta có một dòng như sau: 12345678// info.jsexport const name = \"Lydia\";export const age = 21;export default \"I love JavaScript\";// index.jsimport * as info from \"./info\";console.log(info); Thì kết quả sẽ là: 12345&#123; default: \"I love JavaScript\", name: \"Lydia\", age: 21&#125; Trong ví dụ hàm sum, nó giống với chúng ta đã import hàm sum như thế này: 1&#123; default: function sum(x) &#123; return x + x &#125; &#125; Ta có thể gọi hàm này bằng cách sử dụng sum.default 135. Output là gì?123456789const handler = &#123; set: () =&gt; console.log(\"Added a new property!\"), get: () =&gt; console.log(\"Accessed a property!\")&#125;;const person = new Proxy(&#123;&#125;, handler);person.name = \"Lydia\";person.name; A: Added a new property! B: Accessed a property! C: Added a new property! Accessed a property! D: Nothing gets logged Đáp án Đáp án: CVới Proxy object, ta có thể add thêm được các hành vi (behavior) cho object bằng cách đưa nó vào làm đối số thứ hai. Trong trường hợp này, chúng ta đưa vào object handler có hai thuộc tính: set và get. set sẽ được gọi mỗi khi ta thay đổi giá trị của thuộc tính, get sẽ được gọi mỗi khi ta truy cập giá trị của thuộc tính. Giá trị của person sẽ là đối số đầu tiên đưa vào, là một object rỗng {}. Hành vi của person là đối số thứ hai, tức handler. Do đó môi khi ta thêm thuộc tính của obejct person, set sẽ được gọi. Nếu ta truy cập thuộc tính của person thì get sẽ được gọi. Đầu tiên ra thêm vào thuộc tính name cho proxy object (person.name = &quot;Lydia&quot;). set được gọi và in ra &quot;Added a new property!&quot;. Sau đó chúng truy cập thuộc tính này, get được gọi và in ra &quot;Accessed a property!&quot;. 136. Cách nào sau đây sẽ thay đổi object person?123const person = &#123; name: \"Lydia Hallie\" &#125;;Object.seal(person); A: person.name = &quot;Evan Bacon&quot; B: person.age = 21 C: delete person.name D: Object.assign(person, { age: 21 }) Đáp án Đáp án: AVới Object.seal ta có thể ngăn thêm vào các thuộc tính mới, hay xóa đi các thuộc tính cũ. Tuy nhiên ta vẫn có thể thay đổi các thuộc tính cũ. 137. Cách nào sau đây có thể thay đổi object person?12345678const person = &#123; name: \"Lydia Hallie\", address: &#123; street: \"100 Main St\" &#125;&#125;;Object.freeze(person); A: person.name = &quot;Evan Bacon&quot; B: delete person.address C: person.address.street = &quot;101 Main St&quot; D: person.pet = { name: &quot;Mara&quot; } Đáp án Đáp án: CPhương thức Object.freeze sẽ đóng băng object. Ta không thể thêm/sửa/xóa bất kì thuộc tính nào. Tuy nhiên trên thực tế đây chỉ là đóng băng nông (shallowly) object, có nghĩa là nó chỉ đóng băng các thuộc tính trực tiếp của object mà thôi. Nếu thuộc tính lại là một object khác, như address trong trường hợp này, thuộc tính bên trong của address sẽ không bị đóng băng, và ta vẫn có thể chỉnh sửa như bình thường. 138. Output là gì?12345678const add = x =&gt; x + x;function myFunc(num = 2, value = add(num)) &#123; console.log(num, value);&#125;myFunc();myFunc(3); A: 2 4 and 3 6 B: 2 NaN and 3 NaN C: 2 Error and 3 6 D: 2 4 and 3 Error Đáp án Đáp án: AĐầu tiên, ta gọi hàm myFunc() nhưng không đưa vào đối số nào. Do đó num và value sẽ nhận các giá trị mặc định: num là 2, và value sẽ là giá trị trả về của hàm add. Với hàm add, ta đưa num vào làm đối số, tức 2. add trả về 4, đây sẽ là giá trị của value. Sau đó ta gọi hàm myFunc(3), khi này 3 sẽ là giá trị của num. Ta không đưa vào giá trị cho value. Lúc này value tiếp tục nhận giá trị mặc định: giá trị trả về của hàm add. Trong add, ta đưa vào num, khi này là 3. add sẽ trả về 6, đây sẽ là giá trị của value. 139. Output là gì?12345678910111213141516class Counter &#123; #number = 10 increment() &#123; this.#number++ &#125; getNum() &#123; return this.#number &#125;&#125;const counter = new Counter()counter.increment()console.log(counter.#number) A: 10 B: 11 C: undefined D: SyntaxError Đáp án Đáp án: DVới cú pháp ES2020, ta có thể thêm các thuộc tính private vào class bằng cách sử dụng #. Ta không thể truy cập được biến này bên ngoài class. Khi ta in ra counter.#number, một SyntaxError sẽ được throw: ta không thể truy cập từ phía ngoài class Counter! 140. Câu lệnh còn thiếu là gì?1234567891011121314151617181920const teams = [ &#123; name: \"Team 1\", members: [\"Paul\", \"Lisa\"] &#125;, &#123; name: \"Team 2\", members: [\"Laura\", \"Tim\"] &#125;];function* getMembers(members) &#123; for (let i = 0; i &lt; members.length; i++) &#123; yield members[i]; &#125;&#125;function* getTeams(teams) &#123; for (let i = 0; i &lt; teams.length; i++) &#123; // ✨ SOMETHING IS MISSING HERE ✨ &#125;&#125;const obj = getTeams(teams);obj.next(); // &#123; value: \"Paul\", done: false &#125;obj.next(); // &#123; value: \"Lisa\", done: false &#125; A: yield getMembers(teams[i].members) B: yield* getMembers(teams[i].members) C: return getMembers(teams[i].members) D: return yield getMembers(teams[i].members) Đáp án Đáp án: BTa duyệt và in ra giá trị của từng member bên trong members, mà members lại nằm bên trong mảng teams, ta cần đưa vào đối số teams[i].members cho hàm generator getMembers trong phần code thiếu. Hàm generator sẽ trả về một generator object. Để duyệt qua từng phần tử của một generator object, ta dùng từ khóa yield*. Nếu ta dùng yield, return yield, hay return, toàn bộ generator sẽ được trả về trong lần đầu tiên chúng ta gọi phương thức next. 141. Output là gì?123456789101112131415const person = &#123; name: \"Lydia Hallie\", hobbies: [\"coding\"]&#125;;function addHobby(hobby, hobbies = person.hobbies) &#123; hobbies.push(hobby); return hobbies;&#125;addHobby(\"running\", []);addHobby(\"dancing\");addHobby(\"baking\", person.hobbies);console.log(person.hobbies); A: [&quot;coding&quot;] B: [&quot;coding&quot;, &quot;dancing&quot;] C: [&quot;coding&quot;, &quot;dancing&quot;, &quot;baking&quot;] D: [&quot;coding&quot;, &quot;running&quot;, &quot;dancing&quot;, &quot;baking&quot;] Đáp án Đáp án: CHàm addHobby nhận vào hai đối số, hobby, và hobbies với giá trị default là mảng hobbies của object person. Đầu tiên chúng ta gọi hàm addHobby và đưa vào &quot;running&quot; làm giá trị cho hobby, và một mảng rỗng cho hobbies. Do chúng ta đưa vào một mảng rỗng cho hobbies, &quot;running&quot; sẽ được add vào một mảng rỗng. Sau đó chúng ta tiếp tục gọi hàm addHobby, đưa &quot;dancing&quot; vào làm giá trị cho hobby. Chúng ta không hề đưa vào giá trị nào cho hobbies, do đó nó sẽ sử dụng giá trị mặc định, tức mảng hobbies trong thuộc tính của object person. Có nghĩa là ta đã thêm dancing vào trong mảng person.hobbies. Cuối cùng chúng ta lại gọi addHobby, đưa &quot;baking&quot; vào làm giá trị cho hobby, và mảng person.hobbies làm giá trị cho hobbies. Có nghĩa là ta đã thêm baking vào trong mảng person.hobbies. Sau khi thêm dancing và baking, giá trị của person.hobbies là [&quot;coding&quot;, &quot;dancing&quot;, &quot;baking&quot;] 142. Output là gì?1234567891011121314class Bird &#123; constructor() &#123; console.log(\"I'm a bird. 🦢\"); &#125;&#125;class Flamingo extends Bird &#123; constructor() &#123; console.log(\"I'm pink. 🌸\"); super(); &#125;&#125;const pet = new Flamingo(); A: I&#39;m pink. 🌸 B: I&#39;m pink. 🌸 I&#39;m a bird. 🦢 C: I&#39;m a bird. 🦢 I&#39;m pink. 🌸 D: Nothing, we didn’t call any method Đáp án Đáp án: BChúng ta tạo ra biến pet là một instance của clas Flamingo. Khi ta tạo ra instance, constructor bên trong Flamingo sẽ được gọi. Đầu tiên, &quot;I&#39;m pink. 🌸&quot; được in ra, sau đó chúng ta gọi super(). super() sẽ gọi constructor ở class cha, tức Bird. Hàm constructor trong Bird được gọi và in ra &quot;I&#39;m a bird. 🦢&quot;. 143. Câu lệnh nào sẽ bị lỗi?123456const emojis = [\"🎄\", \"🎅🏼\", \"🎁\", \"⭐\"];/* 1 */ emojis.push(\"🦌\");/* 2 */ emojis.splice(0, 2);/* 3 */ emojis = [...emojis, \"🥂\"];/* 4 */ emojis.length = 0; A: 1 B: 1 and 2 C: 3 and 4 D: 3 Đáp án Đáp án: DTừ khóa const làm cho ta không thể định nghĩa lại giá trị của biến, nó là read-only. Tuy nhiên giá trị của bên trong nó thì không phải là bất biến. Các thuộc tính bên trong mảng emojis vẫn có thể được sửa đổi, ví dụ thêm phần tử, cắt, hoặc là đưa độ dài mảng về 0. 144. Ta cần thêm gì vào object person để khi gọi [...person] sẽ cho kết quả là [&quot;Lydia Hallie&quot;, 21]?123456const person = &#123; name: \"Lydia Hallie\", age: 21&#125;[...person] // [\"Lydia Hallie\", 21] A: Nothing, object are iterable by default B: *[Symbol.iterator]() { for (let x in this) yield* this[x] } C: *[Symbol.iterator]() { for (let x in this) yield* Object.values(this) } D: *[Symbol.iterator]() { for (let x in this) yield this } Đáp án Đáp án: CMặc định ta không thể duyệt qua được object. Trừ phi nó được cài đặt iterator protocol. Ta có thể cài đặt bằng cách thêm vào một iterator symbol [Symbol.iterator], biến nó trở thành generator object (object có thể duyệt được), ví dụ *[Symbol.iterator]() {}. Để generator này trả về được mảng các giá trị của các thuộc tính của object person, tức Object.values của object person, ta sẽ sử dụng cấu trúc yield* Object.values(this). 145. Output là gì?12345678let count = 0;const nums = [0, 1, 2, 3];nums.forEach(num =&gt; &#123; if (num) count += 1&#125;)console.log(count) A: 1 B: 2 C: 3 D: 4 Đáp án Đáp án: CCâu lệnh if trong vòng lập forEach kiểm tra giá trị của num là truthy hay falsy. Vì số đầu tiên trong mảng nums là 0, giá trị falsy, code trong câu lệnh if sẽ không chạy. count chỉ tăng giá trị đối với 3 số còn lại trong mảng nums, 1, 2 và 3. Vì giá trị của count tăng thêm 1 trong 3 lần, giá trị của count sẽ là 3. 146. Output là gì?1234567function getFruit(fruits) &#123; console.log(fruits?.[1]?.[1])&#125;getFruit([['🍊', '🍌'], ['🍍']])getFruit()getFruit([['🍍'], ['🍊', '🍌']]) A: null, undefined, 🍌 B: [], null, 🍌 C: [], [], 🍌 D: undefined, undefined, 🍌 Đáp án Đáp án: DPhép toán ? cho phép ta truy cập giá trị bên trong của object. Chúng ta thử in ra phần tử có thứ tự là 1 trong mảng con với thứ tự là 1 trong mảng fruits. Nếu mảng con với thứ tự là 1 trong mảng fruits không tồn tại, nó sẽ trả về undefined. Nếu mảng con với thứ tự là 1 trong mảng fruits tồn tại, nhưng mảng con này không có phần tử nào mang thứ tự 1, nó cũng sẽ trả về undefined. Trước tiên, chúng ta thử in ra phần tử thứ hai trong mảng con [&#39;🍍&#39;] của [[&#39;🍊&#39;, &#39;🍌&#39;], [&#39;🍍&#39;]]. Mảng con này chỉ chứa một phần tử, nghĩa là không có phần tử nào với thứ tự là 1, và trả về undefined. Sau đó, ta gọi hàm getFruits khi không truyền vào một đối số nào, nghĩa là fruits có giá trị mặc định là undefined. Vì ta truyền phần tử mang thứ tự 1 của fruits, nó trả về undefined do phần tử này không tồn tại. Cuối cùng, ta thử in ra phần tử thứ hai trong mảng con [&#39;🍊&#39;, &#39;🍌&#39;] của mảng [&#39;🍍&#39;], [&#39;🍊&#39;, &#39;🍌&#39;]. Phần tử mang thứ tự 1 bên trong mảng con này là 🍌 sẽ được in ra. 147. Output là gì?1234567891011121314class Calc &#123; constructor() &#123; this.count = 0 &#125; increase() &#123; this.count ++ &#125;&#125;const calc = new Calc()new Calc().increase()console.log(calc.count) A: 0 B: 1 C: undefined D: ReferenceError Đáp án Đáp án: ATa set biến calc bằng một instance mới của Calc class. Sau đó ta tạo ra instance mới của Calc và gọi increase hàm trên instance đó. Vì thuộc tính count nằm trong constructor của Calc class, thuộc tính count không được sử dụng trên prototype của Calc. Điều này nghĩa là giá trị của count chưa được thay đổi cho instance mà calc trỏ vào, giá trị của count vẫn là 0. 148. Output là gi?1234567891011121314151617181920const user = &#123; email: \"e@mail.com\", password: \"12345\"&#125;const updateUser = (&#123; email, password &#125;) =&gt; &#123; if (email) &#123; Object.assign(user, &#123; email &#125;) &#125; if (password) &#123; user.password = password &#125; return user&#125;const updatedUser = updateUser(&#123; email: \"new@email.com\" &#125;)console.log(updatedUser === user) A: false B: true C: TypeError D: ReferenceError Đáp án Đáp án: BHàm updateUser thay đổi các giá trị của thuộc tính email và password của user, nếu các giá trị của chúng được truyền vào hàm sau và sau đó hàm trả về user object. Giá trị trả về của hàm updateUser là user object, tức là giá trị của updateUser là trỏ đến cùng một user object mà user trỏ vào. updatedUser === user bằng true. 149. Output là gi?1234567const fruit = ['🍌', '🍊', '🍎']fruit.slice(0, 1)fruit.splice(0, 1)fruit.unshift('🍇')console.log(fruit) A: [&#39;🍌&#39;, &#39;🍊&#39;, &#39;🍎&#39;] B: [&#39;🍊&#39;, &#39;🍎&#39;] C: [&#39;🍇&#39;, &#39;🍊&#39;, &#39;🍎&#39;] D: [&#39;🍇&#39;, &#39;🍌&#39;, &#39;🍊&#39;, &#39;🍎&#39;] Đáp án Đáp án: CTrước tiên, ta gọi hàm slice trên mảng fruit. Hàm slice không thay đổi mảng ban đầu nhưng sẽ trả về giá trị mà nó cắt từ mảng đó: banana emoji. Sau đó ta gọi hàm splice trên mảng fruit. Hàm splice sẽ thay đổi mảng ban đầu, nghĩa là mảng fruit bây giờ sẽ bao gồm [&#39;🍊&#39;, &#39;🍎&#39;]. Cuối cùng, ta gọi mảng unshift trên mảng fruit để thay đổi mảng ban đầu bằng cách cộng thêm giá trị được đưa ra, trong trường hợp này là ‘🍇’, phần tử đầu tiên của mảng. Mảng fruit bây giờ bao gồm [‘🍇’, ‘🍊’, ‘🍎’]`. 150. Output là gì?12345678const animals = &#123;&#125;;let dog = &#123; emoji: '🐶' &#125;let cat = &#123; emoji: '🐈' &#125;animals[dog] = &#123; ...dog, name: \"Mara\" &#125;animals[cat] = &#123; ...cat, name: \"Sara\" &#125;console.log(animals[dog]) A: { emoji: &quot;🐶&quot;, name: &quot;Mara&quot; } B: { emoji: &quot;🐈&quot;, name: &quot;Sara&quot; } C: undefined D: ReferenceError Đáp án Đáp án: BCác keys của object được chuyển thành các chuỗi. Do giá trị của dog là một object, animals[dog] thực sự nghĩa là ta tạo ra một thuộc tính mới gọi là &quot;object Object&quot; bằng với object mới. animals[&quot;object Object&quot;] lúc này bằng với { emoji: &quot;🐶&quot;, name: &quot;Mara&quot;}. cat cũng là một object, nên animals[cat] thực sự nghĩa là ta thay đổi giá trị của animals[``&quot;``object Object``&quot;``] bằng thuộc tính cat mới. Khi in ra animals[dog], hoặc thực chất là animals[&quot;object Object&quot;] vì thay dog object bằng một chuỗi thì nó trả về &quot;object Object&quot;, ta nhận được { emoji: &quot;🐈&quot;, name: &quot;Sara&quot; }. 151. Output là gì?123456789const user = &#123; email: \"my@email.com\", updateEmail: email =&gt; &#123; this.email = email &#125;&#125;user.updateEmail(\"new@email.com\")console.log(user.email) A: my@email.com B: new@email.com C: undefined D: ReferenceError Đáp án Đáp án: AHàm updateEmail là một cú pháp arrow function và nó không gắn với user object. Điều này cho thấy từ khoá this không trỏ tới user object mà trỏ tới global scope. Giá trị của email trong user object không thay đổi. Khi ta in ra giá trị của user.email, nó trả về giá trị ban đầu của my@email.com. 152. Output là gì?1234567891011121314const promise1 = Promise.resolve('First')const promise2 = Promise.resolve('Second')const promise3 = Promise.reject('Third')const promise4 = Promise.resolve('Fourth')const runPromises = async () =&gt; &#123; const res1 = await Promise.all([promise1, promise2]) const res2 = await Promise.all([promise3, promise4]) return [res1, res2]&#125;runPromises() .then(res =&gt; console.log(res)) .catch(err =&gt; console.log(err)) A: [[&#39;First&#39;, &#39;Second&#39;], [&#39;Fourth&#39;]] B: [[&#39;First&#39;, &#39;Second&#39;], [&#39;Third&#39;, &#39;Fourth&#39;]] C: [[&#39;First&#39;, &#39;Second&#39;]] D: &#39;Third&#39; Đáp án Đáp án: DHàm Promise.all trả về những promise truyền vào song song nhau. Nếu một promise thất bại, hàm Promise.all rejects với giá trị của promise đó. Trong trường hợp này, promise3 bị reject với giá trị &quot;Third&quot;. Ta đang kiểm tra giá trị bị reject trong chuỗi hàm catch khi goi hàm runPromises để tìm ra lỗi trong hàm runPromises. Chỉ có &quot;Third&quot; được trả về vì promise3 reject giá trị này. 153. Giá trị nào của method sẽ được trả về với log { name: &quot;Lydia&quot;, age: 22 }?1234567const keys = [\"name\", \"age\"]const values = [\"Lydia\", 22]const method = /* ?? */Object[method](keys.map((_, i) =&gt; &#123; return [keys[i], values[i]]&#125;)) // &#123; name: \"Lydia\", age: 22 &#125; A: entries B: values C: fromEntries D: forEach Đáp án Đáp án: CHàm fromEntries trả về một mảng 2d trong một object. Phần tử đầu tiên trong từng mảng con sẽ là từ khoá và phần tử thứ hai trong từng mảng con sẽ là giá trị. Trong trường hợp này, ta tiến hành map qua mảng keys, nó sẽ trả về một mảng mà phần tử đầu tiên của mảng đó là phần tử trên thứ tự hiện tại của mảng key, và phần tử thứ hai của mảng đó là phần tử trên thứ tự hiện tại của mảng values. Theo như trên thì ta tạo ra một mảng gồm những mảng con chứa đựng những từ khoá và giá trị đúng, và nó trả về { name: &quot;Lydia&quot;, age: 22 }. 154. Output là gì?123456789101112const createMember = (&#123; email, address = &#123;&#125;&#125;) =&gt; &#123; const validEmail = /.+\\@.+\\..+/.test(email) if (!validEmail) throw new Error(\"Valid email pls\") return &#123; email, address: address ? address : null &#125;&#125;const member = createMember(&#123; email: \"my@email.com\" &#125;)console.log(member) A: { email: &quot;my@email.com&quot;, address: null } B: { email: &quot;my@email.com&quot; } C: { email: &quot;my@email.com&quot;, address: {} } D: { email: &quot;my@email.com&quot;, address: undefined } Đáp án Đáp án: CGiá trị mặc định của address là một object rỗng {}. Khi ta cho biến member bằng với object được trả về bởi hàm createMember, ta đã không truyền vào một giá trị của address, nghĩa là giá trị của address là object rỗng {} được mặc định. Object rỗng mang giá trị truthy, tức là điều kiện address ? address : null trả về true. Giá trị của address là một object rỗng {}. 155. Output là gì?12345678let randomValue = &#123; name: \"Lydia\" &#125;randomValue = 23if (!typeof randomValue === \"string\") &#123; console.log(\"It's not a string!\")&#125; else &#123; console.log(\"Yay it's a string!\")&#125; A: It&#39;s not a string! B: Yay it&#39;s a string! C: TypeError D: undefined Đáp án Đáp án: BĐiều kiện trong mệnh đề if kiểm tra xem giá trị của !typeof randomValue bằng với &quot;string&quot; hay không. Phép toán ! chuyển giá trị đó thành giá trị boolean. Nếu giá trị là truthy, giá trị trả về sẽ là false, nếu giá trị là falsy, giá trị trả về sẽ là true. Trong trường hợp này, giá trị trả về của typeof randomValue là giá trị truthy &quot;number&quot;, nghĩa là giá trị của !typeof randomValue là một giá trị boolean false. !typeof randomValue === &quot;string&quot; luôn trả về false, vì ta thực sự đang kiểm tra false === &quot;string&quot;. Vì điều kiện đã trả về false, code của mệnh đề else sẽ chạy và Yay it&#39;s a string! được in ra.","categories":[],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://phamtuananh1996.github.io/tags/javascript/"}]},{"title":"Kiểm tra chịu tải của server với K6.io (Phần 2 InfluxDB + Grafana)","slug":"kiem-tra-chiu-tai-cua-server-voi-k6io-phan-2","date":"2021-11-25T09:37:46.000Z","updated":"2024-01-04T00:39:10.962Z","comments":true,"path":"2021/11/25/kiem-tra-chiu-tai-cua-server-voi-k6io-phan-2/","link":"","permalink":"https://phamtuananh1996.github.io/2021/11/25/kiem-tra-chiu-tai-cua-server-voi-k6io-phan-2/","excerpt":"","text":"Mở đầuỞ phần trước mình đã giới thiệu sơ qua về kiểm tra chịu tải của server với k6.io, cách settup , visualization kết quả với cloud k6 tuy nhiên do dùng bản miễn phí nên vẫn còn nhiều giới hạn ví dụ chỉ có thể visualization được 50 user trong 12 phút. Muốn nhiều hơn chúng ta phải trả phí. vì vậy hôm nay mình viết tiếp phần 2 hướng dẫn visualization kết quả hoàn toàn miễn phí mà không bị giới hạn với InfluxDB + Grafana. Các bạn có thể xem qua phần 1 ở đây:Kiểm tra chịu tải của server với K6.io (Phần 1) InfluxDBInfluxDB là một cơ sở dữ liệu chuỗi thời gian nguồn mở được phát triển bởi InfluxData. Ở bài viết này sẽ dùng với mục đích lưu lại các thông số mà k6 thu thập được từ việc chạy test. Những tính năng chính mà Influxdb hỗ trợ có thể kể đến như : Có các API đọc ghi dễ hiểu, hiệu suất cao Plugin hỗ trợ cho các giao thức nhập dữ liệu khác như Graphite, collectd và OpenTSDB (Phần này trong khuôn khổ bài viết mình chưa thể thực nghiệm) Câu query tương đồng với SQL do đó rất dễ để những người đã có base về SQL ứng dụng Đánh index theo các trường tags giúp truy vấn tốc độ. Các truy vấn liên tục tự động tính toán dữ liệu tổng hợp để làm cho các truy vấn thường xuyên hiệu quả hơn. Và cuối cùng thì Influxdb có cả mã nguồn mở và phiên bản cho enterprise Cái đặt InfluxDBLinux (Debian/Ubuntu)1$ sudo apt install influxdb macOS1$ brew install influxdb Chạy k6 test và upload kết quả vào InfluxDBk6 có hỗ trợ tích hợp để xuất dữ liệu kết quả trực tiếp tới cơ sở dữ liệu InfluxDB bằng cách sử dụng option –out (-o) Linux &amp; MacOS1k6 run --out influxdb&#x3D;http:&#x2F;&#x2F;localhost:8086&#x2F;myk6db script.js Docker1docker run -i loadimpact&#x2F;k6 run --out influxdb&#x3D;http:&#x2F;&#x2F;localhost:8086&#x2F;myk6db - &lt;script.js GrafanaGrafana là một nền tảng open-source chuyên phục vụ mục đích theo dõi và đánh giá các số liệu thu được. Bất kì lĩnh vực nào có thể thu được dữ liệu theo dòng thời gian đều có thể hiển thị tối ưu trên Grafana. Ngoài khả năng kết nối đa dạng với các nguồn dữ liệu, phần giao diện của công cụ này rất thân thiền với người dùng. Dễ dàng đưa ra thông tin và cảnh báo. Cài đặt Grafana1$ sudo apt install grafana macOS1$ brew install grafana Sau khi cài đặt xong grafana chúng ta đã có InfluxDB server chạy ở cổng 8086 và Grafana server chạy ở cổng 3000. Tiếp theo chúng ta có thể visualize k6 metrics rồi. Sử dụng docker-compose được settup sẵnĐể thay thế các cài đặt bên trên, thì k6 cũng đã xây dựng sẵn file docker-composer giúp cài đặt nhanh chóng InfluxDB và Grafana. Để sử dụng chỉ cần chạy lệnh: 12345$ git clone &#39;https:&#x2F;&#x2F;github.com&#x2F;k6io&#x2F;k6&#39;$ cd k6$ docker-compose up -d \\ influxdb \\ grafana Truy cập vào Grafana server http://localhost:3000 Vậy là ok rồi . tiếp theo là chạy test và visualize metrics.Để chạy test thì mình cd vào thư mục k6/samples vào tạo file test với nội dùng sau: 123456789101112131415161718192021import http from &#39;k6&#x2F;http&#39;;import &#123; sleep &#125; from &#39;k6&#39;;export let options &#x3D; &#123; stages: [ &#123; duration: &#39;2m&#39;, target: 100 &#125;, &#x2F;&#x2F; below normal load &#123; duration: &#39;5m&#39;, target: 100 &#125;, &#123; duration: &#39;2m&#39;, target: 200 &#125;, &#x2F;&#x2F; normal load &#123; duration: &#39;5m&#39;, target: 200 &#125;, &#123; duration: &#39;2m&#39;, target: 300 &#125;, &#x2F;&#x2F; around the breaking point &#123; duration: &#39;5m&#39;, target: 300 &#125;, &#123; duration: &#39;2m&#39;, target: 400&#125;, &#x2F;&#x2F; beyond the breaking point &#123; duration: &#39;5m&#39;, target: 400&#125;, &#123; duration: &#39;10m&#39;, target: 0 &#125;, &#x2F;&#x2F; scale down. Recovery stage. ],&#125;;export default function () &#123; http.get(&#39;https:&#x2F;&#x2F;phamtuananh1996.github.io&#39;); sleep(1);&#125; Để chạy test dùng lệnh 123docker-compose run -v \\ $PWD&#x2F;samples:&#x2F;scripts \\ k6 run &#x2F;scripts&#x2F;blog.js Để visualize metrics thì mình sẽ dùng Grafana dashboards được cấu hình sẵn cho k6 được cộng đồng phát triển như: dcadwallader Stian Øvrevåge cyaiox smockvavelsky K m Để sử dụng mình vào http://localhost:3000/dashboard/import để thêm id. Sau đó chọn InfluxDB data source Sau khi chạy test đây là thành quả Vậy là chúng ta có thể visualize k6 metrics với giao diện trực quan và realtime rồi Kết luậnCảm ơn các bạn đã đọc bài viết. nếu hay thì cho mình xin 1 upvote, chia sẻ nhé. Tham khảo: https://k6.io/docs/results-visualization/influxdb-+-grafana blog: https://phamtuananh1996.github.io","categories":[],"tags":[{"name":"server","slug":"server","permalink":"https://phamtuananh1996.github.io/tags/server/"},{"name":"performence","slug":"performence","permalink":"https://phamtuananh1996.github.io/tags/performence/"},{"name":"test","slug":"test","permalink":"https://phamtuananh1996.github.io/tags/test/"},{"name":"k6.io","slug":"k6-io","permalink":"https://phamtuananh1996.github.io/tags/k6-io/"}]},{"title":"Kiểm tra chịu tải của server với K6.io (Phần 1)","slug":"kiem-tra-chiu-tai-cua-server-voi-k6io-phan-1","date":"2021-11-25T09:35:33.000Z","updated":"2024-01-04T00:39:10.962Z","comments":true,"path":"2021/11/25/kiem-tra-chiu-tai-cua-server-voi-k6io-phan-1/","link":"","permalink":"https://phamtuananh1996.github.io/2021/11/25/kiem-tra-chiu-tai-cua-server-voi-k6io-phan-1/","excerpt":"","text":"Lời mở đầuĐể có được một sản phẩm phần mềm tốt việc test performance là việc hết sức quan trọng để xác định độ ổn định của hệ thống, Để test được hắn một mình bạn không thể gửi request bằng cơm để test chịu tải của server được, vì vậy các công cụ hỗ trợ test chịu tải của server ra đời để giúp cho chúng ta đỡ vất vả hơn phần nào. Cũng có rẩt nhiều công cụ hỗ trợ cho việc test này như Artillery, Jmeter …. Trong bài viết này chúng ta hãy cùng đi tìm hiểu về 1 công cụ mình mới được khai sáng, đó chính là K6.io Cài đặtK6.io phát hành các gói cài đặt và sử dụng trên rất nhiều hệ điều hành, hệ thống như linux, mac, window, docker…. Linux (Debian/Ubuntu)1234$ sudo apt-key adv --keyserver hkp:&#x2F;&#x2F;keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69$ echo &quot;deb https:&#x2F;&#x2F;dl.k6.io&#x2F;deb stable main&quot; | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;k6.list$ sudo apt-get update$ sudo apt-get install k6 Mac (brew)Sử dụng brew 1$ brew install k6 Windows (MSI installer)1$ Download the k6 installer: https:&#x2F;&#x2F;dl.bintray.com&#x2F;loadimpact&#x2F;windows&#x2F;k6-latest-amd64.msi Nếu bạn dùng Chocolatey package manager . Bạn có thể cài đặt k6 bằng cách sau: 1$ choco install k6 Docker1$ docker pull loadimpact&#x2F;k6 Ở bài viết này mình sẽ dùng docker để cài đặt. Kiểm tra versionĐể xem cài đặt thành công k6 hay chưa dùng lệnh: 12$ k6 version# k6 v0.31.1 (2021-03-17T13:23:23+0000&#x2F;e9d8349, go1.15.8, linux&#x2F;amd64) Vậy là cài đặt thành công !!!! Kiểm tra độ chịu tải với k6Running k6Vì k6 sử dụng file javascript để chạy test nên khá dễ dàng tiếp cận. Chúng ta tạo một file với tên homepage.js đơn giản với nội dung sau: 123456789101112import http from 'k6/http';import &#123; sleep &#125; from 'k6';export let options = &#123; VUs: 10, duration: '30s',&#125;;export default function() &#123; http.get('https://phamtuananh1996.github.io'); sleep(1);&#125; Ở đây mình khai báo VUs = 10 và duration = 30 giây có nghĩa là quá trình test sẽ mô tả 10 user vào website https://phamtuananh1996.github.io trong vòng 30 giây (VUs viết tắt của virtual user) Tiến hành chạy test: 1$ k6 run homepage.js Hoặc chạy với docker: 1docker run -i loadimpact&#x2F;k6 run - &lt;homepage.js sau khi chạy xong k6 sẽ tổng hợp số liệu như sau: 1234567891011121314data_received..............: 148 MB 2.5 MB&#x2F;sdata_sent..................: 1.0 MB 17 kB&#x2F;shttp_req_blocked...........: avg&#x3D;1.92ms min&#x3D;1µs med&#x3D;5µs max&#x3D;288.73ms p(90)&#x3D;11µs p(95)&#x3D;17µshttp_req_connecting........: avg&#x3D;1.01ms min&#x3D;0s med&#x3D;0s max&#x3D;166.44ms p(90)&#x3D;0s p(95)&#x3D;0shttp_req_duration..........: avg&#x3D;143.14ms min&#x3D;112.87ms med&#x3D;136.03ms max&#x3D;1.18s p(90)&#x3D;164.2ms p(95)&#x3D;177.75mshttp_req_receiving.........: avg&#x3D;5.53ms min&#x3D;49µs med&#x3D;2.11ms max&#x3D;1.01s p(90)&#x3D;9.25ms p(95)&#x3D;11.8mshttp_req_sending...........: avg&#x3D;30.01µs min&#x3D;7µs med&#x3D;24µs max&#x3D;1.89ms p(90)&#x3D;48µs p(95)&#x3D;63µshttp_req_tls_handshaking...: avg&#x3D;0s min&#x3D;0s med&#x3D;0s max&#x3D;0s p(90)&#x3D;0s p(95)&#x3D;0shttp_req_waiting...........: avg&#x3D;137.57ms min&#x3D;111.44ms med&#x3D;132.59ms max&#x3D;589.4ms p(90)&#x3D;159.95ms p(95)&#x3D;169.41mshttp_reqs..................: 13491 224.848869&#x2F;siteration_duration.........: avg&#x3D;445.48ms min&#x3D;413.05ms med&#x3D;436.36ms max&#x3D;1.48s p(90)&#x3D;464.94ms p(95)&#x3D;479.66msiterations.................: 13410 223.498876&#x2F;svus........................: 100 min&#x3D;100 max&#x3D;100vus_max....................: 100 min&#x3D;100 max&#x3D;100 Vậy là đã chạy ok rồi. Các thông số mình sẽ giải thích ở phần dưới nhé. Đây chỉ là 1 case đơn giản. Trên thực tế thì phức tạp hơn trong thực tế thì user thường tương tác với Server theo một kịch bản chứ không chỉ đơn thuần là gửi request, hay số lượng user sẽ tăng lên hay giảm đi. Stages: ramping up/down VUsBạn cũng có thể tăng và giảm số lượng VUs trong quá trình kiểm tra. Chúng ta có thể config ở options.stages 123456789101112131415161718192021import http from 'k6/http';import &#123; sleep &#125; from 'k6';export let options = &#123; stages: [ &#123; duration: '2m', target: 100 &#125;, // below normal load &#123; duration: '5m', target: 100 &#125;, &#123; duration: '2m', target: 200 &#125;, // normal load &#123; duration: '5m', target: 200 &#125;, &#123; duration: '2m', target: 300 &#125;, // around the breaking point &#123; duration: '5m', target: 300 &#125;, &#123; duration: '2m', target: 400 &#125;, // beyond the breaking point &#123; duration: '5m', target: 400 &#125;, &#123; duration: '10m', target: 0 &#125;, // scale down. Recovery stage. ],&#125;;export default function() &#123; http.get('https://phamtuananh1996.github.io'); sleep(1);&#125; Ở đây thì mình có tăng số lượng user (target) lên dần dần và thời gian (duration) cũng tăng dần dần và đột ngột giảm user về 0 nhắm kiểm tra độ chịu tải của server (Stress Test) Results visualization với Cloud k6k6.io cũng cung cấp cho chúng ta cloud để thực hiện việc test và kiểm tra kết quả bằng hình ảnh trực quan, hoặc bạn cũng có thể chạy test dưới local sau đó stream result lên k6 Cloud. k6.io cho người dùng dùng thử chỉ bằng cách đăng ký tài khoản bằng gmail hoặc github. Với mỗi tài khoản, người dùng có thể thực hiện miễn phí 50 lượt test. Ngoài ra còn giới hạn những thông số cấu hình cho các loại test. Ở đây mình sử dụng gmail để đăng nhập. Đây là giao diện dashboard khi đăng nhập xong. Ở giao diện này, sẽ có 2 lựa chọn để tạo test là Test builder và Script editor. Test builder cho phép chúng ta tạo test bằng giao diện trực quan, còn Script editor cho phép chúng ta tạo các đoạn script bằng js và chạy trên nền cloud. Script editorK6 Cloud cũng cấp luôn cho chúng ta 1 trình soạn thảo và đoạn code mẫu việc của chúng ta là copy đoạn code bên trên và paste vào thôi. sau khi xong ấn vào run . vì Hiện tại mình đang là free user, nên tối đa có thể chạy với 50 VUs và 12 phút vì thế mình điều chỉnh đoạn code test của mình xuống như sau: 123456789101112131415161718192021import http from 'k6/http';import &#123; sleep &#125; from 'k6';export let options = &#123; stages: [ &#123; duration: '2s', target: 10 &#125;, // below normal load &#123; duration: '5s', target: 10 &#125;, &#123; duration: '2s', target: 20 &#125;, // normal load &#123; duration: '5s', target: 20 &#125;, &#123; duration: '2s', target: 30 &#125;, // around the breaking point &#123; duration: '5s', target: 30 &#125;, &#123; duration: '2s', target: 40 &#125;, // beyond the breaking point &#123; duration: '5s', target: 40 &#125;, &#123; duration: '10s', target: 0 &#125;, // scale down. Recovery stage. ],&#125;;export default function () &#123; http.get('https://phamtuananh1996.github.io'); sleep(1);&#125; Đợi sau khi chạy xong ta sẽ có giao diện sau, cũng là giao diện cuối khi hoàn thành test: Ở giao diện này, ta có thể thấy được rất nhiều các thông số như các biểu đồ về VUs, request, hiển thị lỗi, metrics… Như ở đây mình thấy với 40 user hoạt động cùng lúc trong vòng 5s thì website vẫn không vấn đề gì và hoạt động bình thường . Cloud tests from the CLIChúng ta cũng có thể chạy test trên local thông qua CLI và upload kết quả đó lên cloud để có thể theo dõi trực quan hơn băng biểu đồ, hình ảnh do cloud cung cấp. Đầu tiên phải đăng nhâp k6 cloud từ cli: Đăng nhập bằng username và password: 1$ k6 login cloud Đăng nhập bằng API Token: 1$ k6 login cloud --token &lt;YOUR_K6_CLOUD_API_TOKEN&gt; Để lấy được API Token sau khi đăng nhập chúng ta có thể vào https://app.k6.io/account/api-token để lấy. Chạy kịch bản test trên local và stream lên cloud k6: 1$ k6 cloud script.js Sau khi chạy xong sẽ có 1 số thông tin và 1 đường dẫn url đến trang xem kết quả test trên cloud (output): 123456789 &#x2F;\\ |‾‾| &#x2F;‾‾&#x2F; &#x2F;‾&#x2F; &#x2F;\\ &#x2F; \\ | |_&#x2F; &#x2F; &#x2F; &#x2F; &#x2F; \\&#x2F; \\ | | &#x2F; ‾‾\\ &#x2F; \\ | |‾\\ \\ | (_) |&#x2F; __________ \\ |__| \\__\\ \\___&#x2F; .ioexecution: cloudscript: script.jsoutput: https:&#x2F;&#x2F;app.k6.io&#x2F;runs&#x2F;TEST_RUN_ID Bạn có thể điều hướng đến url đó để xem kết quả test một cách trực quan: Results outputSau khi chay test local xong bạn sẽ thấy các thông số này: 1234567891011121314data_received..............: 148 MB 2.5 MB&#x2F;sdata_sent..................: 1.0 MB 17 kB&#x2F;shttp_req_blocked...........: avg&#x3D;1.92ms min&#x3D;1µs med&#x3D;5µs max&#x3D;288.73ms p(90)&#x3D;11µs p(95)&#x3D;17µshttp_req_connecting........: avg&#x3D;1.01ms min&#x3D;0s med&#x3D;0s max&#x3D;166.44ms p(90)&#x3D;0s p(95)&#x3D;0shttp_req_duration..........: avg&#x3D;143.14ms min&#x3D;112.87ms med&#x3D;136.03ms max&#x3D;1.18s p(90)&#x3D;164.2ms p(95)&#x3D;177.75mshttp_req_receiving.........: avg&#x3D;5.53ms min&#x3D;49µs med&#x3D;2.11ms max&#x3D;1.01s p(90)&#x3D;9.25ms p(95)&#x3D;11.8mshttp_req_sending...........: avg&#x3D;30.01µs min&#x3D;7µs med&#x3D;24µs max&#x3D;1.89ms p(90)&#x3D;48µs p(95)&#x3D;63µshttp_req_tls_handshaking...: avg&#x3D;0s min&#x3D;0s med&#x3D;0s max&#x3D;0s p(90)&#x3D;0s p(95)&#x3D;0shttp_req_waiting...........: avg&#x3D;137.57ms min&#x3D;111.44ms med&#x3D;132.59ms max&#x3D;589.4ms p(90)&#x3D;159.95ms p(95)&#x3D;169.41mshttp_reqs..................: 13491 224.848869&#x2F;siteration_duration.........: avg&#x3D;445.48ms min&#x3D;413.05ms med&#x3D;436.36ms max&#x3D;1.48s p(90)&#x3D;464.94ms p(95)&#x3D;479.66msiterations.................: 13410 223.498876&#x2F;svus........................: 100 min&#x3D;100 max&#x3D;100vus_max....................: 100 min&#x3D;100 max&#x3D;100 Mỗi thông số http_req đều có các thông số (avg, min. max, med, p(90), p(95)) http_req_blocked: Thời gian VU dành để chờ được phân bổ kết nối TCP từ nhóm kết nối. http_req_connecting: Thời gian VU dành để thiết lập kết nối TCP đến máy chủ từ xa http_req_duration: Thời gian thực hiện tra cứu DNS. http_req_receiving: Thời gian nhận được trả lời từ máy chủ từ xa. http_req_sending: Thời gian dành để truyền các yêu cầu HTTP đến máy chủ từ xa. http_req_tls_handshaking: thời gian máy khách và máy chủ, xác nhận lẫn nhau và bắt đầu giao tiếp http_req_waiting: Thời gian chờ đợi phản hồi trở lại từ máy chủ từ xa (sau khi đã gửi yêu cầu). http_reqs: Tổng số yêu cầu HTTP được thực hiện trong toàn bộ thử nghiệm iteration_duration: Tổng thời gian cho yêu cầu. (http_req_sending + http_req_waiting + http_req_receiving) iterations: Tổng số lần tất cả các VU trong thử nghiệm được quản lý để chạy qua hàm default (). vus: Có bao nhiêu VU thử nghiệm được cấu hình để mô phỏng. vus_max: Số lượng vị trí VU được phân bổ trước mà thử nghiệm được định cấu hình (vus_max cho phép bạn mở rộng số lượng VU trong thử nghiệm để tối đa số lượng đó). Kết luậnTrên đây mình có giới thiệu sơ lược về kiểm trả perfomance bằng k6.io và sử dụng cloud k6 để test và visualization kết quả. Nhưng vì dùng bản miễn phí nên bị giới hạn khá nhiều. Bài sau mình sẽ viết về việc dùng InfluxDB + Grafana để hiển thị kết qủa test miễn phí. blog: https://phamtuananh1996.github.io/ Tham khảo: https://k6.io/docs/","categories":[],"tags":[{"name":"server","slug":"server","permalink":"https://phamtuananh1996.github.io/tags/server/"},{"name":"performence","slug":"performence","permalink":"https://phamtuananh1996.github.io/tags/performence/"},{"name":"test","slug":"test","permalink":"https://phamtuananh1996.github.io/tags/test/"},{"name":"k6.io","slug":"k6-io","permalink":"https://phamtuananh1996.github.io/tags/k6-io/"}]},{"title":"Hướng dẫn người dùng ngay trên chính website của bạn với vue-tour","slug":"huong-dan-nguoi-dung-ngay-tren-chinh-website-cua-ban-voi-vue-tour","date":"2021-11-25T09:33:43.000Z","updated":"2024-01-04T00:39:10.962Z","comments":true,"path":"2021/11/25/huong-dan-nguoi-dung-ngay-tren-chinh-website-cua-ban-voi-vue-tour/","link":"","permalink":"https://phamtuananh1996.github.io/2021/11/25/huong-dan-nguoi-dung-ngay-tren-chinh-website-cua-ban-voi-vue-tour/","excerpt":"","text":"Mở đầuKhi phát triển một ứng dụng website thì có rất nhiều thứ chúng ta cần quan tâm tới như ngôn ngữ, công nghệ, logic, performance, …. rất dễ bị cuốn vào các thứ đó mà lại quên đi một vài thứ nhỏ nhặt nhưng cũng quan trọng không kém là viết Guide thứ mà giúp cho người dùng biết cách sử dụng ứng dụng. Cách thường thấy để viết hướng dẫn sự dụng phần mềm là dùng file doc, pdf, hoặc đến tận nơi cầm tay chỉ chuột. Nay mình sẽ giới thiệu một super-simple library có thể thực hiện điều đó một cách đơn giản với vue-tour DependenciesVì là library của vue nên nếu chưa có project vue thì bạn có thể dùng vue-cli để init project vue nhanh chóng với lệnh: 1$ vue create my-new-project Sau đó có thể install vue-tour băng cách sử sụng npm hoặc yarn 1234$ npm install vue-tour# or with Yarn:$ yarn add vue-tour Set UpThêm plugin và load css ở file main.js 1234567891011import Vue from &#39;vue&#39;import App from &#39;.&#x2F;App.vue&#39;import VueTour from &#39;vue-tour&#39;require(&#39;vue-tour&#x2F;dist&#x2F;vue-tour.css&#39;)Vue.use(VueTour)new Vue(&#123; render: h &#x3D;&gt; h(App)&#125;).$mount(&#39;#app&#39;) Cuối cùng thì chúng ta có thể dùng component &lt;vue-tour :steps=&quot;steps&quot; /&gt; ở bất kỳ đâu trong ứng dụng với prop của nó là một mảng các bước hướng dẫn step by step UsageCó bốn bước để sử dụng vue-tour Đầu tiên: Thêm unique class hoặc thuộc tính properties vào element mà bạn muốn target tới để hướng dẫn. Bước hai: Khai báo các bước dùng mà bạn muốn hướng dẫn ngưới dùng thông qua một array các object mỗi object là một bước, và bao gồm: Thuộc tính Mô tả target là một CSS selector cho element mà đã khai báo ở bước đầu content Nội dung mô tả cho element đó params có thể khai báo 1 số thông tin config khác Bước 3. Thêm component &lt;vue-tour name=&quot;whateverMyTourNameIs&quot; :steps=&quot;mySteps&quot;&gt;&lt;/vue-tour&gt; vào dự án Cuối cùng: Thêm lệnh this.$tours[&#39;whateverMyTourNameIs&#39;].start() vào mounted hook hoặc thêm vào sự kiện nào đó khi bạn muốn bắt đầu tour hướng dẫn 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;template&gt; &lt;div class=\"container mx-auto my-5 flex justify-between\"&gt; &lt;div id=\"v-step-0\" class=\"bg-green-500 p-5\"&gt;Step 1&lt;/div&gt; &lt;div class=\"v-step-1 bg-blue-500 p-5\"&gt;Step 2&lt;/div&gt; &lt;div data-v-step=\"2\" class=\"bg-indigo-500 p-5\"&gt;Step 3&lt;/div&gt; &lt;v-tour name=\"myTour\" :steps=\"steps\"&gt;&lt;/v-tour&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default &#123; name: 'my-tour', data () &#123; return &#123; steps: [ &#123; target: '#v-step-0', // We're using document.querySelector() under the hood header: &#123; title: 'Get Started', &#125;, content: `Discover &lt;strong&gt;Vue Tour&lt;/strong&gt;!` &#125;, &#123; target: '.v-step-1', content: 'An awesome plugin made with Vue.js!' &#125;, &#123; target: '[data-v-step=\"2\"]', content: 'Try it, you\\'ll love it!&lt;br&gt;You can put HTML in the steps and completely customize the DOM to suit your needs.', params: &#123; placement: 'top' // Any valid Popper.js placement. See https://popper.js.org/popper-documentation.html#Popper.placements &#125; &#125; ] &#125; &#125;, mounted: function () &#123; this.$tours['myTour'].start() &#125; &#125;&lt;/script&gt; Demo Kết luậnHy vọng qua bài viết này các bạn có thêm 1 lựa chọn để làm website của mình trở lên awesome hơn.Cảm ơn các bạn đã theo dõi bài viết. hẹn gặp các bạn ở các bài viết sau !! :heart_eyes::heart_eyes::heart_eyes::heart_eyes: Blog: https://phamtuananh1996.github.io Tham khảo : https://github.com/pulsardev/vue-tour","categories":[],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://phamtuananh1996.github.io/tags/javascript/"},{"name":"vuejs","slug":"vuejs","permalink":"https://phamtuananh1996.github.io/tags/vuejs/"}]},{"title":"5 Good Practices mình đang sử dụng trong Vuejs","slug":"5-good-practices-minh-dang-su-dung-trong-vuejs","date":"2021-11-25T09:13:41.000Z","updated":"2024-01-04T00:39:10.946Z","comments":true,"path":"2021/11/25/5-good-practices-minh-dang-su-dung-trong-vuejs/","link":"","permalink":"https://phamtuananh1996.github.io/2021/11/25/5-good-practices-minh-dang-su-dung-trong-vuejs/","excerpt":"","text":"Mở đầuMình đã sử dụng vuejs được cũng được 1 năm trở lại đây. Khi mới bắt đầu học code thì chỉ code sao cho code chạy được đúng convention. Còn việc sau này có ai đó đọc code hay chính mình của 1 tháng sau đọc lại thì có còn hiểu và dễ dàng phát triển về sau không thì mình không để ý đến lắm. Chỉ khi đến khi đọc lại code của mình thì “wtf code này ai viết đây“. Chỉ muốn quay lại tát vào mặt thằng đã viết ra đống lộn xộn này thôi. Sau đây là một số ít kinh nghiệm mình có khi bắt đầu một dự án với vuejs Cũng có thế sau khi gặp dự án lớn thì nhưng kinh nghiệm này sẽ không còn đúng nữa. Nhưng bản thân mình ở tương lại tốt hơn ở hiện tại là cũng mừng lắm rồi :heart_eyes::heart_eyes: 1, Sử dụng slot cho componentĐa số mọi người khi tao ra component thường sẽ để ý đến prop, state, event của component đó. vì những thứ đó cơ bản đã đáp ứng yêu cầu tối thiểu của 1 component. Và những chức năng nhỏ, ít thay đổi thì cần nhưng thứ đó là component chạy ngon rồi. Nhưng đời không như mơ chức năng nhỏ nào cũng phải to thôi. ít thay đổi cũng phải thay đổi thôi. *Hồi tưởng * Trước đây mình có code tạo popup, Ngày từ đầu nó cũng không có gì phức tạp nó chỉ bao gồm tiêu đề, nội dung và một số button. Vì vậy mình đã dùng 3 prop tương ứng và emit event khi người dùng ấn vào button. Vậy là xong. Chạy ổn ! Tuy nhiên dự án phát triên theo thời gian . popup dễ thương của mình hôm nào đã không đáp ứng đủ yêu cầu. Khách hàng muốn hiển thị nhiều thứ khác trong đó như thêm header, footer, các trường khác nữa lại còn tùy thuộc vào mỗi trang mà popup sẽ hiện thị khác nhau. Mình nghĩ là cho thêm vài cái prop nữa là giải quyết được vấn đề. Nhưng component ngày càng trở lên phức tạp khó hiểu. emit quá nhiều sự kiện, Chưa kể đến là sửa ở trang này thì ảnh hưởng đến trang khác. Vậy là component của tôi coi như bỏ :joy::joy::joy::joy: Mọi thứ có thể tốt hơn nếu ngay từ đầu mình nghĩ là vuejs còn có slot. Và mình đã refactor lại component . để ngắn ngọn , dễ hiểu và dễ mở rộng hơn. Ví dụ: 1234567891011121314151617181920212223242526272829303132333435&lt;template&gt; &lt;div class=\"c-base-popup\"&gt; &lt;div v-if=\"$slots.header\" class=\"c-base-popup__header\"&gt; &lt;slot name=\"header\"&gt; &lt;/div&gt; &lt;div v-if=\"$slots.subheader\" class=\"c-base-popup__subheader\"&gt; &lt;slot name=\"subheader\"&gt; &lt;/div&gt; &lt;div class=\"c-base-popup__body\"&gt; &lt;h1&gt;&#123;&#123; title &#125;&#125;&lt;/h1&gt; &lt;p v-if=\"description\"&gt;&#123;&#123; description &#125;&#125;&lt;/p&gt; &lt;/div&gt; &lt;div v-if=\"$slots.actions\" class=\"c-base-popup__actions\"&gt; &lt;slot name=\"actions\"&gt; &lt;/div&gt; &lt;div v-if=\"$slots.footer\" class=\"c-base-popup__footer\"&gt; &lt;slot name=\"footer\"&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; props: &#123; description: &#123; type: String, default: null &#125;, title: &#123; type: String, required: true &#125; &#125;&#125;&lt;/script&gt; Đọc thêm về slot ở đây https://vuejs.org/v2/guide/components-slots.html Hãy nhớ khi viết component thì đừng quên dùng slot nhé. Các dự án được xây dựng bởi các lập trình viên có kinh nghiệm, những người biết khi nào sử dụng vị trí sẽ tạo ra sự khác biệt lớn về khả năng bảo trì trong tương lai. 2, Đặt tên module trong Vuex StoreKhi mình mới khi tìm hiểu về vue thì mình gặp 2 vấn đề trong dự án: Khi mình cần dự liệu ở component khác nhưng phải truy cập rất nhiều component khác để lấy được chúng. Mình muốn dự liệu vẫn tồn tại khi component bị hủy Vậy là mình tìm hiểu về vuex. Sau khi tìm hiểu về module thì mình bắt đầu xây dựng store. Vấn đề là không có một khuôn mẫu nào chuẩn để mình làm theo nên mình thường đặt tên module theo tính năng. Ví dụ: Auth. Blog Inbox Settings Sau khi làm một thời gian thì mình thấy đặt tên theo data model mà mình gọi API khá dễ hiểu ví dụ: Users Teams Messages Widgets Articles Bạn có thể đặt tên như nào cũng được vì không có một quy chuẩn nào cả. Nhưng đặt tên như kia sẽ giúp team của bạn dễ phảt triển hơn. Và các người mới vào dự án cũng tập trung vào base code hơn. 3, Call API trong action và commit data (Vuex)Mình thường xuyên call API ở action của vuex (không phải tất cả các api) và commit data xuống state. Tại sao mình làm vậy: Nếu ở 2 trang mà call cùng 1 Api thì chúng ta phải gọi lại API đó ở 2 page, co vẻ bị trùng lặp code ở đây. Nếu bạn đã call api đó ở action thì chúng ta chỉ cần dispatch action đó là xong Quan trọng hơn là code của chúng ta sẽ logic, clear hơn khi chúng ta biết api chúng ta gọi ở đâu. 4, Đừng quên dùng mapState, mapGetters, mapMutations and mapActionsKhi mới tìm hiểu vuex. Khi muốn truy cập vào state, getters, hay dispatch action thì mình hay dùng như thế này: 12345678910111213141516171819export default &#123; computed: &#123; myGetter() &#123; return this.$store.getters['myModule/myGetter']; &#125;, myGetter2() &#123; return this.$store.getters['myModule/myGetter2']; &#125; &#125;, methods: &#123; myAction() &#123; this.$store.dispatch('myModule/myAction'); &#125;, myAction2() &#123; this.$store.dispatch('myModule/myAction2'); &#125; &#125;&#125;; Bạn thấy code chạy ổn nhưng hơi dài dòng. Thay vào đó hãy dùng mapState, mapGetters, mapMutations and mapActions 1234567891011import &#123; mapGetters, mapActions &#125; from \"vuex\";export default &#123; computed: &#123; ...mapGetters(['myModule/myGetter','myModule/myGetter2']) &#125;, methods: &#123; ...mapAction(['myModule/myAction','myModule/myAction2']) &#125;&#125;; Code đã ngắn gọn hơn khá nhiều rồi. Các bạn tìm hiểu thêm về mapState, mapGetters, mapMutations and mapActions ở đây https://vuex.vuejs.org/ 5, Sử dụng API FactoriesMình thường tạo một this.$api helper để có thể call API ở bất cứ đâu. Ở thư mục gốc mình tạo 1 api folder. Folder này gồm tất cả các file chứa endpoint API Ví dụ: 1234api├── auth.js├── notifications.js└── teams.js Mỗi file sẽ chứa endpoint có liên quan đến nó ví dụ: 1234567891011121314151617export default $axios &#x3D;&gt; (&#123; forgotPassword(email) &#123; return $axios.$post(&quot;&#x2F;auth&#x2F;password&#x2F;forgot&quot;, &#123; email &#125;); &#125;, login(email, password) &#123; return $axios.$post(&quot;&#x2F;auth&#x2F;login&quot;, &#123; email, password &#125;); &#125;, logout() &#123; return $axios.$get(&quot;&#x2F;auth&#x2F;logout&quot;); &#125;, register(payload) &#123; return $axios.$post(&quot;&#x2F;auth&#x2F;register&quot;, payload); &#125;&#125;); Để sử dụng được this.$api helper mình thêm: 1234567891011121314151617181920import Auth from \"@/api/auth\";import Teams from \"@/api/teams\";import Notifications from \"@/api/notifications\";export default (context, inject) =&gt; &#123; if (process.client) &#123; const token = localStorage.getItem(\"token\"); // Set token when defined if (token) &#123; context.$axios.setToken(token, \"Bearer\"); &#125; &#125; // Initialize API repositories const repositories = &#123; auth: Auth(context.$axios), teams: Teams(context.$axios), notifications: Notifications(context.$axios) &#125;; inject(\"api\", repositories);&#125;; Giờ mình chỉ cần gọi chúng trong component hay action trong vuex như này: 1234567891011export default &#123; methods: &#123; onSubmit() &#123; try &#123; this.$api.auth.login(this.email, this.password); &#125; catch (error) &#123; console.error(error); &#125; &#125; &#125;&#125;; Kết luậnTrên đây là số ít kinh nghiệm làm việc với vue của mình trong năm qua. Mọi người có thể đọc với mục đính tham khảo. Cảm ơn bạn đã đọc đến đây. :100::100:. Có gì các bạn cứ gạch đá nhé. Xin chào thân ái và quyết thắng !!! Blog: https://phamtuananh1996.github.io/","categories":[],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://phamtuananh1996.github.io/tags/javascript/"},{"name":"vuejs","slug":"vuejs","permalink":"https://phamtuananh1996.github.io/tags/vuejs/"}]},{"title":"Tạo vue component library và publish nó lên npm trong 5 phút","slug":"tao-vue-component-library-va-publish-no-len-npm-trong-5-phut","date":"2020-12-21T11:22:12.000Z","updated":"2024-01-04T00:39:10.962Z","comments":true,"path":"2020/12/21/tao-vue-component-library-va-publish-no-len-npm-trong-5-phut/","link":"","permalink":"https://phamtuananh1996.github.io/2020/12/21/tao-vue-component-library-va-publish-no-len-npm-trong-5-phut/","excerpt":"","text":"Mở đầuChào các bạn, từ trước đến giờ mỗi khi code chức năng gì đó chắc hẳn việc đầu tiên mình đều nghĩ đến có thư viện nào hỗ trợ việc đó không và lao ngay lên https://www.npmjs.com search thử. Việc sử dụng thư viện có sẵn giúp mình tiết kiệm được rất nhiều thời gian và công sức khi code. Vừa dùng thư viện mình vừa nghĩ cảm ơn công động đã tạo ra thư viện awesome này giúp mình khá nhiều trong công việc. Rồi mình cũng muốn viết ra 1 cái gì đó đơn giản để dùng được về sau. Và giới thiệu cho bạn bè cùng contribute hay đơn giản là cho bạn bè dùng thử và ném đá thư viện của mình cũng được. Cảm giác được thấy ai đó npm install thư viện của mình chắc phê phải biết. Mơ mộng thế thôi chứ giờ mình mới tìm hiểu để viết 1 component library Tạo component libraryĐể tạo 1 component library mình dùng package vue-sfc-rollup . Package giúp tạo ra Vue Single File Component (SFC) hoặc library of multiple SFCs 1 cách nhanh chóng Chi tiết các bạn có thể xem qua tại đây https://github.com/team-innovation/vue-sfc-rollup Đầu tiên install package về: 1npm install -g vue-sfc-rollup Tiếp theo chạy lệnh: 1sfc-init Để tạo ra 1 Single File Component (SFC). Đừng quên chọn các tùy chọn 1234Is this a single component or a library? LibraryWhat is the npm name of your library? sprite-to-gif (Đây là tiên thư viện)Will this library be written in JavaScript or TypeScript? JavaScript (Chọn dùng JavaScript hay TypeScript)Enter a location to save the library files (Đường dẫn đến thư mục bạn muốn lưu) Sau setup xong mình sẽ có file package.json như thế này 12345678910111213141516171819202122232425262728293031323334353637383940414243&#123; \"name\": \"sprite-to-gif\", \"version\": \"1.0.0\", \"description\": \"\", \"main\": \"dist/sprite-to-gif.ssr.js\", \"browser\": \"dist/sprite-to-gif.esm.js\", \"module\": \"dist/sprite-to-gif.esm.js\", \"unpkg\": \"dist/sprite-to-gif.min.js\", \"files\": [ \"dist/*\", \"src/**/*.vue\" ], \"scripts\": &#123; \"serve\": \"vue-cli-service serve dev/serve.js\", \"build\": \"cross-env NODE_ENV=production rollup --config build/rollup.config.js\", \"build:ssr\": \"cross-env NODE_ENV=production rollup --config build/rollup.config.js --format cjs\", \"build:es\": \"cross-env NODE_ENV=production rollup --config build/rollup.config.js --format es\", \"build:unpkg\": \"cross-env NODE_ENV=production rollup --config build/rollup.config.js --format iife\" &#125;, \"dependencies\": &#123;&#125;, \"devDependencies\": &#123; \"@babel/core\": \"^7.9.0\", \"@babel/preset-env\": \"^7.9.5\", \"@rollup/plugin-alias\": \"^2.2.0\", \"@rollup/plugin-commonjs\": \"^11.1.0\", \"@rollup/plugin-replace\": \"^2.3.2\", \"@vue/cli-plugin-babel\": \"^4.3.1\", \"@vue/cli-service\": \"^4.3.1\", \"cross-env\": \"^7.0.2\", \"minimist\": \"^1.2.5\", \"rollup\": \"^2.7.3\", \"rollup-plugin-babel\": \"^4.4.0\", \"rollup-plugin-terser\": \"^5.3.0\", \"rollup-plugin-vue\": \"^5.1.6\", \"vue\": \"^2.6.11\", \"vue-template-compiler\": \"^2.6.11\" &#125;, \"peerDependencies\": &#123; \"vue\": \"^2.6.11\" &#125;, \"engines\": &#123; \"node\": \"&gt;=10\" &#125;, Cd vào forder và chạy lệnh npm install để cài đặt các package cần thiết 123cd path/to/my-component-or-libnpm install Tiếp theo chạy lệnh npm run serve. Và truy cập vào http://localhost:8080/ để xem component của mình. Vậy là đã setup thành công. đây là component mẫu của package Tiếp theo là nghĩ ý tưởng xem component của mình phục vụ cho mục đích gì và code nó thôi.Thì trước mình có viết 1 bài viblo về việc biến ảnh sprites thành ảnh động với vue Các bạn có thể xem qua. Bài đó đã có code component rồi. nên mình chỉ đem bỏ vào file trong thư mục Src/lib-components là được. Và mình đặt tên component của mình là sprite-to-gif nhé 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364&lt;template&gt; &lt;div :style&#x3D;&quot;style&quot;&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123; props: &#123; image: String, height: Number, width: Number, loop: Number, frame: Number, max: Number, column: Number, row: Number, &#125;, mounted() &#123; this.play() &#125;, data()&#123; return &#123; style: &#123; width: this.width + &#39;px&#39;, height: this.height + &#39;px&#39;, background: &#96;url($&#123;this.image&#125;)&#96;, backgroundSize: &#96;$&#123;this.width * this.column&#125;px $&#123;this.height * this.row&#125;px&#96;, backgroundPosition: &#39;0px 0px&#39; &#125; &#125; &#125;, methods: &#123; play() &#123; let i &#x3D; 0 let position &#x3D; &#123; x: 0, y: 0, loop: 0, &#125; const playTimer &#x3D; setInterval(() &#x3D;&gt; &#123; i++; if(i % this.column) &#123; position.x -&#x3D; this.width; &#125; else &#123; position.y -&#x3D; this.height; position.x &#x3D; 0; &#125; if (i &#x3D;&#x3D; this.max) &#123; i &#x3D; 0 position.y &#x3D; 0; position.x &#x3D; 0; position.loop++; if(position.loop &gt;&#x3D; this.loop) &#123; clearInterval(playTimer) &#125; &#125; this.$set(this.style, &#39;backgroundPosition&#39;, &#96;$&#123;position.x&#125;px $&#123;position.y&#125;px&#96;) &#125;, 1000&#x2F;this.frame); &#125; &#125;&#125;&lt;&#x2F;script&gt; Vậy là xong. Để test component của mình thì mình tìm đến file sprite-to-gif/dev/serve.vue 1234567891011121314151617181920212223242526&lt;script&gt;import Vue from &#39;vue&#39;;import &#123; SpriteToGif &#125; from &#39;@&#x2F;entry&#39;;export default Vue.extend(&#123; name: &#39;ServeDev&#39;, components: &#123; SpriteToGif, &#125;&#125;);&lt;&#x2F;script&gt;&lt;template&gt; &lt;div id&#x3D;&quot;app&quot;&gt; &lt;sprite-to-gif image&#x3D;&quot;https:&#x2F;&#x2F;images.viblo.asia&#x2F;a28b8126-1298-4ca7-a507-53865b32238d.png&quot; :width&#x3D;&quot;100&quot; :height&#x3D;&quot;100&quot; :column&#x3D;&quot;7&quot; :row&#x3D;&quot;4&quot; :max&#x3D;&quot;27&quot; :frame&#x3D;&quot;20&quot; :loop&#x3D;&quot;10&quot; &#x2F;&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt; Truy cập http://localhost:8080/ để xem thành quả Vậy là từ ảnh này mình đã biến nó thành động như kia rồi Giờ publish lên npm để mọi người trên toàn thế giới có thể dùng component của mình thôi :) Publish lên npmĐầu tiên chạy lệnh build 1npm run build Tiếp theo mình sẽ chạy lệnh để thêm tài khoản npm của mình vào. Các bạn có thể đăng ký tài khoản của mình ở https://www.npmjs.com/signup 1npm adduser Cuối cùng chạy lệnh để publish thư viện của mình 1npm publish Vậy là component của mình đã được publish tại đây : https://www.npmjs.com/package/sprite-to-gif Giờ chỉ cần 1 lệnh đơn giản là bạn có thể có component của mình rồi: 1npm i sprite-to-gif Mà chưa xong. Mình phải viết doc cho component nữa (Cái này để sau vậy) Push thư viện mình vừa viết lên github: https://github.com/phamtuananh1996/sprite-to-gif Tổng kếtVậy là mình đã viết và publish component thành công lên npm 1 cách nhanh chóng và đơn giản.Hy vọng sau bài này nếu bạn có 1 chức năng gì đó hay. Đừng để nó dưới máy rồi lẵng quên nó mà hãy push nó lên npm để mọi người cùng sử dụng Và github để lưu trữ cũng như để mọi người cùng contribute Hẹn các bạn vào các bài viết tiếp theo, nếu hay các upvote và comment gạch đá nhiệt tình nhé. Đọc thêm nhiều bài viết của mình ở đây https://phamtuananh1996.github.io","categories":[],"tags":[{"name":"vuejs","slug":"vuejs","permalink":"https://phamtuananh1996.github.io/tags/vuejs/"},{"name":"npm","slug":"npm","permalink":"https://phamtuananh1996.github.io/tags/npm/"},{"name":"package","slug":"package","permalink":"https://phamtuananh1996.github.io/tags/package/"}]},{"title":"Xây dựng ứng dụng \"chat với người lạ\" với socketio cùng sự tham gia của vuejs","slug":"xay-dung-ung-dung-chat-voi-nguoi-la-voi-socketio-cung-su-tham-gia-cua-vuejs","date":"2020-09-15T18:36:41.000Z","updated":"2024-01-04T00:39:10.962Z","comments":true,"path":"2020/09/16/xay-dung-ung-dung-chat-voi-nguoi-la-voi-socketio-cung-su-tham-gia-cua-vuejs/","link":"","permalink":"https://phamtuananh1996.github.io/2020/09/16/xay-dung-ung-dung-chat-voi-nguoi-la-voi-socketio-cung-su-tham-gia-cua-vuejs/","excerpt":"","text":"Mở đầuChắc hẳn các bạn không còn xa lạ gì với kiểu ứng dụng chat với người lạ trên facebook hay trên các ứng dụng web. Kiểu như mình có thể nc tâm sự với một cú có gai nào đó trên mạng mà cả 2 người cùng không có thông tin gì về nhau. và khi kết thúc cuộc nói chuyện cũng chẳng có tin nhắn nào được lưu lại cả. Thích hợp với các FA như các bạn :) Ở bài viết này mình sẽ thử làm 1 app chat như vậy và cũng để tìm hiểu về thằng socketio này. Socket io là gì ? Là một module của Nodejs Được sử dụng trong các ứng dụng web thời gian thực. Tạo ra một cơ chế liên lạc giữa client và server Có thể cài đặt các module của Nodejs bằng NPM. Các bạn có thể tìm hiểu thêm ở đây: https://socket.io/docs/ Cấu trúc thư mụcMình sẽ tạo ra 2 thư mục là : server và client Thư mục client là nơi chưa code phần giao diện chát ở đây mình dùng vue-cli để tạo nhanh 1 project vuejs 1vue create client Thư mục server sẽ là nơi cài đặt thư viện socket io trên môi trường nodejs Trong thư mục server mình tạo ra file package.json với nội dung sau: 12345678910111213141516&#123; \"name\": \"chat\", \"version\": \"1.0.0\", \"description\": \"\", \"main\": \"index.js\", \"scripts\": &#123; \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\", \"dev\": \"nodemon index\" &#125;, \"author\": \"phamtuananh760\", \"license\": \"ISC\", \"dependencies\": &#123; \"nodemon\": \"^2.0.4\", \"socket.io\": \"^2.3.0\" &#125;&#125; Chạy lệnh: 1npm install Để install package nodemon và socket.io Và tạo ra 1 file index.js đây là nơi xử lý logic của mình Cấu trúc thư mục cuối cùng sẽ như thế này: Cd vào thư mục server và chạy lệnh để khởi động server: 1npm run dev Cd vào client và chạy lệnh : 1npm run serve Giờ thì vào đường dẫn localhost:8080 xem đã cài đặt thành công chưa: Vậy là ok rồi !!! Lắc não và CodeVề phần server, Vì ứng dụng không lưu lại thông tin người dùng cũng như lịch sử tin nhắn nên sẽ không cần đến cơ sở dữ liệu. Server chỉ nhận các even từ người này và emit tới người kia trong cùng 1 room. Và đảm bảo mỗi room chỉ có 2 client. Về phần client sẽ kết nối đến server socket và sẽ nhận và hiển thị tin nhắn nếu nhận được tn đến room của mình. Thông báo có ng vào phòng hoặc rời phòng. Đầu tiên mình dựng server socket ở cổng 3000 như sau: 12345const io &#x3D; require(&#39;socket.io&#39;)(3000);io.on(&#39;connect&#39;, socket &#x3D;&gt; &#123; console.log(&#39;có người kết nối này&#39;);&#125;); Khi có client kết nối đến thì mình sẽ log ra “có người kết nối này” để test việc kết nối giữa client với server. Để client vue kết nối được đến server mình dùng thêm 1 package vue-socket.io: 1npm install vue-socket.io --save Sau khi cài đặt xong mình thêm đoạn code này vào file client/src/main.js: 1234567891011121314import Vue from &#39;vue&#39;import App from &#39;.&#x2F;App.vue&#39;import VueSocketIO from &#39;vue-socket.io&#39;Vue.config.productionTip &#x3D; falseVue.use(new VueSocketIO(&#123; debug: true, connection: &#39;http:&#x2F;&#x2F;localhost:3000&#39;,&#125;))new Vue(&#123; render: h &#x3D;&gt; h(App),&#125;).$mount(&#39;#app&#39;) F5 lại trình duyệt. Và thấy server log như này là kết nối thành công rồi : Tiếp theo khi client kết nối đến thì mình sẽ phải join client vào 1 room sao cho room đó đang có dưới 2 client đang join. và nếu không tìm được room nào như thế thì mình sẽ tạo 1 room mới vào join client đó vào. Mình sẽ đặt các room theo thứ tự từ 0 đến vân vân : 123456789101112131415161718192021222324252627const io &#x3D; require(&#39;socket.io&#39;)(3000);const getClientRoom &#x3D; () &#x3D;&gt; &#123; let index &#x3D; 0; while (true) &#123; if(!io.sockets.adapter.rooms[index] || io.sockets.adapter.rooms[index].length &lt; 2) &#123; return index; &#125; index ++; &#125;&#125;io.on(&#39;connect&#39;, socket &#x3D;&gt; &#123; const clientRoom &#x3D; getClientRoom(); &#x2F;&#x2F; Lấy room thỏa mãn điều kiện socket.join(clientRoom); if(io.sockets.adapter.rooms[myRoom].length &lt; 2) &#123; &#x2F;&#x2F;kiểm tra xem phòng có dưới 2 ng trong phòng không io.in(myRoom).emit(&#39;statusRoom&#39;, &#39;Đang chờ người lạ ...&#39;); &#x2F;&#x2F; emit cho tất cả client trong phòng &#125; else &#123; io.in(myRoom).emit(&#39;statusRoom&#39;, &#39;Người lạ đã vào phòng&#39;); &#x2F;&#x2F; emit cho tất cả client trong phòng &#125; socket.on(&#39;disconnect&#39;, (reason) &#x3D;&gt; &#123; &#x2F;&#x2F; Khi client thoát thì emit cho người cùng phòng biết socket.to(clientRoom).emit(&#39;statusRoom&#39;, &#39;Người lạ đã thoát. Đang chờ người tiếp theo ....&#39;); &#125;);&#125;); Hàm getClientRoom() mình sẽ duyệt qua các phòng nhằm tìm ra phòng đang có 1 client, hoặc tất cả các phòng đã có 2 ng rồi thì sẽ tạo phòng mới và join client đó vào. Sau khi join xong mình sẽ emit tình trạng phòng đó cho client. Nếu phòng hiện tại đang có 1 người thì emit với message ‘Đang chờ người lạ ...‘. Nếu đủ 2 người sẽ emit với mesage ‘Người lạ đã vào phòng‘ cho client , Khi người dùng thoát cũng emit về thông báo ng dùng đã thoát. Các bạn có thể tham khảo các lệnh emit của socket io tại bài viết này : https://viblo.asia/p/tat-tan-tat-nhung-lenh-emit-trong-socketio-Qbq5Qj8wKD8 Để client có thể nhận được tình trạng phòng mình sẽ code thêm trong file client/src/App.vue: 1234567891011121314151617181920212223242526272829303132&lt;template&gt; &lt;div id=\"app\"&gt; &lt;div v-for=\"(message, index) in messages\" :key=\"index\"&gt; &#123;&#123; message.type &#125;&#125; : &#123;&#123; message.message &#125;&#125; &lt;/div&gt; &lt;input type=\"text\" v-model=\"text\"&gt; &lt;button&gt;Send&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: 'App', data() &#123; return &#123; text: '', messages: [], &#125; &#125;, sockets: &#123; initRoom: function (message) &#123; // Đây là nơi nhận cái even initRoom với param là message mà server emit về this.messages.push(&#123; message, type: 'status', &#125;) &#125; &#125;,&#125;&lt;/script&gt; Vậy là đã lấy được tình trạng phòng. giờ thì mở 2 tab trình duyệt test thôi : Vậy là ok rồi. Có thể thấy nếu mở 2 tab mà đã cùng 1 room rồi. thì khi mở tab thứ 3 thì tab này sẽ join vào room khác. Tiếp theo là sự kiện gửi và nhận tin nhắn giữa 2 client: Dưới client khi ấn nút gửi thì sẽ emit 1 event lên server: 123456789101112methods: &#123; sendMessage() &#123; if(this.text !== '') &#123; this.$socket.emit('sendMessage', this.text) // emit lên server this.messages.push(&#123; message: this.text, type: 'send', &#125;) &#125; this.text = '' &#125; &#125; Đồng thời mình push luôn message ấy vào mảng đã có. Trên server để nhận event mình dùng 123socket.on('sendMessage', function (message) &#123; // nhận message từ client socket.to(clientRoom).emit('receiveMessage', message); // emit message ấy cho người trong room ngoại trừ người gửi&#125;) Tương tự dưới client để nhận tin nhắn của người khác mình dùng: 1234567891011121314sockets: &#123; statusRoom: function (message) &#123; this.messages.push(&#123; message, type: 'status', &#125;) &#125;, receiveMessage: function (message) &#123; //nhận tín nhắn từ ng khác trong phòng, push tin nhắn vào mảng ban đầu this.messages.push(&#123; message, type: 'receive', &#125;) &#125;, &#125;, Vậy là hoàn thành sương sương chức năng rồi. chạy lên xem ok chưa. Vậy là xong rồi. lên mạng kiếm cái template chat nào xịn xò tý là ok. Dockerize ứng dụngĐể chạy project mà không phụ thuộc vào môi trường trên máy thì mình thêm file docker-compose.yml 12345678910111213141516171819202122version: '3'services: server: image: node:10-alpine volumes: - ./server:/server working_dir: /server ports: - \"3000:3000\" restart: unless-stopped command: &gt; sh -c \"npm i &amp;&amp; npm run dev\" client: image: node:10-alpine volumes: - ./client:/client working_dir: /client ports: - \"8080:8080\" restart: unless-stopped command: &gt; sh -c \"npm i &amp;&amp; npm run serve\" Giờ thì cần chạy lệnh 1docker-compose up Source code, demoCác bạn có thể tham khảo code ở đây : https://github.com/phamtuananh1996/chat Demo: https://chatvnl.herokuapp.com Các bạn có thể mở 2 tab để test Tổng kếtVậy là mình đã hoàn thành 1 ứng dụng nhỏ nhỏ vui vui để hiểu cách dùng socketio rồi. Hẹn các bạn vào các bài viết tiếp theo, nếu hay các upvote và comment gạch đá nhiệt tình nhé. Đọc thêm nhiều bài viết của mình ở đây https://phamtuananh1996.github.io","categories":[],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://phamtuananh1996.github.io/tags/javascript/"},{"name":"vuejs","slug":"vuejs","permalink":"https://phamtuananh1996.github.io/tags/vuejs/"},{"name":"socket.io","slug":"socket-io","permalink":"https://phamtuananh1996.github.io/tags/socket-io/"}]},{"title":"'2' + '2' - '2' = 20. Tại sao vậy? Quy tắc khi cộng trừ chuỗi và số với javascript","slug":"2-2-2-20-tai-sao-vay-quy-tac-khi-cong-tru-chuoi-va-so-voi-javascript","date":"2020-08-17T06:01:26.000Z","updated":"2024-01-04T00:39:10.946Z","comments":true,"path":"2020/08/17/2-2-2-20-tai-sao-vay-quy-tac-khi-cong-tru-chuoi-va-so-voi-javascript/","link":"","permalink":"https://phamtuananh1996.github.io/2020/08/17/2-2-2-20-tai-sao-vay-quy-tac-khi-cong-tru-chuoi-va-so-voi-javascript/","excerpt":"","text":"Mở đầuCác phép cộng trự nhân chia trong lập trình khá quan trọng, ngoài nhưng cái phép cộng trự basic thì nó còn có những phép tính rất khó như các chuỗi + với number. Cùng tìm hiểu một lần cho cuộc sống đỡ bế tắc nhé!. Nếu đọc tiêu đề của bài này mà trong đầu các bạn nghĩ ngay là phép tình này bình thường mà có gì đâu mà lạ thì bạn có thể bỏ qua bài viết này . Còn nếu ngược lại thì cùng mình tìm hiểu xem tại sao lại như thế nhé! Ở bài này mình chỉ thực hiện với các số nguyên thôi nhé. Tính toán với các số thực mình xin phép để phần sau. Các bạn có thể Ctrl + Shift + i ngay tại bài viết này để thực hiện phép tình cộng trừ vời mình nhé ! Phép cộngNumber + Number = Number1console.log( 1 + 1 ) // 2 Chắc cái này ai cũng biết rồi. Đơn giản là cộng 2 số vào nhau thôi. String + String = String1console.log( '1' + '1' ) // '11' Đây là phép nối chuỗi thông thường. Không có gì đặc biệt cả. String + Number = String1console.log( '10' + 10 ) // '1010' Trong js nếu bạn cộng chuỗi với số thì js sẽ chuyển số thành chuỗi và thực hiện phép nỗi chuỗi như bình thường vì vậy kết quả sẽ ra 1 chuỗi. Number + Number + String = String1console.log( 10 + 10 + '10' ) // '2010' Bạn có thắc mắc là sao kết quả là chuỗi ‘2010’ . Do js sẽ thực hiện tính toán từ trái qua phải . và áp dụng các quy tắc trên. Lấy 10 + 10 = 20 . Rồi lấy 20 cộng chuỗi với ‘10’ nên kq là 2010 Đối với trường hợp: 1console.log( 10 + (10 + '10') ) // '101010' Do js sẽ thực hiện phép tính trong ngoặc trước. và cũng áp dụng các quy tắc trên Như vậy mình có thể thấy nếu cộng chuỗi cho số. thì js sẽ biến đổi số của mình thành chuỗi rồi sau đó cộng chuỗi như bình thường. Và cũng thực hiện từ trái qua phải trong ngoặc trước ngoài ngoặc sau. Phép trừNumber - Number = Number1console.log( 1 - 1 ) // 0 Cái này thì bình thường rồi. String - String = ???1console.log( 'viblo' - 'asia' ) // NaN (Not a Number) Với ví dụ này thì js đã cố gắng chuyển chuỗi ‘viblo’ về số nhưng không thể chuyển được nên kq sẽ là NaN. Tiếp đến ta xét 1 trường hợp nữa: 1console.log( '123' - '12' ) // 111 Js đã chuyển 2 chuỗi kia về số và tiến hành trừ cho nhau nên kq ra 1 số. String - Number = ???1console.log( 123 - '12' ) // 111 Tương tự như vậy Js đã chuyển chuỗi ‘12’ thành số 12 và tiến hành thực hiện phép tính 123 - 12 = 111. Trong js nếu trong phép trừ mà có xuất hiện chuỗi thì nó sẽ cố gắng chuyển chuỗi đó thành số và thực hiện phép tính như bình thường còn nếu không chuyển được thì kết quả sẽ là NaN Mix cộng trừNếu các bạn đã nắm dõ các quy tắc trên thì đến đây phép tính ở tiêu đề sẽ không là khó được bạn: 1console.log('2' + '2' - '2') // 20 Áp dụng các quy tắc nói ở trên thì js sẽ lần lượt thực hiện phép tình từ trái qua phải. Đầu tiên sẽ lấy ‘2’ + ‘2’ = ‘22’ // Đây là phép cộng chuỗiTiếp theo sẽ lấy ‘22’ - ‘2’ = 20 // Như đã nói ở trên thì js sẽ cố gắng chuyển ‘22’ và ‘2’ thành số 22 và 2 rồi từ đi nhau và kết quả sẽ là số 20. Đơn giản phải không nào Kết luậnQua bài này các bạn chỉ cần nhớ: Nếu cộng chuỗi cho số. thì js sẽ biến đổi số của mình thành chuỗi rồi sau đó cộng chuỗi như bình thường. Và cũng thực hiện từ trái qua phải trong ngoặc trước ngoài ngoặc sau. Trong js nếu trong phép trừ mà có xuất hiện chuỗi thì nó sẽ cố gắng chuyển chuỗi đó thành số và thực hiện phép tính như bình thường còn nếu không chuyển được thì kết quả sẽ là NaN Ở bài sau mình sẽ tìm hiểu về cộng trừ nhân chia số thực nhé! Blog: https://phamtuananh1996.github.io/ Đừng quên để lại 1 like, comment và sub kênh, ấn thông báo để nhận được các bài viết từ mình nhé. Chào thân ái và quyết thắng !","categories":[],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://phamtuananh1996.github.io/tags/javascript/"}]},{"title":"Cài đặt và cấu hình Caddy Server","slug":"cai-dat-va-cau-hinh-caddy-server","date":"2020-07-27T09:34:39.000Z","updated":"2024-01-04T00:39:10.946Z","comments":true,"path":"2020/07/27/cai-dat-va-cau-hinh-caddy-server/","link":"","permalink":"https://phamtuananh1996.github.io/2020/07/27/cai-dat-va-cau-hinh-caddy-server/","excerpt":"","text":"Mở đầuBạn đã quá quen thuộc với các web server truyền thống như: Nginx, Apache, … Mình nghĩ bạn nên thử qua caddyserver. Bạn sẽ không còn lo lắng, mệt mỏi khi phải đi tìm đọc tài liệu, tìm kiếm thông cài đặt cấu hình để hệ thống hoạt động một cách trơn tru. Mà thay vào đó, bạn chỉ việc dành 1 phút để tạo và config server chỉ với một vài dòng code để hệ thống server bắt đầu chạy. Nó cực kỳ đơn giản, và các tài liệu sáng sủa dễ hiểu thì có thể trong tương lai gần nó sẽ là đối thủ của nginx. Giới thiệuCaddy là một nền tảng web server mạnh mẽ, được viết bằng Go là 1 open-source và đang được cộng đồng phát triển rất mạnh mẽ. Nó hướng tới HTTP/2.0 và mặc định sử dụng HTTPS. Ngoài ra còn là một lựa chọn tuyệt vời cho: load balancing, cổng api, ingress controller, process supervisor, task scheduler. Cài đặtBạn có thể tải trực tiếp từ github sử dụng curl: 1$ curl -OL &quot;https:&#x2F;&#x2F;github.com&#x2F;caddyserver&#x2F;caddy&#x2F;releases&#x2F;latest&#x2F;download&#x2F;ASSET&quot; Sử dụng wget: 1$ wget &quot;https:&#x2F;&#x2F;github.com&#x2F;caddyserver&#x2F;caddy&#x2F;releases&#x2F;latest&#x2F;download&#x2F;ASSET&quot; Cài đặt cho Debian, Ubuntu, Raspbian1234echo &quot;deb [trusted&#x3D;yes] https:&#x2F;&#x2F;apt.fury.io&#x2F;caddy&#x2F; &#x2F;&quot; \\ | sudo tee -a &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;caddy-fury.listsudo apt updatesudo apt install caddy Cài đặt cho Fedora, RedHat, CentOSFedora or RHEL/CentOS 8: 123dnf install &#39;dnf-command(copr)&#39;dnf copr enable @caddy&#x2F;caddydnf install caddy RHEL/CentOS 7: 123yum install yum-plugin-copryum copr enable @caddy&#x2F;caddyyum install caddy Cài đặt cho macOS1brew install caddy Sau khi cài đặt xong bạn có thể kiểm tra xem caddy đã hoạt động chưa bằng lệnh: 1caddy version Kiểm tra trạng thái của caddy: 1systemctl status caddy Bạn có thể dừng caddy với lệnh : 1sudo systemctl stop caddy Để nhận các thay đổi trong file config bạn có thể chạy lệnh: 1sudo systemctl reload caddy Lưu ý : Không dừng service khi thay đổi config. Dừng service sẽ dẫn đến downtime hệ thông. thay vào đó hãy sử dụng lệnh reload để thay thế. Cấu hìnhCaddy cung cấp cho chúng ta 2 cách cấu hình với JSON file và Caddyfile: Với JsonfileĐầu tiên chúng ta tạo 1 file json với nội dung sau: 12345678910111213141516171819&#123; \"apps\": &#123; \"http\": &#123; \"servers\": &#123; \"example\": &#123; \"listen\": [\":2015\"], \"routes\": [ &#123; \"handle\": [&#123; \"handler\": \"static_response\", \"body\": \"Hello, world!\" &#125;] &#125; ] &#125; &#125; &#125; &#125;&#125; Để apply file này chúng ta cần sử dụng 1 api của candy: 1234curl localhost:2019&#x2F;load \\ -X POST \\ -H &quot;Content-Type: application&#x2F;json&quot; \\ -d @caddy.json Để kiểm tra xem chúng ta đã cấu hình thành công hay chưa hãy dùng lệnh: 12curl localhost:2015Hello, world! nếu xuất hiện “Hello, world!” thì chúc mừng bạn đã cấu hình thành công. bạn có thể tham khảo qua JSON document. tại đây. https://caddyserver.com/docs/json/ với CaddyfileĐể cấu hình với caddyfile bạn cần tạo một file với tên là CaddyfileĐể chạy được ứng dụng “Helllo world” như trên thì với Caddyfile thì hoàn toàn đơn giản như sau: 123localhosttls internalrespond &quot;Hello, world!&quot; Như file cấu hình trên có dòng localhost đây là tên domain bạn cần cấu hình. Ngoài ra, để cấu hình https cho Caddy Server bạn có thể cấu hình nhanh chóng bằng cách sử dụng config tls internal, Caddy sẽ sử dụng tệp chứng chỉ cục bộ cho trang web này. Ứng dụngGiả sử một ứng dụng web của chúng ta có frontend được xây dựng với nuxtjs và được chạy ở cổng 3000. và api backend laravel chạy ở cổng 8000. vậy làm thế nào để forward vào ứng dụng này với Caddy. Rất đơn giản các bạn tạo 1 file Caddyfile với lệnh sau: 123456localhosttls internalreverse_proxy localhost:3000route &#x2F;api&#x2F;* &#123; uri strip_prefix &#x2F;api reverse_proxy localhost:9000 vậu là chúng ta đã cấu hình xong ứng dụng rồi với:Client: localhostServer API: localhost/api/ Trên đây là 2 cách cấu hình phổ biến của caddy. Thử so sánh qua 2 cách cấu hình này nhé. bạn có thể tham khảo trên trang chủ tại đây https://caddyserver.com/docs/getting-started So sánh JSON và CaddyfileSo sánh ưu và nhược điểm của json và caddyfile: Kết luậnCaddy vẫn còn khá mới mẻ. và đang được cộng đồng phát triển tích cực. Có lẽ một ngày không xa nó sẽ trở lên phổ biến. vậy hãy tìm kiểu nó ngay ngày hôm nay nhé các pro.Chào, Thân ái và quết thắng !!! Tham khảo : https://caddyserver.com/ https://www.marketenterprise.vn/","categories":[],"tags":[{"name":"Caddy Server","slug":"Caddy-Server","permalink":"https://phamtuananh1996.github.io/tags/Caddy-Server/"}]},{"title":"Xây dựng một website cực nhanh với Hexo và github pages","slug":"xay-dung-mot-website-cuc-nhanh-voi-hexo-va-github-pages","date":"2020-06-01T08:26:57.000Z","updated":"2024-01-04T00:39:10.962Z","comments":true,"path":"2020/06/01/xay-dung-mot-website-cuc-nhanh-voi-hexo-va-github-pages/","link":"","permalink":"https://phamtuananh1996.github.io/2020/06/01/xay-dung-mot-website-cuc-nhanh-voi-hexo-va-github-pages/","excerpt":"","text":"Mở đầuBạn nghĩ sao về việc có 1 blog các nhân cho riêng mình. Vừa là nơi chia sẻ kiến thức của bản thân đồng thời cũng là 1 kênh để PR cho bản thân. Nhưng bạn lại không muốn mất quá nhiều thời gian để build lại blog từ đầu rồi là chọn công nghệ backend dùng gì fronend dùng gì. Rồi phải bỏ 1 số tiền cũng kha khá để thuê hosting với tên miền. Chưa kể đến là bạn không phải dân dev web thì sao? Với hexo và github pages sẽ giải quyết các vấn đề trên giúp bạn ! Hexo là gìHexo là một blog framework mạnh mẽ, nó tạo static web một cách đơn giản và nhanh chóng hoàn toàn bằng NodeJS. Bạn có thể viết bài bằng Markdown hoặc các markup languages khác. Bắt đầu ngay thôi nàoVới hexo thì rất đơn giản để có ngay 1 website tĩnh với các câu lệnh sau: 12345$ npm install hexo-cli -g$ hexo init blog$ cd blog$ npm install$ hexo server Vậy là xong tiếp theo là truy cập vào đường dẫn http://localhost:4000 và xem kết quả: Và done . Rất đơn giản phải không nào Tiếp theo là lên chọn 1 cái template thật lung linh , hexo cung cấp sẵn cho chúng khoảng 311 Themes tha hồ lựa chọn các bạn có thể xem qua ở đây: https://hexo.io/themes/ Mình chọn đại 1 theme và add vào website của mình: https://github.com/cofess/hexo-theme-pure Tiếp theo là clone về và để ở thư mục blog/themes/pure : 1git clone https:&#x2F;&#x2F;github.com&#x2F;cofess&#x2F;hexo-theme-pure.git themes&#x2F;pure và sửa file config blog/_config.yml : 1theme: pure Vậy là đã apply thành công theme mới rồi. thử xem kết quả xem sao: Vậy là thành công rồi! Để thêm 1 page hoặc 1 post chúng ta chạy câu lệnh sau : 1hexo new [layout] &lt;title&gt; Layout sẽ có dạng sau: Layout Path post source/_posts page source draft source/_drafts Mình sẽ thêm 1 bài post vào website với câu lệnh: 1hexo new post first_post Sau khi chạy lênh xong thì nó có tạo ra cho chúng ta 1 file ở đường dẫn \\blog\\source_posts\\first-post.md mở file này lên và viết nội dung thôi: 123456---title: First postdate: 2020-05-31 00:51:14tags: [&#39;post&#39;]---this is first post Lưu lại và run và kết quả : Có 1 bài xuất hiện rồi. giờ thì copy các bài đã viết từ viblo sang thôi và chỉnh sửa 1 số nội dung về profile ở trong file \\blog\\themes\\pure_config.yml Vậy là cũng có cái blog sương sương rồi. Các bạn hoàn toàn có thể tạo ra cá page khác nữa như page about ….. Deploy website lên github pagesViệc tạo Github Pages khá đơn giản, trước tiên bạn phải có một tại khoản Github, tạo mới một repo với name theo định dạng .github.io , vì username account github của mình là phamtuananh1996 nên mình sẽ tạo một repo với name là phamtuananh1996.github.io Khi đã tạo thành công Github Pages việc tiếp theo của chúng ta là sinh ra static web và deploy lên Github Pages để host. Khi đã deploy thì địa chỉ truy cập vào blog của bạn sẽ là: .github.io . Việc sinh ra static web và deploy trở nên khá đơn giản với Hexo chúng ta chỉ cần sửa file blog/_config.yml với nội dung như sau: 123deploy: type: git repo: https:&#x2F;&#x2F;github.com&#x2F;phamtuananh1996&#x2F;phamtuananh1996.github.io.git Thay username thành username của các bạn. Tiến hành cài thêm plugin hexo-deployer-git : 1$ npm install hexo-deployer-git -save Để deploy thì run 2 lệnh sau: 12$ hexo generate$ hexo deploy Và kết quả là đây: https://phamtuananh1996.github.io/ Vậy là xong ! Kết luận Chỉ chưa mất đến 5 phút là bạn đã có 1 blog hoàn chỉnh với hexo và github pages rồi. còn chần chờ gì nữa mà không khám phá hexo ngay. trên đây mình chỉ giới thiệu qua các chức năng cơn bản nhất thôi . Các bạn có thể tìm hiểu thêm ở https://hexo.io/ Chào ,Thân ái và quyêt thắng :heart_eyes::heart_eyes::heart_eyes::heart_eyes:","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://phamtuananh1996.github.io/tags/hexo/"}]},{"title":"Map, Filter, Reduce ... JavaScript","slug":"refactor-loai-bo-for-khoi-ung-dung-javascript-cua-ban","date":"2020-05-19T16:28:27.000Z","updated":"2024-01-04T00:39:10.962Z","comments":true,"path":"2020/05/19/refactor-loai-bo-for-khoi-ung-dung-javascript-cua-ban/","link":"","permalink":"https://phamtuananh1996.github.io/2020/05/19/refactor-loai-bo-for-khoi-ung-dung-javascript-cua-ban/","excerpt":"","text":"Mở đầuBài viết này mình nhắm tới những người mới bắt đầu với Javascript hoặc những người mới bắt đầu làm việc với Javascript . Nhằm giúp refactor lại code nếu bạn gặp 1 số trường hợp dưới đây. Và thông qua đó giúp các bạn hiêu hơn về higher-order functions như map, reduce, and filter ….. Tại sao lại sử dụng map, filter, reduce …. Nhìn code sẽ dễ đọc hơn rất nhiều Dễ hiểu hơn Dễ dàng debug Tránh thay đổi mảng ban đầu, do đó, giảm thiểu những rủi ro có thể xảy ra . Không cần quản lí vòng lặp Hãy nhớ rằng nó luôn được trả về trong callback1, Lặp qua tất cả các phần tử và nhận về 1 mảng đã sửa đổiĐôi khi chúng ta có một mảng các object muốn sửa đổi / thêm các thuộc tính của từng đối tượng , cụ thể giả sử chúng ta có thể có một mảng các string mà ta sẽ biến tất cả chúng thành chữ thường . Trên thực tế có thể có vô số tình huống ở đó Map sẽ giúp chúng ta xử lý 1 cách dễ dàng . Using for 12345var names = [\"Jack\", \"Jecci\", \"Ram\", \"Tom\"];var upperCaseNames = [];for(let i=0, totalNames = names.length; i&lt; totalNames ; i= i +1) &#123; upperCaseNames[i] = names[i].toUpperCase();&#125; Using map 12var names = [\"Jack\", \"Jecci\", \"Ram\", \"Tom\"];var upperCaseNames = names.map(name =&gt; name.toUpperCase()); Chú ý: Nếu bạn sử dụng map .Thì bạn sẽ không dùng được break, continue, return trong khi lặp . nếu muốn sử dụng chúng hãy dùng every hoặc some 2, Lặp qua tất cả các phần tử và thực hiện một hành độngUsing for 1234567function print(name) &#123; console.log(name);&#125;var names = [\"Jack\", \"Jecci\", \"Ram\", \"Tom\"];for(let i=0, totalNames = names.length; i&lt; totalNames ; i= i +1) &#123; print(names[i])&#125; Using forEach 12var names = [\"Jack\", \"Jecci\", \"Ram\", \"Tom\"];names.forEach(name=&gt; print(name)); 3, Lọc các phần tử của mảngTôi tin rằng trong quá trình bạn code bạn đã gặp tình huống phải lọc 1 số item ra khỏi mảng ban đầu . Ví dụ: bài toán lọc các phần tử chăn trong mảng dưới đây để làm được điều đó chúng ta phải xử lí khá rắc rối , nhưng với filter thì bạn có thể sử dụng nó 1 cách dễ dàng. Using for 1234567891011function isOdd(n) &#123; return n %2;&#125;var numbers = [1,2,3,4,5];var odd = [];for(let i=0, total = numbers.length; i&lt; total ; i= i +1) &#123; let number = numbers[i]; if( isOdd(number) ) &#123; odd.push(number); &#125;&#125; Using filter 12var numbers = [1,2,3,4,5, 6, 7]var odd = numbers.filter(n =&gt; n%2); // single line Bạn thấy đấy ngắn hơn raart nhiều phải không . 4, Tính toán các giá trị thành một giá trị duy nhấtVí dụ, với một dãy số bạn có thể dễ dàng tính được tổng của tất cả các giá trị. Using for 12345var numbers = [1,2,3,4,5]var result = 0;for(let i=0, total = numbers.length; i&lt; total ; i= i +1) &#123; result = result + numbers[i];&#125; Using reduce 123456var numbers = [1,2,3,4,5,6,7];function sum(accumulator, currentValue)&#123; return accumulator + currentValue;&#125;var initialVal = 0;var result = numbers.reduce(sum, initialVal); 5, Kiểm tra xem một mảng có chứa giá trị nào đó khôngĐôi khi bạn muốn kiểm tra 1 phần tử nào đó có tồn tại trong 1 array cho trước hay không. hãy nghĩ đến some Using for 1234567var names = [\"ram\", \"raj\", \"rahul\"];for(let i=0, totalNames = names.length; i&lt; totalNames ; i= i +1) &#123; if(names[i] === \"rahul\") &#123; console.log(\"%c found rahul\", \"color:red\"); return; &#125;&#125; Using some 12345var names = [\"ram\", \"raj\", \"rahul\"];let isRahulPresent = names.some(name =&gt; name===\"rahul\");if(isRahulPresent) &#123; console.log(\"%c found rahul\", \"color:red\"); &#125; 6, kiểm tra xem mọi phần tử trong một mảng có đáp ứng điều kiện khôngUsing for 123456var num = [1,2,3,4,5, 0];for(let i=0, total = numbers.length; i&lt; total ; i= i +1) &#123; if(num &lt;= 0) &#123; console.log(\"0 present in array\"); &#125;&#125; Using some 12345var num = [1,2,3,4,5, 0];var isZeroFree = num.every(e =&gt; e &gt; 0);if(!isZeroFree) &#123; console.log(\"0 present in array\");&#125; Kết luậnHy vọng qua bài viết này các bạn có thể tham khảo để refactor ứng dụng của mình 1 cách thông mình hơn. giúp cho code dễ đọc dễ hiểu và dễ maintain, debug hơn. :heart_eyes::heart_eyes::heart_eyes::heart_eyes::heart_eyes: Thanks for reading. I hope you upvote this.","categories":[],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://phamtuananh1996.github.io/tags/javascript/"}]},{"title":"Những chrome extension mà developer nên tham khảo","slug":"nhung-chrome-extension-ma-developer-nen-tham-khao","date":"2020-05-01T16:38:11.000Z","updated":"2024-01-04T00:39:10.962Z","comments":true,"path":"2020/05/01/nhung-chrome-extension-ma-developer-nen-tham-khao/","link":"","permalink":"https://phamtuananh1996.github.io/2020/05/01/nhung-chrome-extension-ma-developer-nen-tham-khao/","excerpt":"","text":"Mở đầuChào các viblo fan. Hôm này mình sẽ chia sẻ 10 extension mà mình hiện tại đang dùng các bạn có thể tham khảo nhé. hy vọng giúp ích được cho các dev nhà mình. Nếu bạn có extension hay và hữu ích thì đừng ngại ngần hãy comment ngay xuống dưới post này nhé. hoặc bạn hoàn toàn có thể viết tiếp phần 2 nhé ! Lét sờ tát :heart_eyes::heart_eyes::heart_eyes::heart_eyes::heart_eyes: 1, Vue.js devtoolsNếu bạn là một dev yêu thích và đang làm việc với vuejs thì các bạn đừng bỏ qua extension này nhé. Và được chính https://vuejs.org/ cung cấp nhé. bạn hoàn toàn có thể yên tâm và sử dụng. Vue.js devtools giúp bạn debugging ứng dụng vuejs của bạn một cách trực quan dễ hiểu Cho phép quản lý Component, vuex, events. routing ….. 2, React Developer ToolsCòn nếu bạn cũng yêu thích cả reactjs thì cũng có riêng 1 extension cho reactjs. Các bạn có thể tải về tại đây và do Facebook cung cấp vì thế các bạn cũng yên tâm sử dụng nhé. Giống như Vue.js devtools thì React Developer Tools giúp bạn debugging ứng dụng reactjs 3, Todoist for ChromeĐây là extension mình rất yêu thích vì nó giúp mình quản lý các task cần làm trong ngày mà không phải mở quá nhiều các ứng dụng quản lý khác. ngoài ra còn có thể lập lịch theo ngày nữa rất hưu ích phải không nào! Các bạn có thể thêm tiện ích tuyệt vời này vào trình duyệt tại đây 4, Json-viewerJson là 1 dạng dữ liệu quá quen thuộc với developer rồi nhỉ. Nhưng thật khó chịu khi mà mở trình duyệt lên https://viblo.asia/api/posts/newest?limit=20 mà trình duyệt lại trả về 1 đoạn json như này: Thì Json-viewer là 1 lựa chọn hoàn hảo để format đoạn json kia để dễ nhìn hơn như này: Nhìn đẹp hơn đúng không nào còn chần chờ gì nữa mà không thêm ngay cho trình duyệt của mình. 5, Medium-unlimitedMình hay lên đọc medium. Nhưng thỉnh thoảng thấy bài đang đọc hay thì Medium bắt nạp tiên để đọc bài hay gì gì ấy mà mình không đọc được nữa. Thì mình phát hiện ra tiện ích này Medium-unlimited có thể mở khóa bài viết trên Medium ấy . các bạn có thể tải về Tại đây 6, Viblo’s News FeedLà fan viblo mà chưa có extension này thì người ta cười cho ấy nhỉ. Các bạn thêm vào ngay đi nhé tại đây nè Extension giúp mình có được các bài viết mới nhất trên viblo cũng như không bỏ qua bất cứ thông báo nào của viblo. Rất hữu ích cho 5 sao. 7, Grammarly for ChromeĐây là 1 extension có mất phí và miễn phí giúp chúng ta sửa lỗi ngữ phát tiếng anh rất tiện và hữu ích cho tất cả mọi người không riêng gì dev đâu nhé. Thêm ngay tại đây 8, Lorem IpsumCái này thì đặc biệt hữu ích khi các bạn muốn test trường input mà “bầu bí” không biết ghi gì vào ô input thì extension là 1 lựa chọn cho bạn đấy! Chỉ cần vài thao tác là bạn đã có 1 đoạn văn bản đẹp để làm dữ liệu test rồi . 9, Google DịchÔi. cái tên nói lên tất cả rồi nhỉ Mình nghĩ các bạn đều có cả rồi nhỉ .nếu chưa có thì thêm ngay tại đây nhé 10, OctotreeNào các dân dev nhìn ảnh này là biết extension này là gì luôn nhé ! Nếu thấy hay và hưu ích thì tải ngay tại đây nhé https://www.octotree.io/ Kết luậnNhư mình đang PR cho các extension trên ấy các bác nhỉ. nhưng tin mình đi có những extension trên cũng đỡ vất vả được phần vào với công việc hiện tại của dev đấy. nếu có extension hay ho các bạn nhớ comment ở post này để mọi người tham khảo nhé.Nếu thấy hữu ích thì ngại gì mà không ấn thương thương nhỉ. :heart_eyes::heart_eyes::heart_eyes::heart_eyes: Thân ái và quyết thắng !!!!","categories":[],"tags":[{"name":"extension","slug":"extension","permalink":"https://phamtuananh1996.github.io/tags/extension/"}]},{"title":"Các trick search google mà developer nên biết","slug":"cac-trick-search-google-ma-developer-nen-biet","date":"2020-04-15T16:01:59.000Z","updated":"2024-01-04T00:39:10.946Z","comments":true,"path":"2020/04/15/cac-trick-search-google-ma-developer-nen-biet/","link":"","permalink":"https://phamtuananh1996.github.io/2020/04/15/cac-trick-search-google-ma-developer-nen-biet/","excerpt":"","text":"Mở đầuĐối với dân IT, kỹ năng tìm kiếm trên Google sẽ là “trợ thủ đắc lực” giúp bạn học tập và làm việc hiệu quả nhất. Bạn chỉ cần tập trung đọc hiểu, ghi nhớ, phân tích cốt lõi của một vấn đề, mọi thông tin còn lại đã có Google lo. Vậy làm sao để tìm kiếm trên Google và research paper hiệu quả nhất? Bài viết này sẽ giới thiệu 1 số mẹo thường dùng với google search đối với dev nhé. 1. Use an Exact Phrase Mô tả: Đây là cách tìm cụm từ chính xác bằng dấu ngoặc kép Syntax: “[keyword 1] [keyword 2]” [keyword 3] Ví dụ: Khi bạn tìm kiếm với từ khóa thuật toán sắp xếp nổi bọt và ngôn ngữ dùng là golang và bạn chỉ muốn kết quả trả về có chứa ngôn ngữ golang. bạn hãy thử: 2. Google Search Exclude Word Mô tả: Để có thể loại bỏ những từ tìm kiếm không quan trọng trong kết quả, bạn chỉ cần nhập dấu - đằng trước từ khóa mà bạn cần loại bỏ là được. Syntax: - [keyword to exclude] [keyword to include] Ví dụ: Vẫn là ví dụ kia nhưng lần này bạn không muốn kết quả trả về liên quan đến golang bạn hãy thử: Và cũng hưu ích khi bạn muốn kết quả tìm kiếm không trả về các trang quảng cáo bằng cách dùng - quảng cáo 3. Google Search Within a Website Mô tả: Tìm kiếm một từ trong trang web - sử dụng cú pháp trang web: URL trang web, theo sau là cụm từ tìm kiếm của bạn. sẽ hạn chế kết quả tìm kiếm và chỉ tìm kiếm trong trang web đó trang web đó. Syntax: site:[website URL] [keywords] Ví dụ: Bạn muốn tìm kiếm nội dung chỉ trong trang viblo thì bạn thử 4. Google Search Definitions Mô tả: Dễ dàng tìm thấy định nghĩa của một từ mà không cần phải đi đến một trang web từ điển bằng cách sử dụng cú pháp sau: Syntax: define:[keyword] Ví dụ: Bạn muốn định nghĩa thuật toán nổi bọt là gì hãy thử: 5. Google Search Wildcard (Missing or Unknown Words) Mô tả: Tìm kiếm kiểu này sẽ giúp bạn tự động điền 1 số từ bạn không nhớ dõ. nó sẽ có tắc dụng trong tìm kiếm lời bài hát hoặc là tiêu đề 1 cuốn sách nào đó mà bạn chỉ nhớ mang máng. Syntax: [keywords 1] * [keywords 2] Ví dụ: Bạn bạn vừa đi xem 1 bộ phim rất hay được chuyển thể từ truyện . mà bạn không nhớ dõ nó có tiêu đề là gì mà chỉ nhớ có từ mắt gì đó. không biết là “mắt liếc” hay “mắt lác” thì bạn hãy thử: 6. Google Search File Type Mô tả: Cái này sẽ giúp bạn tìm kiếm theo kiểu file ví dụ như .sql, .docx, .csv … Syntax: [keywords] filetype:[file type extension] Ví dụ: Bạn muốn tìm 1 file mà định dạng là .sql về quận huyện của việt nam chẳng hạn bạn hãy thử: 7. Google Images Search Mô tả: Giúp bạn tìm kiếm nhanh tên hình ảnh, mô tả và type. Syntax: [keyword] image type Ví dụ: Bạn chỉ muốn tìm kiếm anh gif bạn hãy thử : Lời kếtTrên đây là 1 số mẹo nhỏ nó có thể không giúp ích được nhiều với các vấn đề phổ biến nhưng lại rất hữu ích trong các vấn đề ít người gặp phải mà không may bạn lại mắc phải vấn đề đó. vì vậy hãy note lại nhé ! Và nếu có thể thì bạn nên search vấn đề của bạn bằng tiếng anh nhé! Hẹn gặp các bạn trong các bài viết lần sau. thân ái và quyết thắng !!!","categories":[],"tags":[{"name":"trick","slug":"trick","permalink":"https://phamtuananh1996.github.io/tags/trick/"}]},{"title":"Giao tiếp giữa các cửa sổ với Window.postMessage API","slug":"giao-tiep-giua-cac-cua-so-voi-windowpostmessage-api","date":"2020-03-15T13:22:08.000Z","updated":"2024-01-04T00:39:10.946Z","comments":true,"path":"2020/03/15/giao-tiep-giua-cac-cua-so-voi-windowpostmessage-api/","link":"","permalink":"https://phamtuananh1996.github.io/2020/03/15/giao-tiep-giua-cac-cua-so-voi-windowpostmessage-api/","excerpt":"","text":"Mở đầuBạn đã bao giờ có nhu cầu giao tiếp giữa các cửa sổ hoặc cửa sổ hiện tại và iframe bên trong chưa. như truyền data từ cửa sổ này đến cửa sổ kia và ngược lại. Vậy làm cách nào để làm được điều đó? thì window.postMessage api chính là giải pháp của bạn? chúng ta cùng tìm hiểu trong bài viết này nhé!! Cú pháp1targetWindow.postMessage(message, targetOrigin, [transfer]); Với các tham số được mô tả bằng bảng dưới đây: Tên Mô tả targetWindow Reference tới một windows hoặc iframe nào đó mà bạn muốn gửi message, giá trị này được trả về khi gọi hàm window.open hoặc tên, id của frame trong biến window.frames message Dữ liệu cần gửi đến targetOrigin, có thể là string hoặc objec ….. targetOrigin Là trang sẽ nhận được message này. Hoặc có thể là “*” thì message này sẽ được gửi đến mọi window target đến nó (Không khuyến khích dùng) Gửi MessageĐể dõ hơn mình sẽ tạo ra 2 cửa sổ window như này: Window 1 (http://localhost:8002/window-1) Window 2 (http://localhost:8002/window-2) Tiếp theo mình sẽ viết code js cho window 1 để gửi message cho window 2: 123456789101112131415161718192021&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;This is window 1&lt;/h1&gt; &lt;button onClick=\"sendHello()\"&gt;Send hello to window 2&lt;/button&gt;&lt;/body&gt;&lt;/html&gt;&lt;script&gt; function sendHello() &#123; var popup = window.open(\"http://localhost:8002/window-2\", 'window-2'); popup.postMessage(\"Hello, window-2! i am window-1\", \"http://localhost:8002/window-2\"); &#125;&lt;/script&gt; Nhận MessageTiếp theo viết code nhận message từ window-1 cho window-2 12345678910111213141516171819202122&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;This is window 2&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&lt;script&gt; window.addEventListener(\"message\", function (event) &#123; if (event.origin !== \"http://localhost:8001/window-1\") return; alert(event.data) &#125;);&lt;/script&gt; Các thuộc tính nhận được sẽ bao gồm: Tên Mô tả data Đối tượng được truyền đến origin Nguồn gốc của data truyền đến. bạn phải kiểm tra trường này để tranh trường hợp người khác giả mạo sender cũng như xử lý những message không liên quan tới mình source reference đến đối tượng cửa sổ đã gửi tin nhắn; bạn có thể sử dụng điều này để thiết lập giao tiếp hai chiều giữa hai cửa sổ với nguồn gốc khác nhau. Thành quả sẽ như thế này : Vấn đề về bảo mật Nếu trang web của bạn không muốn nhận message từ các trang khác gửi tới thì tuyệt đối không lắng nghe event message dưới đây: 1window.addEventListener(\"message\", receiveMessage, false); Nếu bạn bắt buộc phải nhận message từ những trang khác thì luôn luôn xác minh danh tính của trang gửi đến bằng cách sử dụng origin 12if (event.origin !== \"http://localhost:8001/window-1\") return; Bất kỳ window nào cũng có thể gửi tin nhắn đến các window khác, và bạn không phải biết tin nhắn đó có độc hại hay không vì vậy không chỉ xác minh danh tính của window gửi đến mà bạn còn phải luôn xác minh cú pháp của tin nhắn nhận được Luôn chỉ định chính xác targetOrigin.và không dùng “*” khi bạn sử dụng postMessage để gửi data đến window khác. Tổng kếtHy vọng qua bài này bạn có thể sự dụng window.postMessage để giao tiếp giữa các window 1 cách an toàn và hiệu quả nhất. :100::100::100::100::100::100::astonished:","categories":[],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://phamtuananh1996.github.io/tags/javascript/"}]},{"title":"Tạo mechanism webhook cho riêng mình với laravel notification.","slug":"tao-mechanism-webhook-cho-rieng-minh-voi-laravel-notification","date":"2019-12-15T08:51:17.000Z","updated":"2024-01-04T00:39:10.962Z","comments":true,"path":"2019/12/15/tao-mechanism-webhook-cho-rieng-minh-voi-laravel-notification/","link":"","permalink":"https://phamtuananh1996.github.io/2019/12/15/tao-mechanism-webhook-cho-rieng-minh-voi-laravel-notification/","excerpt":"","text":"Mở đầuHôm nay mình sẽ hướng dẫn cho các bạn cách tạo một webhook mechanism cho riêng mình. từ lâu chúng ta đã biểt đến và dùng chức năng webhook của github, facebook … .Đại loại là họ sẽ cho mình nhập 1 Payload URL và chọn sự kiện để khi có sự kiện đó thì github cũng send http request đến Payload URL của người dùng. Tương tự vậy, ở demo nay chúng ta sẽ cho phép người dùng nhập webhook url của họ. và khi có 1 sự kiện nào đó trên hệ thống chúng ta thì hệ thống cũng tiến hành send http request đến url của họ (request gồm body và header). Webhook là gì?Cài đặt DependenciesĐầu tiên chúng ta cần cài đặt package để cho việc gửi HTTP request. Ở đây mình dùng thư viện khá phổ biến là Guzzle: 1composer require guzzlehttp&#x2F;guzzle:~6.0 Migrate dữ liệuTiếp theo chúng ta tạo bảng user. ở ví dụ demo này thì mình sẽ lưu name, email, password, api_token và đặc biệt có thêm trường webhook_url đây chính là enpoint của người dùng khi đăng ký Webhook End Point trên hệ thống của chúng ta. 12345678910111213141516171819202122232425262728293031323334353637&lt;?phpuse Illuminate\\Support\\Facades\\Schema;use Illuminate\\Database\\Schema\\Blueprint;use Illuminate\\Database\\Migrations\\Migration;class CreateUsersTable extends Migration&#123; /** * Run the migrations. * * @return void */ public function up() &#123; Schema::create('users', function (Blueprint $table) &#123; $table-&gt;increments('id'); $table-&gt;string('name'); $table-&gt;string('email')-&gt;unique(); $table-&gt;string('password'); $table-&gt;string('api_key'); $table-&gt;string('webhook_url')-&gt;nullable(); $table-&gt;rememberToken(); $table-&gt;timestamps(); &#125;); &#125; /** * Reverse the migrations. * * @return void */ public function down() &#123; Schema::dropIfExists('users'); &#125;&#125; Tạo modelTiếp theo là tạo model User 12345678910111213141516171819202122232425262728293031323334353637383940414243namespace App;use Illuminate\\Notifications\\Notifiable;use Illuminate\\Foundation\\Auth\\User as Authenticatable;class User extends Authenticatable&#123; use Notifiable; /** * The attributes that are mass assignable. * * @var array */ protected $fillable = [ 'name', 'email', 'password', 'api_key', 'webhook_url', ]; /** * The attributes that should be hidden for arrays. * * @var array */ protected $hidden = [ 'password', 'remember_token', 'api_key', ]; /** * @return string */ public function getSigningKey() &#123; return $this-&gt;api_key; &#125; /** * @return string */ public function getWebhookUrl() &#123; return $this-&gt;webhook_url; &#125;&#125; Model này khá dễ hiểu rồi. mình có thêm 2 hàm getSigningKey và getWebhookUrl để lấy api_key và webhook_url Tạo notification channelsTiếp theo chúng ta cần tạo 1 notification channel. Thì laravel có hỗ trợ chúng ta tạo cũng như custom notification channels ở Tại đây. Tiến hành tạo WebhookChannel 123456789101112131415161718192021222324252627282930&lt;?phpnamespace App\\Channels;use GuzzleHttp\\Client;use Illuminate\\Log\\Logger;use Illuminate\\Notifications\\Notifiable;use Illuminate\\Notifications\\Notification;class WebhookChannel&#123; /** * @var Client */ private $client; /** * @var Logger */ private $logger; public function __construct(Client $client, Logger $logger) &#123; $this-&gt;client = $client; $this-&gt;logger = $logger; &#125; /** * @param Notifiable $notifiable * @param Notification $notification * @throws WebHookFailedException */ public function send($notifiable, Notification $notification) &#123; &#125;&#125; Function send là nơi chúng ta viết code để thực hiện việc send http request đến endpoint (webhook_url) của người dùng. Tiếp theo mình tiến hành viết hàm send Đầu tiên , 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849/** * @param Notifiable $notifiable * @param Notification $notification * @throws WebHookFailedException */ public function send($notifiable, Notification $notification) &#123; if (method_exists($notification, 'toWebhook')) &#123; $body = (array) $notification-&gt;toWebhook($notifiable); &#125; else &#123; $body = $notification-&gt;toArray($notifiable); &#125; $timestamp = now()-&gt;timestamp; $token = str_random(16); // Tạo header cho request webhook . cái này để người dùng có thể xác minh request gửi lên là từ hệ thống của chúng ta mà không phải từ hệ thông khác $headers = [ 'timestamp' =&gt; $timestamp, 'token' =&gt; $token, 'signature' =&gt; hash_hmac( 'sha256', $token . $timestamp, $notifiable-&gt;getSigningKey() ), ]; // Tiếp theo chúng ta tạo 1 request sử dụng GuzzleHttp để gửi request $request = new Request('POST', $notifiable-&gt;getWebhookUrl(), $headers, json_encode($body)); try &#123; $response = $this-&gt;client-&gt;send($request); // kiểm tra nếu không nhận được status code = 200 thì sẽ báo lỗi if ($response-&gt;getStatusCode() !== 200) &#123; throw new WebHookFailedException('Webhook received a non 200 response'); &#125; // Lưu lại log $this-&gt;logger-&gt;debug('Webhook successfully posted to '. $notifiable-&gt;getWebhookUrl()); return; &#125; catch (ClientException $exception) &#123; if ($exception-&gt;getResponse()-&gt;getStatusCode() !== 410) &#123; throw new WebHookFailedException($exception-&gt;getMessage(), $exception-&gt;getCode(), $exception); &#125; &#125; catch (GuzzleException $exception) &#123; throw new WebHookFailedException($exception-&gt;getMessage(), $exception-&gt;getCode(), $exception); &#125; $this-&gt;logger-&gt;error('Webhook failed in posting to '. $notifiable-&gt;getWebhookUrl()); &#125; Vậy là xong 1 notification channels. Tiếp theo mình chỉ việc gọi Webhook notification và dùng thôi. Thực hiện notification webhookTiếp theo chúng ta tạo notification bằng lệnh 1php artisan make:notification SomethingHappenedNotification Tiến hành viết code. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;?phpnamespace App\\Notifications;use App\\Channels\\WebhookChannel;use Illuminate\\Bus\\Queueable;use Illuminate\\Notifications\\Notification;use Illuminate\\Contracts\\Queue\\ShouldQueue;class SomethingHappenedNotification extends Notification implements ShouldQueue&#123; use Queueable; /** * @var string */ private $message; /** * Create a new notification instance. * * @param string $message */ public function __construct($message) &#123; // $this-&gt;message = $message; &#125; /** * Get the notification's delivery channels. * * @param mixed $notifiable * @return array */ public function via($notifiable) &#123; return [WebhookChannel::class]; &#125; public function toWebhook($notifiable) &#123; return [ 'message' =&gt; $this-&gt;message, ]; &#125; /** * Get the array representation of the notification. * * @param mixed $notifiable * @return array */ public function toArray($notifiable) &#123; return []; &#125;&#125; ok. vậy là đã xong . giờ chúng ta có thể tạo các sự kiện và send notification đến endpoint mà người dùng đã đăng ký. 123use App\\Notifications\\SomethingHappenedNotification;$user-&gt;notify(new SomethingHappenedNotification($massage)); Kết luậnCảm ơn các bạn đã đọc đến đây. Tham khảo : https://laravel.com/docs/5.6/notifications#custom-channels, Source code: https://github.com/phamtuananh1996/laravel-webhook-demo","categories":[],"tags":[{"name":"laravel","slug":"laravel","permalink":"https://phamtuananh1996.github.io/tags/laravel/"}]},{"title":"Chống sao chép hình ảnh bất hợp pháp với watermark image","slug":"chong-sao-chep-hinh-anh-bat-hop-phap-voi-watermark-image","date":"2019-11-11T07:31:21.000Z","updated":"2024-01-04T00:39:10.946Z","comments":true,"path":"2019/11/11/chong-sao-chep-hinh-anh-bat-hop-phap-voi-watermark-image/","link":"","permalink":"https://phamtuananh1996.github.io/2019/11/11/chong-sao-chep-hinh-anh-bat-hop-phap-voi-watermark-image/","excerpt":"","text":"watermark image là gì?Gần đây mình thấy trên viblo có mội số bài viết khá hay và chất lượng. Nhưng điều đáng buồn là các trang web về công nghệ khác đã copy các bài viết này mà không xin phép tác giả hay có thì cũng chỉ là ghi link tới bài viết rất nhỏ ở cuối bài.Cũng chính vì lý do đó mà các tác giả của viblo gần đây đã gắn thêm watermark vào hình ảnh của mình. Như chính bài này sau 1 thời gian thì cũng đã bị copy https://topdev.vn/blog/chong-sao-chep-hinh-anh-bat-hop-phap-voi-watermark-image/ tại trang này. :joy::joy::joy::joy::joy: dưới đây là 1 ví dụ về watermark: bạn có thể thấy ở góc bottom-right có ảnh cái mẹt của mình. và như để khẳng định nguồn hình ảnh bài viết này là của mình. :rofl::rofl::rofl::rofl::rofl::rofl::rofl::rofl::rofl::rofl::rofl: vậy watermark là gì ? Khái niệm Watermark là gì? Watermark được hiểu là một dấu hiệu nhận biết như text, Image, logo hay slogan của riêng bạn hoặc công ty bạn được in hoặc làm chìm, làm mờ phía đăng sau bức ảnh. Mục đích của việc làm này chính là đánh dấu hoặc đặt ra dấu hiệu nhận biết đó là sản phẩm của bạn làm ra. Khi người khác lấy ảnh hoặc tài liệu của bạn để sử dụng cho website của họ. Mặc định người ta biết rằng đó là ảnh của bạn làm ra. Ý nghĩa của việc sử dụng Watermark là gì? Chống sao chép bất hợp pháp hoặc chưa có sự đồng ý của chủ nhân tác phẩm. Đặc biệt trong bán hàng online trên mạng, hay thậm chí việc sử dụng lại hình ảnh của nhau là điều thường xảy ra. Khi đối thủ cạnh tranh của bạn sử dụng lại hình ảnh của bạn một cách trái phép để làm công cụ riêng của họ thì việc gắn Watermark cho tác phẩm của mình là điều cần thiết. Bạn có thể sử dụng logo chìm, hotline hoặc tên của bạn làm mờ phía sau ảnh. Điều này đảm bảo cho bạn dễ dàng bảo vệ được tác phẩm của mình. Hỗ trợ quảng bá và tăng độ phủ của thương hiệu Việc sử dụng Watermark là một trong nhiều yếu tố được các thương hiệu nổi tiếng sử dụng để quảng bá thương hiệu của bạn dễ dàng. Ngoài việc bảo vệ bản quyền tác phẩm, bạn còn có thể sử dụng Watermark làm một trong các công cụ để giới thiệu công ty. Nếu ảnh của bạn chất lượng, sẽ có rất nhiều người lấy ảnh của bạn để chia sẻ và đăng tải. Điều này không hề có hại mà ngược lại sẽ giúp doanh nghiệp của bạn được quảng bá dễ dàng hơn rất nhiều. Đây chính là điểm mạnh của Watermark giúp bạn phát triển được tiềm năng thương hiệu. Tạo ra điểm nhấn của tác phẩm Sự chăm chút trong tác phẩm của bạn từ chi tiết tới Watermark cũng có thể giúp bạn gây ấn tượng với người xem. Ngoài việc đóng dấu bản quyền, chúng còn đem lại một điểm nhấn sáng tạo cho bức hình của chính bạn hoặc của công ty. Demo watermark image với intervention Lý thuyết vậy đủ rồi giờ thực hành thôi Cài đặt thư viện Yêu cầu môi trường: PHP &gt;= 5.4 Fileinfo Extension GD Library (&gt;=2.0) Imagick PHP extension (&gt;=6.5.7) Đầu tiên chạy lệnh này để tiến hành clone thư viện về project: 1composer require intervention&#x2F;image Trong file config/app.php thêm providers 1Intervention\\Image\\ImageServiceProvider::class và thêm aliases 1&#39;Image&#39; &#x3D;&gt; Intervention\\Image\\Facades\\Image::class Vậy là xong phần cài đặt tiếp theo bắt tay vào code chức năng watermark image. DemoNếu bạn truy cập vào document của thư viện tại đây thì đã có hẳn một ví dụ về việc watermark này: 1234567891011// open an image file$img = Image::make('public/foo.jpg');// now you are able to resize the instance$img-&gt;resize(320, 240);// and insert a watermark for example$img-&gt;insert('public/watermark.png');// finally we save the image as a new file$img-&gt;save('public/bar.jpg'); Dựa vào ví dụ của doc thì mình cần 2 ảnh 1 là ảnh cần watermark và 1 ảnh watermark. Mình sẽ dùng 2 ảnh này cho nó cute! Ảnh gốc (ảnh mình muốn gắn watermark) có tên foo.jpg Ảnh watermark ( dùng luôn cái mặt mình ) có tên watermark.png 2 ảnh này mình để trong fodel public của project Tiến hành code thôi. mình sửa lại đoạn code ví dụ của doc 1 chút : 123456789101112131415161718192021222324252627282930313233// Mở ảnh gốc$img = Image::make('public/foo.jpg');// Mở ảnh watermark$watermark = Image::make('public/watermark.jpg');//làm mờ ảnh watermark$watermark = $watermark-&gt;opacity(50);// resize ảnh watermark (= 1/10 ảnh gốc)$resizePercentage = 10/100;$watermarkSize = round($image-&gt;width() * $resizePercentage, 2);$watermark-&gt;resize($watermarkSize, null, function ($constraint) &#123; $constraint-&gt;aspectRatio();&#125;)//set position : vị trí của ảnh watermark ở đây mình để góc dười bên phải$position = 'bottom-right'; // có thể chọn các vị trí:// top-left (default)// top// top-right// left// center// right// bottom-left// bottom// bottom-right// Tiến hành watermark $img-&gt;insert($watermark, $position);// finally we save the image as a new file$img-&gt;save('public/bar.jpg'); vậy là done! Kết luậnQua bài viết này mình mong các bạn có thêm 1 sự lựa chọn cho website của mình về việc bản quyền. Chúc các bạn thành công :heart_eyes::heart_eyes::heart_eyes::heart_eyes::heart_eyes: Tài liệu tham khảo: https://haviweb.com.vn/watermark-la-gi/ http://image.intervention.io","categories":[],"tags":[{"name":"laravel","slug":"laravel","permalink":"https://phamtuananh1996.github.io/tags/laravel/"}]},{"title":"Biến ảnh sprites thành ảnh động với vuejs","slug":"bien-anh-sprites-thanh-anh-dong-voi-vuejs","date":"2019-09-15T04:28:12.000Z","updated":"2024-01-04T00:39:10.946Z","comments":true,"path":"2019/09/15/bien-anh-sprites-thanh-anh-dong-voi-vuejs/","link":"","permalink":"https://phamtuananh1996.github.io/2019/09/15/bien-anh-sprites-thanh-anh-dong-voi-vuejs/","excerpt":"","text":"Ảnh sprites là gì?Sprites là một hình ảnh lớn được tạo ra bằng cách gộp nhiều ảnh nhỏ lại với nhau theo một cách được định trước sao cho có thể tái sử dụng lại từng ảnh nhỏ mà không bị ảnh hưởng bởi các ảnh khác. Kiểu như thế này : Hoặc các sticker của fb: Mục tiêu của bài viết Qua bài viết này mình muốn chuyển các ảnh sprites đứng yên kia thành anh động bằng cách viết 1 component vuejs. Các bạn cũng có thể tham khảo cách khác bằng canvas của HTML5 qua bài viết này : https://viblo.asia/p/cach-tao-anh-giong-gif-bang-javascript-khong-phai-ai-cung-biet-YWOZr6xrZQ0 Ưu điểm so với việc dùng ảnh gif Tôi ưu hơn performance web vì thay vì load ảnh gif thì thay vào đó là anh png. Có thể tương tác với ảnh (vd: có thể cho ảnh dừng lại hoặc tiếp tục chuyển động, hoặc chuyển động vs số lần nhất định rồi ngừng). Tùy chỉnh chuyển động nhanh chậm của ảnh.Xây dựng component vuejsHướng giải quyếtĐơn giản chỉ là dùng js để thay đổi background-position qua từng phần của bước ảnh và lặp lại khi đến ảnh cuối vậy là mình đã có 1 ảnh tương tự gif. Viết componentKhởi tạo các props và style cho component: 12345678910111213141516171819202122232425262728293031&lt;template&gt; &lt;div :style=\"style\"&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import &#123; clearInterval &#125; from 'timers';export default &#123; props: &#123; image: String, // Url image height: Number, // chiều cao của component width: Number, // chiều rộng của component loop: Number, // số lần lặp của ảnh frame: Number, // số hình chạy qua trên 1 giây max: Number, // số hình của ảnh column: Number, // số cột row: Number, // số dòng &#125;, data()&#123; // khởi tạo style ban đầu return &#123; style: &#123; width: this.width + 'px', height: this.height + 'px', background: `url($&#123;this.image&#125;)`, backgroundSize: `$&#123;this.width * this.column&#125;px $&#123;this.height * this.row&#125;px`, backgroundPosition: '0px 0px' &#125; &#125; &#125;, Tiếp theo chúng ta viết function để ảnh có thể chuyển động. 12345678910111213141516171819202122232425262728293031methods: &#123; play() &#123; let i = 0 let position = &#123; x: 0, y: 0, loop: 0, &#125; // khởi tạo vị trí ban đầu const playTimer = setInterval(() =&gt; &#123; i++; if(i % this.column) &#123; position.x -= this.width; &#125; else &#123; position.y -= this.height; position.x = 0; &#125; if (i == this.max) &#123; i = 0 position.y = 0; position.x = 0; position.loop++; if(position.loop &gt;= this.loop) &#123; clearInterval(playTimer) &#125; &#125; this.$set(this.style, 'backgroundPosition', `$&#123;position.x&#125;px $&#123;position.y&#125;px`) // set lại style &#125;, 1000/this.frame); &#125; &#125; Gọi hàm play() 123mounted() &#123; this.play() &#125;, Vậy là chúng ta đã viết xong component để ảnh chuyện động. full code : 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768&lt;template&gt; &lt;div :style=\"style\"&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: 'HelloWorld', props: &#123; image: String, height: Number, width: Number, loop: Number, frame: Number, max: Number, column: Number, row: Number, &#125;, mounted() &#123; this.play() &#125;, data()&#123; return &#123; style: &#123; width: this.width + 'px', height: this.height + 'px', background: `url($&#123;this.image&#125;)`, backgroundSize: `$&#123;this.width * this.column&#125;px $&#123;this.height * this.row&#125;px`, backgroundPosition: '0px 0px' &#125; &#125; &#125;, methods: &#123; play() &#123; let i = 0 let position = &#123; x: 0, y: 0, loop: 0, &#125; const playTimer = setInterval(() =&gt; &#123; i++; if(i % this.column) &#123; position.x -= this.width; &#125; else &#123; position.y -= this.height; position.x = 0; &#125; if (i == this.max) &#123; i = 0 position.y = 0; position.x = 0; position.loop++; if(position.loop &gt;= this.loop) &#123; clearInterval(playTimer) &#125; &#125; this.$set(this.style, 'backgroundPosition', `$&#123;position.x&#125;px $&#123;position.y&#125;px`) &#125;, 1000/this.frame); &#125; &#125;&#125;&lt;/script&gt; Việc tiếp theo là chúng ta gọi component này ra và sử dụng thôi. Mình test thử với ảnh này nhé: 12345678910111213141516171819202122232425&lt;template&gt; &lt;div id=\"app\"&gt; &lt;ImageGif image = \"https://images.viblo.asia/a28b8126-1298-4ca7-a507-53865b32238d.png\" :width=\"100\" :height=\"100\" :column=\"7\" :row=\"4\" :max=\"27\" :frame=\"20\" :loop=\"10\" /&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import ImageGif from './components/image-gif.vue'export default &#123; name: 'app', components: &#123; ImageGif &#125;&#125;&lt;/script&gt; Thành quả : https://codesandbox.io/s/vue-template-znn3p Kết luậnCác bạn cũng có thể tham khảo thêm github:https://github.com/tuananhp-1844/image-gif","categories":[],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://phamtuananh1996.github.io/tags/javascript/"},{"name":"vuejs","slug":"vuejs","permalink":"https://phamtuananh1996.github.io/tags/vuejs/"}]},{"title":"\"Đóng trình duyệt, session mất\" hiểu thế nào cho đúng?","slug":"dong-trinh-duyet-session-mat-hieu-the-nao-cho-dung","date":"2019-08-07T08:34:39.000Z","updated":"2024-01-04T00:39:10.946Z","comments":true,"path":"2019/08/07/dong-trinh-duyet-session-mat-hieu-the-nao-cho-dung/","link":"","permalink":"https://phamtuananh1996.github.io/2019/08/07/dong-trinh-duyet-session-mat-hieu-the-nao-cho-dung/","excerpt":"","text":"Đặt vấn đềMình đã nghe rất nhiều người nói “session sẽ mất khi đóng trình duyệt”. Đặc biết là khi còn là sinh viên thì câu này là câu “thần chú” khi đi phỏng vấn. Vậy có phải khi đóng trình duyệt thật sự session sẽ mất không ? Và session còn mất trong các trường hợp nào nữa? Note: Bài này mình dùng ngôn ngữ php và nginx nhé Session là gì?Một session hay còn gọi là một phiên làm việc. Trong khoa học máy tính, Nó đơn giản là cách giao tiếp giữa client với server. Một session bắt đầu khi client gửi request đến sever, nó tồn tại xuyên suốt từ trang này đến trang khác trong ứng dụng và chỉ kết thúc khi hết thời gian timeout . Giá trị của session sẽ được lưu trong một tệp tin trên máy chủ. Khái niệm session chắc không quá xa lạ nữa. Mình muốn làm dõ hơn nữa khái niệm này: *”Giá trị của session sẽ được lưu trong một tệp tin trên máy chủ”* Mình muốn biết tập tin đó lưu trữ nhưng gì và ở đâu ? Mình sẽ tạo ra 1 session và lưu 1 số giá trị vào: 1234567&lt;?phpsession_start();$_SESSION[\"color\"] = \"red\";$_SESSION[\"color1\"] = \"yellow\";echo \"Session is created\"; Sau đó mở trình duyệt chrome để chạy.Vậy là mình đã tạo session thành công. Thì mặc định session sẽ được lưu /var/lib/php/session nhé và chúng ta có thể thay đổi nơi lưu trữ session trong file php.ini Mình thấy có file sess_qg2vvqet5ft791f4hgc49hcqr8 được tạo ra. thử mở ra xem có gì bên trong nào Vậy là trong file lưu tên và giá trị mà chúng ta vừa set vào còn s:3 và s:6 là kiểu dữ liệu và độ dài (String độ dài 3 và String độ dài 6) Cách phân biệt session của các trình duyệt khác nhau Session khi sinh ra được lưu trên 1 file có tên dài dòng, khó đoán và được tạo ngẫu nhiên là session id trên máy chủ, và đồng thời gửi lại cho client 1 Session cookie (không phải session) có nội dung (hay giá trị) đúng như session id (để có thể so khớp session nào là của client nào). Session cookie (không phải session) khác với cookie thông thường đó là khi đóng trình duyệt thì loại cookie này sẽ mất. Vậy chúng ta tìm trên trình duyệt chrome xem cookie này như thế nào: Đối với mỗi ngôn ngữ lập trình web sẽ có tên Session cookie quy định như php là PHPSESSID, jsp là JSESSIONID, … Vậy PHPSESSID của trình duyệt này là qg2vvqet5ft791f4hgc49hcqr8 và nó match đúng với file vừa được tạo ra trên server. Để làm dõ hơn thì mình mở bằng trình duyệt firefox Sau khi chạy thì mình thấy trên server có tạo thêm 1 file sess_su7q6pskehc3nfqiu479p4oqvn Và session cookie của trình duyệt firefox cũng match đúng với file đó. Vậy dựa vào PHPSESSID đó mà server có thể phân biệt được session nào là của trình duyệt nào. Timeout của sessionLà khoảng thời gian mà session tồn tại nếu không có request từ client đến server . mặc định là 24 phút .bạn cũng có thể thay đổi khoảng thời gian này phong file php.ini Quay lại vấn đềDựa vào những thứ tìm được từ bên trên mình sẽ đặt giả thiết thế này cho hình dung: Tủ (session) :file_cabinet: Chìa khóa (Session cookie) :old_key: Bạn (client) :speak_no_evil: người cho thuê tủ (server) :pig: Đồ dùng trong tủ (nội dung của session) :cookie: Qui định : Mỗi chìa khóa chỉ mở được 1 tủ, mỗi tủ có đồ dùng bên trong. Nếu bạn không quay lại sử dụng tủ thì tủ sẽ bị thi hồi sau 1 khoảng thời gian (do người cho thuê quyết định) kể cả bạn có chìa khóa. :joy::joy: Nếu làm mất chìa khóa thì bạn sẽ không sử dụng được tủ. Như đã biết thì đóng trình duyệt thì Session cookie sẽ mất. Trường hợp này được tưởng tượng như sau: Người cho thuê tủ cho bạn thuê tủ và đưa cho bạn chìa khóa để sử dụng cái tủ đấy. nhưng vô tình bạn làm mất chìa khóa. Mặc dù vẫn có tủ ở đấy. Và theo quy định bạn không sử dụng tủ trong 1 khoảng thời gian thì tủ sẽ bị thu hồi. Vậy câu “session sẽ mất khi đóng trình duyệt” Trường hợp này sẽ là:Tủ sẽ bị thu hồi khi bạn mất chìa khóa. nhưng thật ra bạn mất chìa khóa thì tủ vẫn còn đó. chỉ là do không có chìa khóa bạn không thể sử dụng được tủ và do không sử dụng lên sau 1 khoảng thời gian tủ sẽ bị thu hồi. Kết luậnVậy đóng trình duyệt thì session bị mất . Lý do là khi đóng trình duyện thì Session cookie của bạn bị xóa. và vì không có cái Session cookie nữa .lên server không biết bạn là ai còn cái session cũ của bạn thì vẫn còn ở đó. và do sau 1 khoảng thời gian được qui định session ấy không được sử dụng đến vì vậy nó đã bị kill Qua bài viết này mình muốn làm dõ hơn vì sao đóng trình duyệt thì session bị mất. qua đó cũng hiểu dõ hơn về cớ chế hoạt động của session. Cảm ơn các bạn đã đọc đến đây ạ :heart_eyes::heart_eyes::heart_eyes::heart_eyes::heart_eyes::heart_eyes:","categories":[],"tags":[{"name":"cookie","slug":"cookie","permalink":"https://phamtuananh1996.github.io/tags/cookie/"},{"name":"session","slug":"session","permalink":"https://phamtuananh1996.github.io/tags/session/"}]},{"title":"CRUD Unit Testing trong Laravel","slug":"crud-unit-testing-trong-laravel","date":"2019-07-01T10:08:37.000Z","updated":"2024-01-04T00:39:10.946Z","comments":true,"path":"2019/07/01/crud-unit-testing-trong-laravel/","link":"","permalink":"https://phamtuananh1996.github.io/2019/07/01/crud-unit-testing-trong-laravel/","excerpt":"","text":"Giới thiệu1. UnitTest là gì? UnitTest: Kiểm thử ở mức đơn vị mã nguồn. Một đơn vị mã nguồn là thành phần nhỏ nhất trong mã nguồn mà chúng ta có thể kiểm tra như. Trong Unit Test ta sẽ kiểm thử các class, method,…Mục tiêu của unit testing là kiểm tra tính đúng đắn trong các xử lý của từng đơn vị mã nguồn. Hiểu đơn giản đây là công việc viết code để test code chúng ta viết ra. Để thực hiện công việc này chúng ta cần PHPUnit và trong Laravel tích hợp sẵn PHPUnit. Trong bài viết này mình sẽ demo 1 ví dụ về unit test Tạo model và migrationCác bạn chạy lệnh để tạo ra model và migration Category 1php artisan make:model Category -m Ở file Model App\\Category.php : 12345678910111213&lt;?phpnamespace App;use Illuminate\\Database\\Eloquent\\Model;class Category extends Model&#123; protected $fillable = [ 'name', 'description', ];&#125; Viết migrate tạo table categories: 123456789101112131415161718192021222324252627282930313233&lt;?phpuse Illuminate\\Support\\Facades\\Schema;use Illuminate\\Database\\Schema\\Blueprint;use Illuminate\\Database\\Migrations\\Migration;class CreateCategoriesTable extends Migration&#123; /** * Run the migrations. * * @return void */ public function up() &#123; Schema::create('categories', function (Blueprint $table) &#123; $table-&gt;bigIncrements('id'); $table-&gt;string('name'); $table-&gt;string('description')-&gt;nullable(); $table-&gt;timestamps(); &#125;); &#125; /** * Reverse the migrations. * * @return void */ public function down() &#123; Schema::dropIfExists('categories'); &#125;&#125; Vậy là tạo xong model và migration chạy lệnh 1php artisan migrate để thực thi file migration vừa tạo. Tiếp theo , tạo các chức năng CRUD cho Category , ở đây mình dùng repository nhé! Tạo các crud function trong repositoryỞ đây mình tập trung nhiều vào phần test lên mình tạo file repository đơn giản. Các bạn tạo file App\\Repositories\\CategoryRepository.php và tạo các function CRUD như sau: 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;?phpnamespace App\\Repositories;use App\\Category;class CategoryRepository&#123; protected $model; public function __construct() &#123; $this-&gt;model = $this-&gt;model = app()-&gt;make(Category::class); &#125; // Tạo category public function storeCategory($data) : Category &#123; $category = $this-&gt;model-&gt;create($data); return $category; &#125; // Update category public function updateCategory($data, $category) : bool &#123; return $category-&gt;update($data); &#125; // Show category public function showCategory($category_id) : Category &#123; return $this-&gt;model-&gt;findOrFail($category_id); &#125; // Destroy category public function destroyCategory($category) : bool &#123; return $this-&gt;model-&gt;delete(); &#125;&#125; Vậy là đã xong các chức năng thêm sửa xóa rồi. bắt đầu viết test thôi !!! :100::100: Tiến hành tạo CRUD Unit TestingĐể tạo 1 test, ta sử dụng câu lệnh: 1234&#x2F;&#x2F; Tạo 1 test trong thư mục Feature php artisan make:test CategoryTest&#x2F;&#x2F; Tạo 1 test trong thư mục Unit php artisan make:test CategoryTest --unit Lưu ý: Nội dung bên trong thư mục Feature hay Unit có cấu trúc giống thư mục app/ ví dụ app/Repositories/CategoryRepository.php thì trong thư mục Unit là test/Unit/Repositories/CategoryRepository.php cho dễ quản lý nhé Ở đây mình tạo unit test lên chạy lệnh: 1php artisan make:test Repositories&#x2F;CategoryTest --unit Trước khi viết test mình lưu ý 2 function sau: setUp() : Chạy trước mỗi method test. Sử dụng khi muốn khởi tạo biến, mở kết nối file,… chuẩn bị môi trường để test tearDown(): Chạy sau mỗi method test. Sử dụng để hủy các biến, kết nối,… Ví dụ : 12345678910111213141516171819202122232425262728293031323334353637383940&lt;?phpnamespace Tests\\Unit\\Repositories;use Tests\\TestCase;use Illuminate\\Foundation\\Testing\\WithFaker;use Illuminate\\Foundation\\Testing\\RefreshDatabase;class CategoryTest extends TestCase&#123; public function setUp() : void &#123; parent::setUp(); &#125; public function tearDown() : void &#123; parent::tearDown(); &#125; /** * A basic unit test example 1. * * @return void */ public function testExample1() &#123; $this-&gt;assertTrue(true); &#125; /** * A basic unit test example 2. * * @return void */ public function testExample2() &#123; $this-&gt;assertTrue(true); &#125;&#125; Việc test sẽ lần lượt chạy như sau: Method: setUp() Method: testExample1() Method: tearDown() Method: setUp() Method: testExample2() Method: tearDown() Test chức năng tạo (store)Trong file CategoryTest.php 123456789101112131415161718192021222324252627282930313233343536373839404142use Tests\\TestCase;use Illuminate\\Foundation\\Testing\\WithFaker;use Illuminate\\Foundation\\Testing\\RefreshDatabase;use App\\Repositories\\CategoryRepository;use App\\Category;use Faker\\Factory as Faker;class CategoryTest extends TestCase&#123; protected $category; public function setUp() : void &#123; parent::setUp(); $this-&gt;faker = Faker::create(); // chuẩn bị dữ liệu test $this-&gt;category = [ 'name' =&gt; $this-&gt;faker-&gt;name, 'description' =&gt; $this-&gt;faker-&gt;name, ]; // khởi tạo lớp CategoryRepository $this-&gt;categoryRepository = new CategoryRepository(); &#125; /** * A basic unit test store * * @return void */ public function testStore() &#123; // Gọi hàm tạo $category = $this-&gt;categoryRepository-&gt;storeCategory($this-&gt;category); // Kiểm tra xem kết quả trả về có là thể hiện của lớp Category hay không $this-&gt;assertInstanceOf(Category::class, $category); // Kiểm tra data trả về $this-&gt;assertEquals($this-&gt;category['name'], $category-&gt;name); $this-&gt;assertEquals($this-&gt;category['description'], $category-&gt;description); // Kiểm tra dữ liệu có tồn tại trong cơ sở dữ liệu hay không $this-&gt;assertDatabaseHas('categories', $this-&gt;category); &#125;&#125; vậy là xong . sau đó chúng ta chạy lệnh để test: 1vendor&#x2F;bin&#x2F;phpunit Nếu trả về như này là đã pass hết trường hợp: 1234567PHPUnit 7.5.13 by Sebastian Bergmann and contributors.... 3 &#x2F; 3 (100%)Time: 373 ms, Memory: 18.00 MBOK (3 tests, 6 assertions) Tương tự với các chức năng show, update, destroy 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172&lt;?phpnamespace Tests\\Unit\\Repositories;use Tests\\TestCase;use Illuminate\\Foundation\\Testing\\WithFaker;use Illuminate\\Foundation\\Testing\\RefreshDatabase;use App\\Repositories\\CategoryRepository;use App\\Category;use Faker\\Factory as Faker;class CategoryTest extends TestCase&#123; protected $category; public function setUp() : void &#123; parent::setUp(); $this-&gt;faker = Faker::create(); $this-&gt;category = [ 'name' =&gt; $this-&gt;faker-&gt;name, 'description' =&gt; $this-&gt;faker-&gt;name, ]; $this-&gt;categoryRepository = new CategoryRepository(); &#125; /** * A basic unit test store * * @return void */ public function testStore() &#123; $category = $this-&gt;categoryRepository-&gt;storeCategory($this-&gt;category); $this-&gt;assertInstanceOf(Category::class, $category); $this-&gt;assertEquals($this-&gt;category['name'], $category-&gt;name); $this-&gt;assertEquals($this-&gt;category['description'], $category-&gt;description); $this-&gt;assertDatabaseHas('categories', $this-&gt;category); &#125; public function testShow() &#123; $category = factory(Category::class)-&gt;create(); $found = $this-&gt;categoryRepository-&gt;showCategory($category-&gt;id); $this-&gt;assertInstanceOf(Category::class, $found); $this-&gt;assertEquals($found-&gt;name, $category-&gt;name); $this-&gt;assertEquals($found-&gt;description, $category-&gt;description); &#125; public function testUpdate() &#123; // Tạo dữ liệu mẫu $category = factory(Category::class)-&gt;create(); $newCategory = $this-&gt;categoryRepository-&gt;updateCategory($this-&gt;category, $category); // Kiểm tra dữ liệu trả về $this-&gt;assertInstanceOf(Category::class, $newCategory); $this-&gt;assertEquals($newCategory-&gt;name, $this-&gt;category['name']); $this-&gt;assertEquals($newCategory-&gt;description, $this-&gt;category['description']); // Kiểm tra xem cơ sở dữ liệu đã được cập nhập hay chưa $this-&gt;assertDatabaseHas('categories', $this-&gt;category); &#125; public function testDestroy() &#123; $category = factory(Category::class)-&gt;create(); $deleteCategory = $this-&gt;categoryRepository-&gt;destroyCategory($category); // Kiểm tra dữ liệu có trả về true hay không $this-&gt;assertTrue($deleteCategory); // kiểm tra xem dữ liệu đã được xóa trong cơ sở dữ liệu hay chưa $this-&gt;assertDatabaseMissing('categories', $category-&gt;toArray()); &#125;&#125; Tổng kếtHy vọng qua bài viết này các bạn có thể hiểu hơn về unit test Tham khảo: https://medium.com/@jsdecena/crud-unit-testing-in-laravel-5-ac286f592cfdhttps://laravel.com/docs/5.8/testing","categories":[],"tags":[{"name":"laravel","slug":"laravel","permalink":"https://phamtuananh1996.github.io/tags/laravel/"},{"name":"unit test","slug":"unit-test","permalink":"https://phamtuananh1996.github.io/tags/unit-test/"},{"name":"crud","slug":"crud","permalink":"https://phamtuananh1996.github.io/tags/crud/"}]},{"title":"Tìm hiểu về routing trong nuxtjs","slug":"tim-hieu-ve-routing-trong-nuxtjs","date":"2019-06-27T08:49:21.000Z","updated":"2024-01-04T00:39:10.962Z","comments":true,"path":"2019/06/27/tim-hieu-ve-routing-trong-nuxtjs/","link":"","permalink":"https://phamtuananh1996.github.io/2019/06/27/tim-hieu-ve-routing-trong-nuxtjs/","excerpt":"","text":"Giới thiệuNhắc đến ứng dụng web thì routing là 1 thành phần không thể thiếu, Và framework nuxtjs cũng hỗ trợ rất tốt việc này.cùng tìm hiểu nhé ! Nuxt.js tự động tạo ra cấu hình vue-router dựa theo cây thư mục của bạn trong thư mục Pages. Để chuyển hương giữa các trang thay vì dùng thẻ a thì chúng ta dùng &lt; nuxt-link &gt; component Ví dụ: 123&lt;template&gt; &lt;nuxt-link to=\"/\"&gt;Home page&lt;/nuxt-link&gt;&lt;/template&gt; Basic RoutesVí dụ, nếu cấu trúc thư mục của bạn trong pages như này: 12345pages&#x2F;--| user&#x2F;-----| index.vue-----| one.vue--| index.vue Thì nuxt sẽ tự động tạo ra file config route như thế này: 12345678910111213141516171819router: &#123; routes: [ &#123; name: 'index', path: '/', component: 'pages/index.vue' &#125;, &#123; name: 'user', path: '/user', component: 'pages/user/index.vue' &#125;, &#123; name: 'user-one', path: '/user/one', component: 'pages/user/one.vue' &#125; ]&#125; Nhìn khá dễ hiểu phải không. Thay vì mình phải tạo ra file config cho route thì ở nuxt chúng ta chỉ cần tạo cây thư mục trong thư mục pages Dynamic RoutesĐể định nghĩa 1 router với tham số. Thì bạn cần đặt tên thư mục hoặc tên file .vue với tiền tố gạch dưới “_”. Ví dụ, cấu trúc cây thư mục trong Pages của bạn như sau: 1234567pages&#x2F;--| _slug&#x2F;-----| comments.vue-----| index.vue--| users&#x2F;-----| _id.vue--| index.vue Thì nó sẽ tự động generate như sau: 123456789101112131415161718192021222324router: &#123; routes: [ &#123; name: 'index', path: '/', component: 'pages/index.vue' &#125;, &#123; name: 'users-id', path: '/users/:id?', component: 'pages/users/_id.vue' &#125;, &#123; name: 'slug', path: '/:slug', component: 'pages/_slug/index.vue' &#125;, &#123; name: 'slug-comments', path: '/:slug/comments', component: 'pages/_slug/comments.vue' &#125; ]&#125; Validate tham số trên router: Nuxt.js cho phép bạn validate tham số trong phương thức validate() trong component. Ví dụ ở file: pages/users/_id.vue : Chúng ta muốn tham số :id phải là số 123456export default &#123; validate (&#123; params &#125;) &#123; // Must be a number return /^\\d+$/.test(params.id) &#125;&#125; Chú ý : nếu phương thứ validate() trả về false hoặc bị lỗi . Nuxtjs sẽ tự động load ra trang lỗi 404 với trường hợp trả về bằng false và trả về trang lỗi 500 nếu phương thức bị lỗi. Nested RoutesNuxt.js cho phép chúng ta tạo các router lồng nhau. Nếu bạn muốn định nghĩa component cha. bạn cần tạo 1 file .vue giống với tên thư mục mà chứa các view con. Nghe có vẻ lằng nhằng mình vào luôn ví dụ nhé. Ví dụ cấu trúc cây thư mục của mình như sau: 12345pages&#x2F;--| users&#x2F;-----| _id.vue-----| index.vue--| users.vue Nó sẽ tự động generate như này: 1234567891011121314151617181920router: &#123; routes: [ &#123; path: '/users', component: 'pages/users.vue', children: [ &#123; path: '', component: 'pages/users/index.vue', name: 'users' &#125;, &#123; path: ':id', component: 'pages/users/_id.vue', name: 'users-id' &#125; ] &#125; ]&#125; Đừng quên include component trong component cha (.vue file) nhé ! MiddlewareMiddleware cho phép bạn định nghĩa một function trước khi hiển thị một trang hay một nhóm trang. Tất cả các middleware phải được đặt trong thư mục Middleware và tên file sẽ là tên của middleware. ví dụ (middleware/auth.js thì tên middleware sẽ là auth) Một middleware sẽ nhận 1 biến the context làm tham số đầu tiên. Ví dụ: 123export default function (context) &#123; context.userAgent = process.server ? context.req.headers['user-agent'] : navigator.userAgent&#125; Ở chế độ universal, thì middleware sẽ được gọi server-side một lần (Lần đâu tiên request đến nuxt app hoặc khi page được reload lại). với các lần điều hướng tiếp theo thì middleware được thực hiện ở client-side. Middleware sẽ được thực hiện theo thứ tự: nuxt.config.js Matched layouts Matched pages Kết luận Bài tiếp theo mình sẽ tìm hiểu về Views trong nuxtjs Tham khảohttps://nuxtjs.org/guide/routing","categories":[],"tags":[{"name":"vuejs","slug":"vuejs","permalink":"https://phamtuananh1996.github.io/tags/vuejs/"},{"name":"nuxtjs","slug":"nuxtjs","permalink":"https://phamtuananh1996.github.io/tags/nuxtjs/"}]},{"title":"Cài đặt và tìm hiểu cấu trúc thư mục của nuxtjs","slug":"cai-dat-va-tim-hieu-cau-truc-thu-muc-cua-nuxtjs","date":"2019-06-26T08:54:27.000Z","updated":"2024-01-04T00:39:10.946Z","comments":true,"path":"2019/06/26/cai-dat-va-tim-hieu-cau-truc-thu-muc-cua-nuxtjs/","link":"","permalink":"https://phamtuananh1996.github.io/2019/06/26/cai-dat-va-tim-hieu-cau-truc-thu-muc-cua-nuxtjs/","excerpt":"","text":"Giới thiệuNuxtjs là một framework sử dụng để xây dựng các ứng dụng từ Vue.js . Vì vậy điều kiện đầu tiên để tìm hiểu Nuxtjs là bạn phải tìm hiểu về vuejs trước.Một số tính năng nổi bật của Next.js: Mặc định đã được render phía server Tự động split code để load page nhanh hơn Đơn giản hóa routing phía client (page based) Môi trường dev với webpack-based hỗ trợ Hot Module Replacement (HMR) Có thể implement với Express hoặc những Node.js HTTP server khác Dễ dàng customize với Babel và Webpack configCài đặtĐể Cài đặt thì chúng ta có 2 cách : Dùng tool create-nuxt-app Dùng nxp Ở đây mình sẽ dùng nxp để cài đặt nuxtjs: 1$ npx create-nuxt-app &lt;project-name&gt; Hoặc qua yarn : 1$ yarn create nuxt-app &lt;project-name&gt; Trong quá trình cài đặt nó sẽ hỏi bạn 1 số thông tin như: Chọn server-side frameworks Chọn UI framework ưa thích của bạn Chọn testing framework Chế độ nuxt mà bạn muốn chọn ….. Sau khi chọn xong các thứ các thứ thì done. Để chạy được app chúng ta cd vào project sau đó chạy lệnh : 1npm run dev Sau khi chạy lệnh này xong thì mở trình duyệt và kiểm tra thành quả ở http://localhost:3000. Cấu trúc thư mụcAssets Directory Thư mục asset Chứa tài nguyên chưa được biên dịch như: Stylus hoặc Sass files, images, hoặc fontsComponents Directory Thư mục components chứa các file vuejs của bạn Layouts Directory Thư mục Layouts Chứa các layout (giao diện) cho ứng dụng Middleware Directory Thư mục Middleware Chức Middleware của ứng dụng, middleware cho phép bạn định nghĩa các function được chạy trước khi render 1 page hoặc nhóm page. Pages Directory Thư mục Pages Thư mục này chứa các view của ứng dụng cũng như định nghĩa routes cho ứng dụng. Plugins Directory Thư mục Plugins chức các plugin js Static Directory Thư mục statis Chứa các file tĩnh như các file ảnh chẳng hạn, được map tự động ví dụ file /static/logo.png sẽ là yoursite/logo.png Store Directory Thư mục store chứa các file vuex store nuxt.config.js File File nuxt.config.js Chứa các cấu hình được thiết đặt cho ứng dụng của bạn package.json File File package.json Quá quen thuộc rồi nó chứa các dependencies và scripts. Chú ý không được đổi tên file này Aliases ALIAS DIRECTORY ~ or @ srcDir ~~ or @@ rootDir Trong file vue template của bạn, nếu bạn cần link trong thư mục assets hoặc static chúng ta sẽ sử dụng ~/assets/yourimage.png và ~/static/your_image.png Mình xin tạm dừng bài viết ở đây. bài này mình đã giới thiệu cách cài đặt và giới thiệu qua câu trúc thư mục NUXT . Bài sau mình sẽ tìm hiểu về routing. cảm ơn các bạn đã đọc hết bài viết.Yêu hay không yêu xin để lại 1 comment ạ.","categories":[],"tags":[{"name":"vuejs","slug":"vuejs","permalink":"https://phamtuananh1996.github.io/tags/vuejs/"},{"name":"nuxtjs","slug":"nuxtjs","permalink":"https://phamtuananh1996.github.io/tags/nuxtjs/"}]},{"title":"Thay âm thanh tin nhắn Facebook bằng giọng của chị google với chưa đến 10 dòng code","slug":"thay-am-thanh-tin-nhan-facebook-bang-giong-cua-chi-google-voi-chua-den-10-dong-code","date":"2019-01-19T14:33:17.000Z","updated":"2024-01-04T00:39:10.962Z","comments":true,"path":"2019/01/19/thay-am-thanh-tin-nhan-facebook-bang-giong-cua-chi-google-voi-chua-den-10-dong-code/","link":"","permalink":"https://phamtuananh1996.github.io/2019/01/19/thay-am-thanh-tin-nhan-facebook-bang-giong-cua-chi-google-voi-chua-den-10-dong-code/","excerpt":"","text":"Nay lướt viblo Thấy bài https://viblo.asia/p/xay-dung-ung-dung-google-extension-don-gian-trong-10-phut-phan-1-RnB5pkrrlPG khá hay và mình khá hứng thú .vậy là mình bắt tay ngay vào viết 1 cái gì đó vui vui để thực hành ngay. Bài ToánMình muốn khi có ai đó nhắn tin cho mình thay vì tiếng báo tin nhắn như thường lệ mà mình muốn 1 âm thanh khác phát lên. Như video dưới đây .nhưng chỉ giống phần kết quả thôi nhé.còn cách làm hoàn toàn khác thanh niên trong video nhé. vì video mình lấy trên mạng. {@embed: https://www.youtube.com/watch?v=kHFZsUvgH-o} Hướng giải quyết Khi có tin nhắn thì chắc chắn Fb phải gửi 1 xhr lên để lấy thông tin của tin nhắn ấy =&gt; vậy mình cần phải tìm ra cái xhr đấy . Khi xhr được gửi đi thì mình sẽ chạy 1 đoạn script để phát âm thanh mà mình muốn =&gt; vậy mình cần 1 file âm thanh, và 1 đoạn script Muốn chạy được đoạn script ấy mình sẽ dùng chome extension. Giải quyếtvấn đề 1 : Khi có tin nhắn thì chắc chắn Fb phải gửi 1 xhr lên để lấy thông tin của tin nhắn ấy =&gt; vậy mình cần phải tìm ra cái xhr đấy Vấn đề này thì khá dễ ràng để tìm ra nhờ chrome developer tool của trình duyệt . sau 1 hồi mò mẫn thì mình đã tìm ra cái xhr ấy Vậy mình đã tim ra: https://www.facebook.com/ajax/mercury/delivery_receipts.php Mỗi lần có tin nhắn nó đề gửi cái này lên vấn đề 2 :Khi xhr được gửi đi thì mình sẽ chạy 1 đoạn script để phát âm thanh mà mình muốn =&gt; vậy mình cần 1 file âm thanh, và 1 đoạn script file âm thanh chị goole nói thì các bạn có thể truy cập https://translate.google.com/translate_tts?ie=UTF-8&amp;client=tw-ob&amp;q=am-thanh-muon-phat&amp;tl=vi&amp;total=1&amp;idx=0&amp;textlen=5 để tải xuống file âm thanh và thay âm thanh bạn muốn phát vào thôi. Đoạn scrip phát âm thanh thì chỉ cần đơn giản thế này thôi : var audio = new Audio(&apos;duong-dan-den-file-am-thanh.mp3&apos;); audio.play(); *Vấn đề 3 : Viết chome extension * Mình sẽ tạo ra 1 thư mục chứa 3 file : index.js =&gt; chứa đoạn script manifest.json =&gt; dùng để cấu hình cho extension notification.mp3 =&gt; file âm thanh Cấu hình file manifest.json12345678910&#123; \"name\": \"Google and facebook\", \"version\": \"1.0\", \"description\": \"Google and facebook!\", \"permissions\": [\"webRequest\",\"https://www.facebook.com/*\"], \"background\": &#123; \"scripts\": [\"index.js\"] &#125;, \"manifest_version\": 2&#125; permissions : ở đây mình xin quyền webRequest và mình chỉ sử dụng tiện ích này khi truy cập trang facebook các thông số khác chắc không phải giải thích gì thêm File index.js Ở đây mình sẽ dùng webRequest để theo dõi khi có tin nhắn dựa vào cái xhr mình vừa tìm được Các bạn có thể xem chi tiết: https://developer.chrome.com/extensions/webRequest Đây là ví dụ lắng nghe sự kiện onBeforeRequest : 12chrome.webRequest.onBeforeRequest.addListener( callback, filter, opt_extraInfoSpec); vậy callback sẽ là function để thực thi 1 hành động gì đó khi thỏa mãn cái filter kia. Ở ví dụ này thì cái callback sẽ là function phát âm thanh, filter sẽ là cái urls [“https://www.facebook.com/ajax/mercury/delivery_receipts.php*&quot;] Vậy mình ghép code file index.js như sau: 12345678chrome.webRequest.onBeforeRequest.addListener( function (details) &#123; var audio &#x3D; new Audio(&#39;notification.mp3&#39;); audio.play(); &#125;, &#123; urls: [&quot;https:&#x2F;&#x2F;www.facebook.com&#x2F;ajax&#x2F;mercury&#x2F;delivery_receipts.php*&quot;] &#125;); Vậy là xong : giờ mình đã có 1 thư mục chứa 3 file index.js, manifest.json, notification.mp3 . giờ mình chỉ việc import vào trình duyệt và test thành quả thôi. Để import vào trình duyệt bạn vào đường dẫn chrome://extensions/ bật chế độ nhà phát triển và tải lên tiện ích thì các b chỉ cần chọn đến thư mục chưa 3 file kia là ok . Kết luận: Vậy là xong giờ bạn vào facebook để xem thành quả thôi ! :) :100::joy: . Thành công hay không nhớ comment cho mình biết nhé !!! link github : https://github.com/phamtuananh1996/chome-extension","categories":[],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://phamtuananh1996.github.io/tags/javascript/"},{"name":"extension","slug":"extension","permalink":"https://phamtuananh1996.github.io/tags/extension/"},{"name":"facebook","slug":"facebook","permalink":"https://phamtuananh1996.github.io/tags/facebook/"}]}],"categories":[],"tags":[{"name":"laravel","slug":"laravel","permalink":"https://phamtuananh1996.github.io/tags/laravel/"},{"name":"javascript","slug":"javascript","permalink":"https://phamtuananh1996.github.io/tags/javascript/"},{"name":"server","slug":"server","permalink":"https://phamtuananh1996.github.io/tags/server/"},{"name":"performence","slug":"performence","permalink":"https://phamtuananh1996.github.io/tags/performence/"},{"name":"test","slug":"test","permalink":"https://phamtuananh1996.github.io/tags/test/"},{"name":"k6.io","slug":"k6-io","permalink":"https://phamtuananh1996.github.io/tags/k6-io/"},{"name":"vuejs","slug":"vuejs","permalink":"https://phamtuananh1996.github.io/tags/vuejs/"},{"name":"npm","slug":"npm","permalink":"https://phamtuananh1996.github.io/tags/npm/"},{"name":"package","slug":"package","permalink":"https://phamtuananh1996.github.io/tags/package/"},{"name":"socket.io","slug":"socket-io","permalink":"https://phamtuananh1996.github.io/tags/socket-io/"},{"name":"Caddy Server","slug":"Caddy-Server","permalink":"https://phamtuananh1996.github.io/tags/Caddy-Server/"},{"name":"hexo","slug":"hexo","permalink":"https://phamtuananh1996.github.io/tags/hexo/"},{"name":"extension","slug":"extension","permalink":"https://phamtuananh1996.github.io/tags/extension/"},{"name":"trick","slug":"trick","permalink":"https://phamtuananh1996.github.io/tags/trick/"},{"name":"cookie","slug":"cookie","permalink":"https://phamtuananh1996.github.io/tags/cookie/"},{"name":"session","slug":"session","permalink":"https://phamtuananh1996.github.io/tags/session/"},{"name":"unit test","slug":"unit-test","permalink":"https://phamtuananh1996.github.io/tags/unit-test/"},{"name":"crud","slug":"crud","permalink":"https://phamtuananh1996.github.io/tags/crud/"},{"name":"nuxtjs","slug":"nuxtjs","permalink":"https://phamtuananh1996.github.io/tags/nuxtjs/"},{"name":"facebook","slug":"facebook","permalink":"https://phamtuananh1996.github.io/tags/facebook/"}]}